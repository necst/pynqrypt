-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pynqrypt_encrypt is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 128;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of pynqrypt_encrypt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pynqrypt_encrypt_pynqrypt_encrypt,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020i-clg400-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=11,HLS_SYN_DSP=0,HLS_SYN_FF=5047,HLS_SYN_LUT=16536,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv60_1 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal key : STD_LOGIC_VECTOR (127 downto 0);
    signal nonce : STD_LOGIC_VECTOR (95 downto 0);
    signal plaintext_length : STD_LOGIC_VECTOR (63 downto 0);
    signal plaintext : STD_LOGIC_VECTOR (63 downto 0);
    signal ciphertext : STD_LOGIC_VECTOR (63 downto 0);
    signal crypto_aes_sbox_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal crypto_aes_sbox_V_ce0 : STD_LOGIC;
    signal crypto_aes_sbox_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal crypto_aes_sbox_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln18_reg_1138 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal nonce_read_reg_1087 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_1_reg_1092 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln628_fu_373_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln628_reg_1097 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln18_3_reg_1102 : STD_LOGIC_VECTOR (59 downto 0);
    signal trunc_ln18_1_reg_1107 : STD_LOGIC_VECTOR (59 downto 0);
    signal trunc_ln2_reg_1112 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln18_2_reg_1118 : STD_LOGIC_VECTOR (59 downto 0);
    signal icmp_ln18_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_3_fu_450_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal i_3_reg_1142 : STD_LOGIC_VECTOR (59 downto 0);
    signal block_V_reg_1147 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_2_fu_461_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_1155 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal shl_ln_fu_471_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_reg_1160 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln183_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln185_fu_483_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln185_reg_1168 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln185_fu_489_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln185_reg_1178 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_6_fu_498_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_6_reg_1190 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln628_1_fu_578_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln628_1_reg_1195 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal lshr_ln628_2_fu_584_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln628_2_reg_1200 : STD_LOGIC_VECTOR (127 downto 0);
    signal icmp_ln368_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln368_reg_1205 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln368_1_fu_632_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln368_1_reg_1211 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_s_fu_762_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal block_V_2_fu_768_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_5_fu_780_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_1230 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal shl_ln184_1_fu_790_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln184_1_reg_1235 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln183_1_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln185_1_fu_802_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln185_1_reg_1243 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln185_1_fu_808_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln185_1_reg_1253 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln628_4_fu_890_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln628_4_reg_1265 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal lshr_ln628_5_fu_896_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln628_5_reg_1270 : STD_LOGIC_VECTOR (127 downto 0);
    signal icmp_ln368_1_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln368_1_reg_1275 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln368_5_fu_944_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln368_5_reg_1281 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_3_fu_1074_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal p_round_key_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_round_key_V_ce0 : STD_LOGIC;
    signal p_round_key_V_we0 : STD_LOGIC;
    signal p_round_key_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_round_key_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_round_key_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_round_key_V_ce1 : STD_LOGIC;
    signal p_round_key_V_we1 : STD_LOGIC;
    signal p_round_key_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_round_key_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pynqrypt_round_keys_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal pynqrypt_round_keys_V_ce0 : STD_LOGIC;
    signal pynqrypt_round_keys_V_we0 : STD_LOGIC;
    signal pynqrypt_round_keys_V_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_ap_start : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_ap_done : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_ap_idle : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_ap_ready : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_ce0 : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_we0 : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_ce1 : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_we1 : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_crypto_aes_sbox_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_crypto_aes_sbox_V_ce0 : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_ap_start : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_ap_done : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_ap_idle : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_ap_ready : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_p_round_key_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_p_round_key_V_ce0 : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_p_round_key_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_p_round_key_V_ce1 : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_pynqrypt_round_keys_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_pynqrypt_round_keys_V_ce0 : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_pynqrypt_round_keys_V_we0 : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_pynqrypt_round_keys_V_d0 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_aes_encrypt_block_fu_329_ap_start : STD_LOGIC;
    signal grp_aes_encrypt_block_fu_329_ap_done : STD_LOGIC;
    signal grp_aes_encrypt_block_fu_329_ap_idle : STD_LOGIC;
    signal grp_aes_encrypt_block_fu_329_ap_ready : STD_LOGIC;
    signal grp_aes_encrypt_block_fu_329_this_round_keys_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_encrypt_block_fu_329_this_round_keys_ce0 : STD_LOGIC;
    signal grp_aes_encrypt_block_fu_329_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal p_Val2_s_reg_271 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_reg_281 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_2_reg_292 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_4_reg_303 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_aes_encrypt_block_fu_329_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln18_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln18_1_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state10 : BOOLEAN;
    signal offset_fu_160 : STD_LOGIC_VECTOR (59 downto 0);
    signal trunc_ln184_fu_467_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln628_fu_479_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal offword_V_fu_495_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln628_fu_524_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln628_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln628_fu_520_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln628_1_fu_537_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_510_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_2_fu_529_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln628_fu_541_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln628_2_fu_557_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln628_fu_564_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln628_1_fu_549_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln628_2_fu_570_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln628_3_fu_574_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln368_fu_594_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln368_1_fu_600_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln368_1_fu_606_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln368_3_fu_612_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln368_4_fu_616_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln368_3_fu_620_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln368_fu_626_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln628_1_fu_638_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln628_fu_641_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_4_fu_651_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln368_fu_659_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln368_fu_662_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln368_fu_668_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln368_fu_655_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln368_1_fu_680_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln368_fu_674_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln368_1_fu_684_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal temp_V_fu_647_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln368_fu_700_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_705_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln368_2_fu_713_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln186_fu_696_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln368_2_fu_719_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln368_2_fu_723_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_5_fu_729_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_5_fu_690_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln368_2_fu_746_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln368_3_fu_739_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln368_2_fu_751_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln368_3_fu_757_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln184_1_fu_786_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln628_4_fu_798_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln628_1_fu_836_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln628_1_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln628_2_fu_832_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln628_3_fu_849_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_822_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_7_fu_841_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln628_3_fu_853_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln628_5_fu_869_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln628_1_fu_876_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln628_4_fu_861_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln628_6_fu_882_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln628_7_fu_886_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln368_4_fu_906_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln368_5_fu_912_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln368_4_fu_918_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln368_8_fu_924_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln368_9_fu_928_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln368_7_fu_932_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln368_1_fu_938_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln628_5_fu_950_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln628_3_fu_953_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_7_fu_963_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln368_5_fu_971_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln368_4_fu_974_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln368_3_fu_980_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln368_1_fu_967_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln368_6_fu_992_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln368_4_fu_986_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln368_5_fu_996_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal temp_V_1_fu_959_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln368_3_fu_1012_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_1017_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln368_6_fu_1025_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln186_4_fu_1008_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln368_7_fu_1031_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln368_6_fu_1035_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_10_fu_1041_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_8_fu_1002_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln368_5_fu_1058_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln368_7_fu_1051_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln368_6_fu_1063_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln368_7_fu_1069_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pynqrypt_encrypt_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_round_key_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        p_round_key_V_ce0 : OUT STD_LOGIC;
        p_round_key_V_we0 : OUT STD_LOGIC;
        p_round_key_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_round_key_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_round_key_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        p_round_key_V_ce1 : OUT STD_LOGIC;
        p_round_key_V_we1 : OUT STD_LOGIC;
        p_round_key_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_round_key_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        crypto_aes_sbox_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        crypto_aes_sbox_V_ce0 : OUT STD_LOGIC;
        crypto_aes_sbox_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component pynqrypt_encrypt_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_round_key_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        p_round_key_V_ce0 : OUT STD_LOGIC;
        p_round_key_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_round_key_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        p_round_key_V_ce1 : OUT STD_LOGIC;
        p_round_key_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        pynqrypt_round_keys_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        pynqrypt_round_keys_V_ce0 : OUT STD_LOGIC;
        pynqrypt_round_keys_V_we0 : OUT STD_LOGIC;
        pynqrypt_round_keys_V_d0 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component pynqrypt_encrypt_aes_encrypt_block IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        this_round_keys_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        this_round_keys_ce0 : OUT STD_LOGIC;
        this_round_keys_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component pynqrypt_encrypt_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_crypto_aes_sbox_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component pynqrypt_encrypt_p_round_key_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynqrypt_encrypt_pynqrypt_round_keys_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (127 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component pynqrypt_encrypt_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        key : OUT STD_LOGIC_VECTOR (127 downto 0);
        nonce : OUT STD_LOGIC_VECTOR (95 downto 0);
        plaintext_length : OUT STD_LOGIC_VECTOR (63 downto 0);
        plaintext : OUT STD_LOGIC_VECTOR (63 downto 0);
        ciphertext : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component pynqrypt_encrypt_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    crypto_aes_sbox_V_U : component pynqrypt_encrypt_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_crypto_aes_sbox_V_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => crypto_aes_sbox_V_address0,
        ce0 => crypto_aes_sbox_V_ce0,
        q0 => crypto_aes_sbox_V_q0,
        address1 => ap_const_lv8_0,
        ce1 => ap_const_logic_0,
        q1 => crypto_aes_sbox_V_q1);

    p_round_key_V_U : component pynqrypt_encrypt_p_round_key_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 44,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => p_round_key_V_address0,
        ce0 => p_round_key_V_ce0,
        we0 => p_round_key_V_we0,
        d0 => p_round_key_V_d0,
        q0 => p_round_key_V_q0,
        address1 => p_round_key_V_address1,
        ce1 => p_round_key_V_ce1,
        we1 => p_round_key_V_we1,
        d1 => p_round_key_V_d1,
        q1 => p_round_key_V_q1);

    pynqrypt_round_keys_V_U : component pynqrypt_encrypt_pynqrypt_round_keys_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 128,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => pynqrypt_round_keys_V_address0,
        ce0 => pynqrypt_round_keys_V_ce0,
        we0 => pynqrypt_round_keys_V_we0,
        d0 => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_pynqrypt_round_keys_V_d0,
        q0 => pynqrypt_round_keys_V_q0);

    grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314 : component pynqrypt_encrypt_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_ap_start,
        ap_done => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_ap_done,
        ap_idle => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_ap_idle,
        ap_ready => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_ap_ready,
        p_round_key_V_address0 => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_address0,
        p_round_key_V_ce0 => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_ce0,
        p_round_key_V_we0 => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_we0,
        p_round_key_V_d0 => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_d0,
        p_round_key_V_q0 => p_round_key_V_q0,
        p_round_key_V_address1 => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_address1,
        p_round_key_V_ce1 => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_ce1,
        p_round_key_V_we1 => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_we1,
        p_round_key_V_d1 => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_d1,
        p_round_key_V_q1 => p_round_key_V_q1,
        crypto_aes_sbox_V_address0 => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_crypto_aes_sbox_V_address0,
        crypto_aes_sbox_V_ce0 => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_crypto_aes_sbox_V_ce0,
        crypto_aes_sbox_V_q0 => crypto_aes_sbox_V_q0);

    grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323 : component pynqrypt_encrypt_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_ap_start,
        ap_done => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_ap_done,
        ap_idle => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_ap_idle,
        ap_ready => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_ap_ready,
        p_round_key_V_address0 => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_p_round_key_V_address0,
        p_round_key_V_ce0 => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_p_round_key_V_ce0,
        p_round_key_V_q0 => p_round_key_V_q0,
        p_round_key_V_address1 => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_p_round_key_V_address1,
        p_round_key_V_ce1 => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_p_round_key_V_ce1,
        p_round_key_V_q1 => p_round_key_V_q1,
        pynqrypt_round_keys_V_address0 => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_pynqrypt_round_keys_V_address0,
        pynqrypt_round_keys_V_ce0 => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_pynqrypt_round_keys_V_ce0,
        pynqrypt_round_keys_V_we0 => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_pynqrypt_round_keys_V_we0,
        pynqrypt_round_keys_V_d0 => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_pynqrypt_round_keys_V_d0);

    grp_aes_encrypt_block_fu_329 : component pynqrypt_encrypt_aes_encrypt_block
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_encrypt_block_fu_329_ap_start,
        ap_done => grp_aes_encrypt_block_fu_329_ap_done,
        ap_idle => grp_aes_encrypt_block_fu_329_ap_idle,
        ap_ready => grp_aes_encrypt_block_fu_329_ap_ready,
        this_round_keys_address0 => grp_aes_encrypt_block_fu_329_this_round_keys_address0,
        this_round_keys_ce0 => grp_aes_encrypt_block_fu_329_this_round_keys_ce0,
        this_round_keys_q0 => pynqrypt_round_keys_V_q0,
        p_read => p_Result_6_reg_1190,
        ap_return => grp_aes_encrypt_block_fu_329_ap_return);

    control_s_axi_U : component pynqrypt_encrypt_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        key => key,
        nonce => nonce,
        plaintext_length => plaintext_length,
        plaintext => plaintext,
        ciphertext => ciphertext,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component pynqrypt_encrypt_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 128,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => sext_ln18_fu_422_p1,
        I_ARLEN => trunc_ln2_reg_1112,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => sext_ln18_1_fu_432_p1,
        I_AWLEN => trunc_ln2_reg_1112,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => p_Val2_2_reg_292,
        I_WSTRB => ap_const_lv16_FFFF,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes_encrypt_block_fu_329_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes_encrypt_block_fu_329_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln183_fu_455_p2 = ap_const_lv1_1))) then 
                    grp_aes_encrypt_block_fu_329_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_encrypt_block_fu_329_ap_ready = ap_const_logic_1)) then 
                    grp_aes_encrypt_block_fu_329_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_ap_ready = ap_const_logic_1)) then 
                    grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_ap_ready = ap_const_logic_1)) then 
                    grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_4_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_4_reg_303 <= i_5_reg_1230;
            elsif (((grp_aes_encrypt_block_fu_329_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i_4_reg_303 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_reg_281 <= i_2_reg_1155;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_reg_281 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    offset_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                offset_fu_160 <= ap_const_lv60_0;
            elsif (((icmp_ln183_1_fu_774_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                offset_fu_160 <= i_3_reg_1142;
            end if; 
        end if;
    end process;

    p_Val2_2_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                p_Val2_2_reg_292 <= p_Result_3_fu_1074_p2;
            elsif (((grp_aes_encrypt_block_fu_329_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                p_Val2_2_reg_292 <= block_V_2_fu_768_p2;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                p_Val2_s_reg_271 <= p_Result_s_fu_762_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_Val2_s_reg_271 <= block_V_reg_1147;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                and_ln368_1_reg_1211 <= and_ln368_1_fu_632_p2;
                icmp_ln368_reg_1205 <= icmp_ln368_fu_590_p2;
                lshr_ln628_1_reg_1195 <= lshr_ln628_1_fu_578_p2;
                lshr_ln628_2_reg_1200 <= lshr_ln628_2_fu_584_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                and_ln368_5_reg_1281 <= and_ln368_5_fu_944_p2;
                icmp_ln368_1_reg_1275 <= icmp_ln368_1_fu_902_p2;
                lshr_ln628_4_reg_1265 <= lshr_ln628_4_fu_890_p2;
                lshr_ln628_5_reg_1270 <= lshr_ln628_5_fu_896_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln18_reg_1138 = ap_const_lv1_0))) then
                block_V_reg_1147 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_2_reg_1155 <= i_2_fu_461_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_3_reg_1142 <= i_3_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_5_reg_1230 <= i_5_fu_780_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                icmp_ln18_reg_1138 <= icmp_ln18_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                nonce_read_reg_1087 <= nonce;
                tmp_1_reg_1092 <= key(63 downto 32);
                trunc_ln18_1_reg_1107 <= plaintext(63 downto 4);
                trunc_ln18_2_reg_1118 <= ciphertext(63 downto 4);
                trunc_ln18_3_reg_1102 <= plaintext_length(63 downto 4);
                trunc_ln2_reg_1112 <= plaintext_length(35 downto 4);
                trunc_ln628_reg_1097 <= trunc_ln628_fu_373_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln183_fu_455_p2 = ap_const_lv1_1))) then
                p_Result_6_reg_1190 <= p_Result_6_fu_498_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln183_1_fu_774_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    shl_ln184_1_reg_1235(5 downto 3) <= shl_ln184_1_fu_790_p3(5 downto 3);
                    sub_ln185_1_reg_1253(6 downto 3) <= sub_ln185_1_fu_808_p2(6 downto 3);
                xor_ln185_1_reg_1243 <= xor_ln185_1_fu_802_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln183_fu_455_p2 = ap_const_lv1_0))) then
                    shl_ln_reg_1160(5 downto 3) <= shl_ln_fu_471_p3(5 downto 3);
                    sub_ln185_reg_1178(6 downto 3) <= sub_ln185_fu_489_p2(6 downto 3);
                xor_ln185_reg_1168 <= xor_ln185_fu_483_p2;
            end if;
        end if;
    end process;
    shl_ln_reg_1160(2 downto 0) <= "000";
    sub_ln185_reg_1178(2 downto 0) <= "000";
    shl_ln184_1_reg_1235(2 downto 0) <= "000";
    sub_ln185_1_reg_1253(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state10, icmp_ln18_reg_1138, ap_CS_fsm_state8, ap_CS_fsm_state19, ap_CS_fsm_state23, ap_CS_fsm_state12, icmp_ln183_fu_455_p2, ap_CS_fsm_state15, ap_CS_fsm_state16, icmp_ln183_1_fu_774_p2, grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_ap_done, grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_ap_done, grp_aes_encrypt_block_fu_329_ap_done, gmem_AWREADY, gmem_WREADY, gmem_ARREADY, gmem_RVALID, gmem_BVALID, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if ((not(((gmem_RVALID = ap_const_logic_0) and (icmp_ln18_reg_1138 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln18_reg_1138 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                elsif ((not(((gmem_RVALID = ap_const_logic_0) and (icmp_ln18_reg_1138 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln18_reg_1138 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln183_fu_455_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state15 => 
                if (((grp_aes_encrypt_block_fu_329_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln183_1_fu_774_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state19 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln368_1_fu_632_p2 <= (shl_ln368_3_fu_620_p2 and lshr_ln368_fu_626_p2);
    and_ln368_2_fu_751_p2 <= (xor_ln368_2_fu_746_p2 and p_Result_5_fu_690_p2);
    and_ln368_3_fu_757_p2 <= (select_ln368_3_fu_739_p3 and and_ln368_1_reg_1211);
    and_ln368_4_fu_986_p2 <= (xor_ln368_3_fu_980_p2 and p_Val2_2_reg_292);
    and_ln368_5_fu_944_p2 <= (shl_ln368_7_fu_932_p2 and lshr_ln368_1_fu_938_p2);
    and_ln368_6_fu_1063_p2 <= (xor_ln368_5_fu_1058_p2 and p_Result_8_fu_1002_p2);
    and_ln368_7_fu_1069_p2 <= (select_ln368_7_fu_1051_p3 and and_ln368_5_reg_1281);
    and_ln368_fu_674_p2 <= (xor_ln368_fu_668_p2 and p_Val2_s_reg_271);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(icmp_ln18_reg_1138, gmem_RVALID)
    begin
        if (((gmem_RVALID = ap_const_logic_0) and (icmp_ln18_reg_1138 = ap_const_lv1_0))) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state15_blk_assign_proc : process(grp_aes_encrypt_block_fu_329_ap_done)
    begin
        if ((grp_aes_encrypt_block_fu_329_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;

    ap_ST_fsm_state19_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;

    ap_ST_fsm_state23_blk_assign_proc : process(gmem_BVALID)
    begin
        if ((gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_ap_done)
    begin
        if ((grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_ap_done)
    begin
        if ((grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(gmem_AWREADY)
    begin
        if ((gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state10_assign_proc : process(icmp_ln18_reg_1138, gmem_RVALID)
    begin
                ap_block_state10 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln18_reg_1138 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state23, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    block_V_2_fu_768_p2 <= (p_Val2_s_reg_271 xor grp_aes_encrypt_block_fu_329_ap_return);

    crypto_aes_sbox_V_address0_assign_proc : process(ap_CS_fsm_state15, grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_crypto_aes_sbox_V_address0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            crypto_aes_sbox_V_address0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            crypto_aes_sbox_V_address0 <= grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_crypto_aes_sbox_V_address0;
        else 
            crypto_aes_sbox_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    crypto_aes_sbox_V_ce0_assign_proc : process(ap_CS_fsm_state15, grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_crypto_aes_sbox_V_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            crypto_aes_sbox_V_ce0 <= ap_const_logic_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            crypto_aes_sbox_V_ce0 <= grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_crypto_aes_sbox_V_ce0;
        else 
            crypto_aes_sbox_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state2, gmem_ARREADY)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state8, gmem_AWREADY)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state23, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state10, icmp_ln18_reg_1138, gmem_RVALID)
    begin
        if ((not(((gmem_RVALID = ap_const_logic_0) and (icmp_ln18_reg_1138 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln18_reg_1138 = ap_const_lv1_0))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state19, gmem_WREADY)
    begin
        if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state10, icmp_ln18_reg_1138)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln18_reg_1138 = ap_const_lv1_0))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_aes_encrypt_block_fu_329_ap_start <= grp_aes_encrypt_block_fu_329_ap_start_reg;
    grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_ap_start <= grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_ap_start_reg;
    grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_ap_start <= grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_ap_start_reg;
    i_2_fu_461_p2 <= std_logic_vector(unsigned(i_reg_281) + unsigned(ap_const_lv4_1));
    i_3_fu_450_p2 <= std_logic_vector(unsigned(offset_fu_160) + unsigned(ap_const_lv60_1));
    i_5_fu_780_p2 <= std_logic_vector(unsigned(i_4_reg_303) + unsigned(ap_const_lv4_1));
    icmp_ln183_1_fu_774_p2 <= "1" when (i_4_reg_303 = ap_const_lv4_8) else "0";
    icmp_ln183_fu_455_p2 <= "1" when (i_reg_281 = ap_const_lv4_8) else "0";
    icmp_ln18_fu_445_p2 <= "1" when (offset_fu_160 = trunc_ln18_3_reg_1102) else "0";
    icmp_ln368_1_fu_902_p2 <= "1" when (unsigned(sub_ln185_1_reg_1253) > unsigned(xor_ln185_1_reg_1243)) else "0";
    icmp_ln368_fu_590_p2 <= "1" when (unsigned(sub_ln185_reg_1178) > unsigned(xor_ln185_reg_1168)) else "0";
    icmp_ln628_1_fu_818_p2 <= "1" when (unsigned(sub_ln185_1_reg_1253) > unsigned(xor_ln185_1_reg_1243)) else "0";
    icmp_ln628_fu_506_p2 <= "1" when (unsigned(sub_ln185_reg_1178) > unsigned(xor_ln185_reg_1168)) else "0";
    lshr_ln368_1_fu_938_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln368_9_fu_928_p1(31-1 downto 0)))));
    lshr_ln368_fu_626_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln368_4_fu_616_p1(31-1 downto 0)))));
    lshr_ln628_1_fu_578_p2 <= std_logic_vector(shift_right(unsigned(select_ln628_1_fu_549_p3),to_integer(unsigned('0' & zext_ln628_2_fu_570_p1(31-1 downto 0)))));
    lshr_ln628_2_fu_584_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln628_3_fu_574_p1(31-1 downto 0)))));
    lshr_ln628_3_fu_953_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_2_reg_292),to_integer(unsigned('0' & zext_ln628_5_fu_950_p1(31-1 downto 0)))));
    lshr_ln628_4_fu_890_p2 <= std_logic_vector(shift_right(unsigned(select_ln628_4_fu_861_p3),to_integer(unsigned('0' & zext_ln628_6_fu_882_p1(31-1 downto 0)))));
    lshr_ln628_5_fu_896_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln628_7_fu_886_p1(31-1 downto 0)))));
    lshr_ln628_fu_641_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_s_reg_271),to_integer(unsigned('0' & zext_ln628_1_fu_638_p1(31-1 downto 0)))));
    offword_V_fu_495_p1 <= offset_fu_160(32 - 1 downto 0);
    or_ln368_3_fu_1012_p2 <= (shl_ln184_1_reg_1235 or ap_const_lv6_7);
    or_ln368_fu_700_p2 <= (shl_ln_reg_1160 or ap_const_lv6_7);
    or_ln628_1_fu_836_p2 <= (shl_ln184_1_reg_1235 or ap_const_lv6_7);
    or_ln628_fu_524_p2 <= (shl_ln_reg_1160 or ap_const_lv6_7);
    p_Result_3_fu_1074_p2 <= (and_ln368_7_fu_1069_p2 or and_ln368_6_fu_1063_p2);
    p_Result_4_fu_651_p2 <= (lshr_ln628_2_reg_1200 and lshr_ln628_1_reg_1195);
    p_Result_5_fu_690_p2 <= (shl_ln368_1_fu_684_p2 or and_ln368_fu_674_p2);
    p_Result_6_fu_498_p3 <= (nonce_read_reg_1087 & offword_V_fu_495_p1);
    p_Result_7_fu_963_p2 <= (lshr_ln628_5_reg_1270 and lshr_ln628_4_reg_1265);
    p_Result_8_fu_1002_p2 <= (shl_ln368_5_fu_996_p2 or and_ln368_4_fu_986_p2);
    p_Result_s_fu_762_p2 <= (and_ln368_3_fu_757_p2 or and_ln368_2_fu_751_p2);

    p_round_key_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_address0, grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_p_round_key_V_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_round_key_V_address0 <= ap_const_lv64_3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_round_key_V_address0 <= ap_const_lv64_1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_round_key_V_address0 <= grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_p_round_key_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_round_key_V_address0 <= grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_address0;
        else 
            p_round_key_V_address0 <= "XXXXXX";
        end if; 
    end process;


    p_round_key_V_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_address1, grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_p_round_key_V_address1, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_round_key_V_address1 <= ap_const_lv64_2(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_round_key_V_address1 <= ap_const_lv64_0(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_round_key_V_address1 <= grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_p_round_key_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_round_key_V_address1 <= grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_address1;
        else 
            p_round_key_V_address1 <= "XXXXXX";
        end if; 
    end process;


    p_round_key_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_ce0, grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_p_round_key_V_ce0, gmem_ARREADY, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            p_round_key_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_round_key_V_ce0 <= grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_p_round_key_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_round_key_V_ce0 <= grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_ce0;
        else 
            p_round_key_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_round_key_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_ce1, grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_p_round_key_V_ce1, gmem_ARREADY, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            p_round_key_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_round_key_V_ce1 <= grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_p_round_key_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_round_key_V_ce1 <= grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_ce1;
        else 
            p_round_key_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_round_key_V_d0_assign_proc : process(ap_CS_fsm_state1, key, ap_CS_fsm_state2, trunc_ln628_reg_1097, grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_d0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_round_key_V_d0 <= trunc_ln628_reg_1097;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_round_key_V_d0 <= key(95 downto 64);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_round_key_V_d0 <= grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_d0;
        else 
            p_round_key_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_round_key_V_d1_assign_proc : process(ap_CS_fsm_state1, key, ap_CS_fsm_state2, tmp_1_reg_1092, grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_d1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_round_key_V_d1 <= tmp_1_reg_1092;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_round_key_V_d1 <= key(127 downto 96);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_round_key_V_d1 <= grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_d1;
        else 
            p_round_key_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_round_key_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_we0, gmem_ARREADY, ap_CS_fsm_state4)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            p_round_key_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_round_key_V_we0 <= grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_we0;
        else 
            p_round_key_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_round_key_V_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_we1, gmem_ARREADY, ap_CS_fsm_state4)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            p_round_key_V_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_round_key_V_we1 <= grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_314_p_round_key_V_we1;
        else 
            p_round_key_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    pynqrypt_round_keys_V_address0_assign_proc : process(ap_CS_fsm_state15, grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_pynqrypt_round_keys_V_address0, grp_aes_encrypt_block_fu_329_this_round_keys_address0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            pynqrypt_round_keys_V_address0 <= grp_aes_encrypt_block_fu_329_this_round_keys_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pynqrypt_round_keys_V_address0 <= grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_pynqrypt_round_keys_V_address0;
        else 
            pynqrypt_round_keys_V_address0 <= "XXXX";
        end if; 
    end process;


    pynqrypt_round_keys_V_ce0_assign_proc : process(ap_CS_fsm_state15, grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_pynqrypt_round_keys_V_ce0, grp_aes_encrypt_block_fu_329_this_round_keys_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            pynqrypt_round_keys_V_ce0 <= grp_aes_encrypt_block_fu_329_this_round_keys_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pynqrypt_round_keys_V_ce0 <= grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_pynqrypt_round_keys_V_ce0;
        else 
            pynqrypt_round_keys_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pynqrypt_round_keys_V_we0_assign_proc : process(grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_pynqrypt_round_keys_V_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pynqrypt_round_keys_V_we0 <= grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_323_pynqrypt_round_keys_V_we0;
        else 
            pynqrypt_round_keys_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln368_1_fu_600_p3 <= 
        xor_ln185_reg_1168 when (icmp_ln368_fu_590_p2(0) = '1') else 
        sub_ln185_reg_1178;
    select_ln368_2_fu_713_p3 <= 
        tmp_4_fu_705_p3 when (icmp_ln368_reg_1205(0) = '1') else 
        sub_ln185_reg_1178;
    select_ln368_3_fu_739_p3 <= 
        tmp_5_fu_729_p4 when (icmp_ln368_reg_1205(0) = '1') else 
        shl_ln368_2_fu_723_p2;
    select_ln368_4_fu_906_p3 <= 
        sub_ln185_1_reg_1253 when (icmp_ln368_1_fu_902_p2(0) = '1') else 
        xor_ln185_1_reg_1243;
    select_ln368_5_fu_912_p3 <= 
        xor_ln185_1_reg_1243 when (icmp_ln368_1_fu_902_p2(0) = '1') else 
        sub_ln185_1_reg_1253;
    select_ln368_6_fu_1025_p3 <= 
        tmp_9_fu_1017_p3 when (icmp_ln368_1_reg_1275(0) = '1') else 
        sub_ln185_1_reg_1253;
    select_ln368_7_fu_1051_p3 <= 
        tmp_10_fu_1041_p4 when (icmp_ln368_1_reg_1275(0) = '1') else 
        shl_ln368_6_fu_1035_p2;
    select_ln368_fu_594_p3 <= 
        sub_ln185_reg_1178 when (icmp_ln368_fu_590_p2(0) = '1') else 
        xor_ln185_reg_1168;
    select_ln628_1_fu_549_p3 <= 
        tmp_fu_510_p4 when (icmp_ln628_fu_506_p2(0) = '1') else 
        p_Val2_s_reg_271;
    select_ln628_2_fu_557_p3 <= 
        tmp_2_fu_529_p3 when (icmp_ln628_fu_506_p2(0) = '1') else 
        sub_ln185_reg_1178;
    select_ln628_3_fu_853_p3 <= 
        sub_ln628_2_fu_832_p2 when (icmp_ln628_1_fu_818_p2(0) = '1') else 
        sub_ln628_3_fu_849_p2;
    select_ln628_4_fu_861_p3 <= 
        tmp_6_fu_822_p4 when (icmp_ln628_1_fu_818_p2(0) = '1') else 
        p_Val2_2_reg_292;
    select_ln628_5_fu_869_p3 <= 
        tmp_7_fu_841_p3 when (icmp_ln628_1_fu_818_p2(0) = '1') else 
        sub_ln185_1_reg_1253;
    select_ln628_fu_541_p3 <= 
        sub_ln628_fu_520_p2 when (icmp_ln628_fu_506_p2(0) = '1') else 
        sub_ln628_1_fu_537_p2;
        sext_ln18_1_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln18_2_reg_1118),64));

        sext_ln18_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln18_1_reg_1107),64));

    shl_ln184_1_fu_790_p3 <= (trunc_ln184_1_fu_786_p1 & ap_const_lv3_0);
    shl_ln368_1_fu_684_p2 <= std_logic_vector(shift_left(unsigned(zext_ln368_1_fu_680_p1),to_integer(unsigned('0' & zext_ln368_fu_659_p1(31-1 downto 0)))));
    shl_ln368_2_fu_723_p2 <= std_logic_vector(shift_left(unsigned(zext_ln186_fu_696_p1),to_integer(unsigned('0' & zext_ln368_2_fu_719_p1(31-1 downto 0)))));
    shl_ln368_3_fu_620_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln368_3_fu_612_p1(31-1 downto 0)))));
    shl_ln368_4_fu_974_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln368_5_fu_971_p1(31-1 downto 0)))));
    shl_ln368_5_fu_996_p2 <= std_logic_vector(shift_left(unsigned(zext_ln368_6_fu_992_p1),to_integer(unsigned('0' & zext_ln368_5_fu_971_p1(31-1 downto 0)))));
    shl_ln368_6_fu_1035_p2 <= std_logic_vector(shift_left(unsigned(zext_ln186_4_fu_1008_p1),to_integer(unsigned('0' & zext_ln368_7_fu_1031_p1(31-1 downto 0)))));
    shl_ln368_7_fu_932_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln368_8_fu_924_p1(31-1 downto 0)))));
    shl_ln368_fu_662_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln368_fu_659_p1(31-1 downto 0)))));
    shl_ln_fu_471_p3 <= (trunc_ln184_fu_467_p1 & ap_const_lv3_0);
    sub_ln185_1_fu_808_p2 <= std_logic_vector(signed(ap_const_lv7_78) - signed(zext_ln628_4_fu_798_p1));
    sub_ln185_fu_489_p2 <= std_logic_vector(signed(ap_const_lv7_78) - signed(zext_ln628_fu_479_p1));
    sub_ln628_1_fu_537_p2 <= std_logic_vector(unsigned(xor_ln185_reg_1168) - unsigned(sub_ln185_reg_1178));
    sub_ln628_2_fu_832_p2 <= std_logic_vector(unsigned(sub_ln185_1_reg_1253) - unsigned(xor_ln185_1_reg_1243));
    sub_ln628_3_fu_849_p2 <= std_logic_vector(unsigned(xor_ln185_1_reg_1243) - unsigned(sub_ln185_1_reg_1253));
    sub_ln628_fu_520_p2 <= std_logic_vector(unsigned(sub_ln185_reg_1178) - unsigned(xor_ln185_reg_1168));
    temp_V_1_fu_959_p1 <= lshr_ln628_3_fu_953_p2(8 - 1 downto 0);
    temp_V_fu_647_p1 <= lshr_ln628_fu_641_p2(8 - 1 downto 0);
    
    tmp_10_fu_1041_p4_proc : process(shl_ln368_6_fu_1035_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_10_fu_1041_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := shl_ln368_6_fu_1035_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_10_fu_1041_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_10_fu_1041_p4_i) := shl_ln368_6_fu_1035_p2(128-1-tmp_10_fu_1041_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_10_fu_1041_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_2_fu_529_p3 <= (ap_const_lv1_0 & or_ln628_fu_524_p2);
    tmp_4_fu_705_p3 <= (ap_const_lv1_0 & or_ln368_fu_700_p2);
    
    tmp_5_fu_729_p4_proc : process(shl_ln368_2_fu_723_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_5_fu_729_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := shl_ln368_2_fu_723_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_5_fu_729_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_5_fu_729_p4_i) := shl_ln368_2_fu_723_p2(128-1-tmp_5_fu_729_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_5_fu_729_p4 <= resvalue(128-1 downto 0);
    end process;

    
    tmp_6_fu_822_p4_proc : process(p_Val2_2_reg_292)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_6_fu_822_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_Val2_2_reg_292;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_6_fu_822_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_6_fu_822_p4_i) := p_Val2_2_reg_292(128-1-tmp_6_fu_822_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_6_fu_822_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_7_fu_841_p3 <= (ap_const_lv1_0 & or_ln628_1_fu_836_p2);
    tmp_9_fu_1017_p3 <= (ap_const_lv1_0 & or_ln368_3_fu_1012_p2);
    
    tmp_fu_510_p4_proc : process(p_Val2_s_reg_271)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_fu_510_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_Val2_s_reg_271;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_fu_510_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_fu_510_p4_i) := p_Val2_s_reg_271(128-1-tmp_fu_510_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_510_p4 <= resvalue(128-1 downto 0);
    end process;

    trunc_ln184_1_fu_786_p1 <= i_4_reg_303(3 - 1 downto 0);
    trunc_ln184_fu_467_p1 <= i_reg_281(3 - 1 downto 0);
    trunc_ln368_1_fu_967_p1 <= p_Result_7_fu_963_p2(8 - 1 downto 0);
    trunc_ln368_fu_655_p1 <= p_Result_4_fu_651_p2(8 - 1 downto 0);
    trunc_ln628_fu_373_p1 <= key(32 - 1 downto 0);
    xor_ln185_1_fu_802_p2 <= (zext_ln628_4_fu_798_p1 xor ap_const_lv7_7F);
    xor_ln185_fu_483_p2 <= (zext_ln628_fu_479_p1 xor ap_const_lv7_7F);
    xor_ln368_1_fu_606_p2 <= (select_ln368_fu_594_p3 xor ap_const_lv7_7F);
    xor_ln368_2_fu_746_p2 <= (ap_const_lv128_lc_2 xor and_ln368_1_reg_1211);
    xor_ln368_3_fu_980_p2 <= (shl_ln368_4_fu_974_p2 xor ap_const_lv128_lc_2);
    xor_ln368_4_fu_918_p2 <= (select_ln368_4_fu_906_p3 xor ap_const_lv7_7F);
    xor_ln368_5_fu_1058_p2 <= (ap_const_lv128_lc_2 xor and_ln368_5_reg_1281);
    xor_ln368_fu_668_p2 <= (shl_ln368_fu_662_p2 xor ap_const_lv128_lc_2);
    xor_ln628_1_fu_876_p2 <= (select_ln628_3_fu_853_p3 xor ap_const_lv7_7F);
    xor_ln628_fu_564_p2 <= (select_ln628_fu_541_p3 xor ap_const_lv7_7F);
    zext_ln186_4_fu_1008_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_V_1_fu_959_p1),128));
    zext_ln186_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_V_fu_647_p1),128));
    zext_ln368_1_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln368_fu_655_p1),128));
    zext_ln368_2_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln368_2_fu_713_p3),128));
    zext_ln368_3_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln368_1_fu_600_p3),128));
    zext_ln368_4_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln368_1_fu_606_p2),128));
    zext_ln368_5_fu_971_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln184_1_reg_1235),128));
    zext_ln368_6_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln368_1_fu_967_p1),128));
    zext_ln368_7_fu_1031_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln368_6_fu_1025_p3),128));
    zext_ln368_8_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln368_5_fu_912_p3),128));
    zext_ln368_9_fu_928_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln368_4_fu_918_p2),128));
    zext_ln368_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_reg_1160),128));
    zext_ln628_1_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_reg_1160),128));
    zext_ln628_2_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln628_2_fu_557_p3),128));
    zext_ln628_3_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln628_fu_564_p2),128));
    zext_ln628_4_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln184_1_fu_790_p3),7));
    zext_ln628_5_fu_950_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln184_1_reg_1235),128));
    zext_ln628_6_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln628_5_fu_869_p3),128));
    zext_ln628_7_fu_886_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln628_1_fu_876_p2),128));
    zext_ln628_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_471_p3),7));
end behav;
