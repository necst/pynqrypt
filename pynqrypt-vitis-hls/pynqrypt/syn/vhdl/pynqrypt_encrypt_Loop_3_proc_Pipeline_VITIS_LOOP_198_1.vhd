-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pynqrypt_encrypt_Loop_3_proc_Pipeline_VITIS_LOOP_198_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pynqrypt_round_keys_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pynqrypt_round_keys_ce0 : OUT STD_LOGIC;
    pynqrypt_round_keys_we0 : OUT STD_LOGIC;
    pynqrypt_round_keys_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pynqrypt_round_keys_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pynqrypt_round_keys_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pynqrypt_round_keys_ce1 : OUT STD_LOGIC;
    pynqrypt_round_keys_we1 : OUT STD_LOGIC;
    pynqrypt_round_keys_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pynqrypt_round_keys_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of pynqrypt_encrypt_Loop_3_proc_Pipeline_VITIS_LOOP_198_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_2C : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_F0 : STD_LOGIC_VECTOR (7 downto 0) := "11110000";
    constant ap_const_lv8_F1 : STD_LOGIC_VECTOR (7 downto 0) := "11110001";
    constant ap_const_lv8_F2 : STD_LOGIC_VECTOR (7 downto 0) := "11110010";
    constant ap_const_lv8_F3 : STD_LOGIC_VECTOR (7 downto 0) := "11110011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln198_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal aes_sbox3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal aes_sbox3_ce0 : STD_LOGIC;
    signal aes_sbox3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal crypto_aes_rcon_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal crypto_aes_rcon_ce0 : STD_LOGIC;
    signal crypto_aes_rcon_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_8_reg_528 : STD_LOGIC_VECTOR (5 downto 0);
    signal atoms_result_fu_255_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal atoms_result_reg_537 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_1_reg_566 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal pynqrypt_round_keys_load_1_reg_572 : STD_LOGIC_VECTOR (7 downto 0);
    signal crypto_aes_rcon_load_reg_592 : STD_LOGIC_VECTOR (7 downto 0);
    signal pynqrypt_round_keys_load_2_reg_597 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal pynqrypt_round_keys_load_3_reg_602 : STD_LOGIC_VECTOR (7 downto 0);
    signal aes_sbox3_load_reg_608 : STD_LOGIC_VECTOR (7 downto 0);
    signal aes_sbox3_load_1_reg_628 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal pynqrypt_round_keys_load_reg_638 : STD_LOGIC_VECTOR (7 downto 0);
    signal pynqrypt_round_keys_load_4_reg_643 : STD_LOGIC_VECTOR (7 downto 0);
    signal aes_sbox3_load_2_reg_658 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal pynqrypt_round_keys_load_5_reg_668 : STD_LOGIC_VECTOR (7 downto 0);
    signal pynqrypt_round_keys_load_6_reg_673 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln266_fu_427_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln266_reg_678 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal xor_ln266_1_fu_442_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln266_1_reg_683 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln266_2_fu_457_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln266_2_reg_688 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln266_3_fu_472_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln266_3_reg_693 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln199_1_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_2_fu_280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln256_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_3_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_4_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln249_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln249_1_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln207_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln207_1_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln249_2_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln207_2_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln207_3_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln249_3_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln266_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln266_1_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln266_2_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_82 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln209_fu_511_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_8 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal add_ln199_fu_263_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln199_1_fu_274_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_fu_285_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln204_fu_295_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln199_2_fu_306_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln199_3_fu_316_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln207_fu_336_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln207_1_fu_346_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln207_2_fu_360_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln207_3_fu_370_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_66_fu_392_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln256_fu_401_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln201_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_2_fu_405_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_fu_384_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_3_fu_415_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln266_fu_423_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln266_1_fu_432_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln266_3_fu_447_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln266_5_fu_462_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln266_fu_481_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln266_1_fu_491_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln266_2_fu_501_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pynqrypt_encrypt_Loop_3_proc_Pipeline_VITIS_LOOP_198_1_aes_sbox3_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component pynqrypt_encrypt_Loop_3_proc_Pipeline_VITIS_LOOP_198_1_crypto_aes_rcon_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component pynqrypt_encrypt_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    aes_sbox3_U : component pynqrypt_encrypt_Loop_3_proc_Pipeline_VITIS_LOOP_198_1_aes_sbox3_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => aes_sbox3_address0,
        ce0 => aes_sbox3_ce0,
        q0 => aes_sbox3_q0);

    crypto_aes_rcon_U : component pynqrypt_encrypt_Loop_3_proc_Pipeline_VITIS_LOOP_198_1_crypto_aes_rcon_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => crypto_aes_rcon_address0,
        ce0 => crypto_aes_rcon_ce0,
        q0 => crypto_aes_rcon_q0);

    flow_control_loop_pipe_sequential_init_U : component pynqrypt_encrypt_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                i_fu_82 <= ap_const_lv6_4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_fu_82 <= add_ln209_fu_511_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                aes_sbox3_load_1_reg_628 <= aes_sbox3_q0;
                pynqrypt_round_keys_load_4_reg_643 <= pynqrypt_round_keys_q0;
                pynqrypt_round_keys_load_reg_638 <= pynqrypt_round_keys_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                aes_sbox3_load_2_reg_658 <= aes_sbox3_q0;
                pynqrypt_round_keys_load_5_reg_668 <= pynqrypt_round_keys_q1;
                pynqrypt_round_keys_load_6_reg_673 <= pynqrypt_round_keys_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                aes_sbox3_load_reg_608 <= aes_sbox3_q0;
                pynqrypt_round_keys_load_2_reg_597 <= pynqrypt_round_keys_q1;
                pynqrypt_round_keys_load_3_reg_602 <= pynqrypt_round_keys_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (icmp_ln198_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    atoms_result_reg_537(7 downto 2) <= atoms_result_fu_255_p3(7 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                crypto_aes_rcon_load_reg_592 <= crypto_aes_rcon_q0;
                pynqrypt_round_keys_load_1_reg_572 <= pynqrypt_round_keys_q0;
                temp_1_reg_566 <= pynqrypt_round_keys_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                i_8_reg_528 <= ap_sig_allocacmp_i_8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                xor_ln266_1_reg_683 <= xor_ln266_1_fu_442_p2;
                xor_ln266_2_reg_688 <= xor_ln266_2_fu_457_p2;
                xor_ln266_3_reg_693 <= xor_ln266_3_fu_472_p2;
                xor_ln266_reg_678 <= xor_ln266_fu_427_p2;
            end if;
        end if;
    end process;
    atoms_result_reg_537(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln198_fu_249_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (icmp_ln198_fu_249_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln199_1_fu_274_p2 <= std_logic_vector(unsigned(atoms_result_fu_255_p3) + unsigned(ap_const_lv8_FD));
    add_ln199_2_fu_306_p2 <= std_logic_vector(unsigned(atoms_result_reg_537) + unsigned(ap_const_lv8_FE));
    add_ln199_3_fu_316_p2 <= std_logic_vector(unsigned(atoms_result_reg_537) + unsigned(ap_const_lv8_FF));
    add_ln199_fu_263_p2 <= std_logic_vector(unsigned(atoms_result_fu_255_p3) + unsigned(ap_const_lv8_FC));
    add_ln204_fu_295_p2 <= std_logic_vector(unsigned(trunc_ln_fu_285_p4) + unsigned(ap_const_lv4_F));
    add_ln207_1_fu_346_p2 <= std_logic_vector(unsigned(atoms_result_reg_537) + unsigned(ap_const_lv8_F1));
    add_ln207_2_fu_360_p2 <= std_logic_vector(unsigned(atoms_result_reg_537) + unsigned(ap_const_lv8_F2));
    add_ln207_3_fu_370_p2 <= std_logic_vector(unsigned(atoms_result_reg_537) + unsigned(ap_const_lv8_F3));
    add_ln207_fu_336_p2 <= std_logic_vector(unsigned(atoms_result_reg_537) + unsigned(ap_const_lv8_F0));
    add_ln209_fu_511_p2 <= std_logic_vector(unsigned(i_8_reg_528) + unsigned(ap_const_lv6_1));

    aes_sbox3_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, zext_ln249_fu_326_p1, zext_ln249_1_fu_331_p1, zext_ln249_2_fu_356_p1, zext_ln249_3_fu_380_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            aes_sbox3_address0 <= zext_ln249_3_fu_380_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            aes_sbox3_address0 <= zext_ln249_2_fu_356_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            aes_sbox3_address0 <= zext_ln249_1_fu_331_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            aes_sbox3_address0 <= zext_ln249_fu_326_p1(8 - 1 downto 0);
        else 
            aes_sbox3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    aes_sbox3_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            aes_sbox3_ce0 <= ap_const_logic_1;
        else 
            aes_sbox3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln198_fu_249_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln198_fu_249_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_8_assign_proc : process(ap_CS_fsm_state1, i_fu_82, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_8 <= ap_const_lv6_4;
        else 
            ap_sig_allocacmp_i_8 <= i_fu_82;
        end if; 
    end process;

    atoms_result_fu_255_p3 <= (ap_sig_allocacmp_i_8 & ap_const_lv2_0);
    crypto_aes_rcon_address0 <= zext_ln256_fu_301_p1(4 - 1 downto 0);

    crypto_aes_rcon_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            crypto_aes_rcon_ce0 <= ap_const_logic_1;
        else 
            crypto_aes_rcon_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_66_fu_392_p1 <= i_8_reg_528(2 - 1 downto 0);
    icmp_ln198_fu_249_p2 <= "1" when (ap_sig_allocacmp_i_8 = ap_const_lv6_2C) else "0";
    icmp_ln201_fu_395_p2 <= "1" when (empty_66_fu_392_p1 = ap_const_lv2_0) else "0";
    or_ln266_1_fu_491_p2 <= (atoms_result_reg_537 or ap_const_lv8_2);
    or_ln266_2_fu_501_p2 <= (atoms_result_reg_537 or ap_const_lv8_3);
    or_ln266_fu_481_p2 <= (atoms_result_reg_537 or ap_const_lv8_1);

    pynqrypt_round_keys_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln198_fu_249_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln199_2_fu_280_p1, zext_ln199_4_fu_321_p1, zext_ln207_1_fu_351_p1, zext_ln207_3_fu_375_p1, ap_CS_fsm_state7, zext_ln266_fu_486_p1, zext_ln266_2_fu_506_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pynqrypt_round_keys_address0 <= zext_ln266_2_fu_506_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            pynqrypt_round_keys_address0 <= zext_ln266_fu_486_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pynqrypt_round_keys_address0 <= zext_ln207_3_fu_375_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pynqrypt_round_keys_address0 <= zext_ln207_1_fu_351_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pynqrypt_round_keys_address0 <= zext_ln199_4_fu_321_p1(8 - 1 downto 0);
        elsif (((icmp_ln198_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            pynqrypt_round_keys_address0 <= zext_ln199_2_fu_280_p1(8 - 1 downto 0);
        else 
            pynqrypt_round_keys_address0 <= "XXXXXXXX";
        end if; 
    end process;


    pynqrypt_round_keys_address1_assign_proc : process(ap_CS_fsm_state1, icmp_ln198_fu_249_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln199_1_fu_269_p1, zext_ln199_3_fu_311_p1, zext_ln207_fu_341_p1, zext_ln207_2_fu_365_p1, zext_ln199_fu_477_p1, ap_CS_fsm_state7, zext_ln266_1_fu_496_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pynqrypt_round_keys_address1 <= zext_ln266_1_fu_496_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            pynqrypt_round_keys_address1 <= zext_ln199_fu_477_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pynqrypt_round_keys_address1 <= zext_ln207_2_fu_365_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pynqrypt_round_keys_address1 <= zext_ln207_fu_341_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pynqrypt_round_keys_address1 <= zext_ln199_3_fu_311_p1(8 - 1 downto 0);
        elsif (((icmp_ln198_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            pynqrypt_round_keys_address1 <= zext_ln199_1_fu_269_p1(8 - 1 downto 0);
        else 
            pynqrypt_round_keys_address1 <= "XXXXXXXX";
        end if; 
    end process;


    pynqrypt_round_keys_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln198_fu_249_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start_int = ap_const_logic_1) and (icmp_ln198_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            pynqrypt_round_keys_ce0 <= ap_const_logic_1;
        else 
            pynqrypt_round_keys_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pynqrypt_round_keys_ce1_assign_proc : process(ap_CS_fsm_state1, icmp_ln198_fu_249_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start_int = ap_const_logic_1) and (icmp_ln198_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            pynqrypt_round_keys_ce1 <= ap_const_logic_1;
        else 
            pynqrypt_round_keys_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    pynqrypt_round_keys_d0_assign_proc : process(ap_CS_fsm_state8, xor_ln266_1_reg_683, xor_ln266_3_reg_693, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pynqrypt_round_keys_d0 <= xor_ln266_3_reg_693;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            pynqrypt_round_keys_d0 <= xor_ln266_1_reg_683;
        else 
            pynqrypt_round_keys_d0 <= "XXXXXXXX";
        end if; 
    end process;


    pynqrypt_round_keys_d1_assign_proc : process(ap_CS_fsm_state8, xor_ln266_reg_678, xor_ln266_2_reg_688, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pynqrypt_round_keys_d1 <= xor_ln266_2_reg_688;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            pynqrypt_round_keys_d1 <= xor_ln266_reg_678;
        else 
            pynqrypt_round_keys_d1 <= "XXXXXXXX";
        end if; 
    end process;


    pynqrypt_round_keys_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            pynqrypt_round_keys_we0 <= ap_const_logic_1;
        else 
            pynqrypt_round_keys_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pynqrypt_round_keys_we1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            pynqrypt_round_keys_we1 <= ap_const_logic_1;
        else 
            pynqrypt_round_keys_we1 <= ap_const_logic_0;
        end if; 
    end process;

    temp_2_fu_405_p5 <= (((aes_sbox3_q0 & aes_sbox3_load_2_reg_658) & aes_sbox3_load_1_reg_628) & xor_ln256_fu_401_p2);
    temp_3_fu_415_p3 <= 
        temp_2_fu_405_p5 when (icmp_ln201_fu_395_p2(0) = '1') else 
        temp_fu_384_p5;
    temp_fu_384_p5 <= (((pynqrypt_round_keys_load_3_reg_602 & pynqrypt_round_keys_load_2_reg_597) & pynqrypt_round_keys_load_1_reg_572) & temp_1_reg_566);
    trunc_ln266_1_fu_432_p4 <= temp_3_fu_415_p3(15 downto 8);
    trunc_ln266_3_fu_447_p4 <= temp_3_fu_415_p3(23 downto 16);
    trunc_ln266_5_fu_462_p4 <= temp_3_fu_415_p3(31 downto 24);
    trunc_ln266_fu_423_p1 <= temp_3_fu_415_p3(8 - 1 downto 0);
    trunc_ln_fu_285_p4 <= ap_sig_allocacmp_i_8(5 downto 2);
    xor_ln256_fu_401_p2 <= (crypto_aes_rcon_load_reg_592 xor aes_sbox3_load_reg_608);
    xor_ln266_1_fu_442_p2 <= (trunc_ln266_1_fu_432_p4 xor pynqrypt_round_keys_load_4_reg_643);
    xor_ln266_2_fu_457_p2 <= (trunc_ln266_3_fu_447_p4 xor pynqrypt_round_keys_load_5_reg_668);
    xor_ln266_3_fu_472_p2 <= (trunc_ln266_5_fu_462_p4 xor pynqrypt_round_keys_load_6_reg_673);
    xor_ln266_fu_427_p2 <= (trunc_ln266_fu_423_p1 xor pynqrypt_round_keys_load_reg_638);
    zext_ln199_1_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln199_fu_263_p2),64));
    zext_ln199_2_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln199_1_fu_274_p2),64));
    zext_ln199_3_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln199_2_fu_306_p2),64));
    zext_ln199_4_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln199_3_fu_316_p2),64));
    zext_ln199_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(atoms_result_reg_537),64));
    zext_ln207_1_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln207_1_fu_346_p2),64));
    zext_ln207_2_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln207_2_fu_360_p2),64));
    zext_ln207_3_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln207_3_fu_370_p2),64));
    zext_ln207_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln207_fu_336_p2),64));
    zext_ln249_1_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pynqrypt_round_keys_q1),64));
    zext_ln249_2_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pynqrypt_round_keys_load_3_reg_602),64));
    zext_ln249_3_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_1_reg_566),64));
    zext_ln249_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pynqrypt_round_keys_q0),64));
    zext_ln256_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln204_fu_295_p2),64));
    zext_ln266_1_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln266_1_fu_491_p2),64));
    zext_ln266_2_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln266_2_fu_501_p2),64));
    zext_ln266_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln266_fu_481_p2),64));
end behav;
