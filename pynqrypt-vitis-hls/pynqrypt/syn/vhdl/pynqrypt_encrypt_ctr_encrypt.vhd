-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pynqrypt_encrypt_ctr_encrypt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (95 downto 0);
    this_round_keys_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    this_round_keys_ce0 : OUT STD_LOGIC;
    this_round_keys_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    plaintext_length : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    plaintext : IN STD_LOGIC_VECTOR (63 downto 0);
    ciphertext : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of pynqrypt_encrypt_ctr_encrypt is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv60_1 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal trunc_ln18_3_reg_663 : STD_LOGIC_VECTOR (59 downto 0);
    signal trunc_ln_reg_674 : STD_LOGIC_VECTOR (31 downto 0);
    signal offword_V_fu_285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal offword_V_reg_694 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln18_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln628_fu_294_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln628_reg_699 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_704 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_709 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_714 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_719 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_724 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_729 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_734 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_739 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_744 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_749 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_754 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_reg_759 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_reg_764 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_769 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_reg_774 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_4_fu_448_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_4_reg_779 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln628_1_fu_481_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln628_1_reg_784 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_16_reg_789 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_reg_794 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_reg_799 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_reg_804 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_reg_809 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_reg_814 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_reg_819 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_reg_824 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_reg_829 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_reg_834 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_reg_839 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_reg_844 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_reg_849 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_reg_854 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_reg_859 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_encrypt_block_fu_190_ap_start : STD_LOGIC;
    signal grp_aes_encrypt_block_fu_190_ap_done : STD_LOGIC;
    signal grp_aes_encrypt_block_fu_190_ap_idle : STD_LOGIC;
    signal grp_aes_encrypt_block_fu_190_ap_ready : STD_LOGIC;
    signal grp_aes_encrypt_block_fu_190_this_round_keys_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_encrypt_block_fu_190_this_round_keys_ce0 : STD_LOGIC;
    signal grp_aes_encrypt_block_fu_190_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_aes_encrypt_block_fu_190_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln18_fu_223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln18_1_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal offset_fu_136 : STD_LOGIC_VECTOR (59 downto 0);
    signal i_fu_279_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal trunc_ln18_1_fu_213_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal trunc_ln18_2_fu_250_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Result_3_fu_455_p17 : STD_LOGIC_VECTOR (127 downto 0);
    signal block_V_fu_475_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pynqrypt_encrypt_aes_encrypt_block IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        this_round_keys_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        this_round_keys_ce0 : OUT STD_LOGIC;
        this_round_keys_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;



begin
    grp_aes_encrypt_block_fu_190 : component pynqrypt_encrypt_aes_encrypt_block
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_encrypt_block_fu_190_ap_start,
        ap_done => grp_aes_encrypt_block_fu_190_ap_done,
        ap_idle => grp_aes_encrypt_block_fu_190_ap_idle,
        ap_ready => grp_aes_encrypt_block_fu_190_ap_ready,
        this_round_keys_address0 => grp_aes_encrypt_block_fu_190_this_round_keys_address0,
        this_round_keys_ce0 => grp_aes_encrypt_block_fu_190_this_round_keys_ce0,
        this_round_keys_q0 => this_round_keys_q0,
        p_read => p_Result_4_reg_779,
        ap_return => grp_aes_encrypt_block_fu_190_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes_encrypt_block_fu_190_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_encrypt_block_fu_190_ap_start_reg <= ap_const_logic_0;
            else
                if (((m_axi_gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    grp_aes_encrypt_block_fu_190_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_encrypt_block_fu_190_ap_ready = ap_const_logic_1)) then 
                    grp_aes_encrypt_block_fu_190_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    offset_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                offset_fu_136 <= ap_const_lv60_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln18_fu_274_p2 = ap_const_lv1_0))) then 
                offset_fu_136 <= i_fu_279_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln18_fu_274_p2 = ap_const_lv1_0))) then
                offword_V_reg_694 <= offword_V_fu_285_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                p_Result_4_reg_779 <= p_Result_4_fu_448_p3;
                tmp_10_reg_749 <= m_axi_gmem_RDATA(87 downto 80);
                tmp_11_reg_754 <= m_axi_gmem_RDATA(95 downto 88);
                tmp_12_reg_759 <= m_axi_gmem_RDATA(103 downto 96);
                tmp_13_reg_764 <= m_axi_gmem_RDATA(111 downto 104);
                tmp_14_reg_769 <= m_axi_gmem_RDATA(119 downto 112);
                tmp_15_reg_774 <= m_axi_gmem_RDATA(127 downto 120);
                tmp_2_reg_709 <= m_axi_gmem_RDATA(23 downto 16);
                tmp_3_reg_714 <= m_axi_gmem_RDATA(31 downto 24);
                tmp_4_reg_719 <= m_axi_gmem_RDATA(39 downto 32);
                tmp_5_reg_724 <= m_axi_gmem_RDATA(47 downto 40);
                tmp_6_reg_729 <= m_axi_gmem_RDATA(55 downto 48);
                tmp_7_reg_734 <= m_axi_gmem_RDATA(63 downto 56);
                tmp_8_reg_739 <= m_axi_gmem_RDATA(71 downto 64);
                tmp_9_reg_744 <= m_axi_gmem_RDATA(79 downto 72);
                tmp_s_reg_704 <= m_axi_gmem_RDATA(15 downto 8);
                trunc_ln628_reg_699 <= trunc_ln628_fu_294_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_16_reg_789 <= block_V_fu_475_p2(15 downto 8);
                tmp_17_reg_794 <= block_V_fu_475_p2(23 downto 16);
                tmp_18_reg_799 <= block_V_fu_475_p2(31 downto 24);
                tmp_19_reg_804 <= block_V_fu_475_p2(39 downto 32);
                tmp_20_reg_809 <= block_V_fu_475_p2(47 downto 40);
                tmp_21_reg_814 <= block_V_fu_475_p2(55 downto 48);
                tmp_22_reg_819 <= block_V_fu_475_p2(63 downto 56);
                tmp_23_reg_824 <= block_V_fu_475_p2(71 downto 64);
                tmp_24_reg_829 <= block_V_fu_475_p2(79 downto 72);
                tmp_25_reg_834 <= block_V_fu_475_p2(87 downto 80);
                tmp_26_reg_839 <= block_V_fu_475_p2(95 downto 88);
                tmp_27_reg_844 <= block_V_fu_475_p2(103 downto 96);
                tmp_28_reg_849 <= block_V_fu_475_p2(111 downto 104);
                tmp_29_reg_854 <= block_V_fu_475_p2(119 downto 112);
                tmp_30_reg_859 <= block_V_fu_475_p2(127 downto 120);
                trunc_ln628_1_reg_784 <= trunc_ln628_1_fu_481_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln18_3_reg_663 <= plaintext_length(63 downto 4);
                trunc_ln_reg_674 <= plaintext_length(35 downto 4);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state8, icmp_ln18_fu_274_p2, ap_CS_fsm_state10, grp_aes_encrypt_block_fu_190_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln18_fu_274_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((m_axi_gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((grp_aes_encrypt_block_fu_190_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((m_axi_gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(grp_aes_encrypt_block_fu_190_ap_done)
    begin
        if ((grp_aes_encrypt_block_fu_190_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state16_blk_assign_proc : process(m_axi_gmem_BVALID)
    begin
        if ((m_axi_gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, m_axi_gmem_ARREADY)
    begin
        if (((m_axi_gmem_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(m_axi_gmem_AWREADY)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_gmem_BVALID, ap_CS_fsm_state16)
    begin
        if ((((m_axi_gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state16)
    begin
        if (((m_axi_gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    block_V_fu_475_p2 <= (p_Result_3_fu_455_p17 xor grp_aes_encrypt_block_fu_190_ap_return);

    gmem_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_gmem_ARREADY)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_aes_encrypt_block_fu_190_ap_start <= grp_aes_encrypt_block_fu_190_ap_start_reg;
    i_fu_279_p2 <= std_logic_vector(unsigned(offset_fu_136) + unsigned(ap_const_lv60_1));
    icmp_ln18_fu_274_p2 <= "1" when (offset_fu_136 = trunc_ln18_3_reg_663) else "0";
    m_axi_gmem_ARADDR <= sext_ln18_fu_223_p1;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= plaintext_length(35 downto 4);
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_gmem_ARREADY)
    begin
        if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= sext_ln18_1_fu_260_p1;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= trunc_ln_reg_674;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state7)
    begin
        if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state16)
    begin
        if (((m_axi_gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state9)
    begin
        if (((m_axi_gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= (((((((((((((((trunc_ln628_1_reg_784 & tmp_16_reg_789) & tmp_17_reg_794) & tmp_18_reg_799) & tmp_19_reg_804) & tmp_20_reg_809) & tmp_21_reg_814) & tmp_22_reg_819) & tmp_23_reg_824) & tmp_24_reg_829) & tmp_25_reg_834) & tmp_26_reg_839) & tmp_27_reg_844) & tmp_28_reg_849) & tmp_29_reg_854) & tmp_30_reg_859);
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv16_FFFF;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state11)
    begin
        if (((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    offword_V_fu_285_p1 <= offset_fu_136(32 - 1 downto 0);
    p_Result_3_fu_455_p17 <= (((((((((((((((trunc_ln628_reg_699 & tmp_s_reg_704) & tmp_2_reg_709) & tmp_3_reg_714) & tmp_4_reg_719) & tmp_5_reg_724) & tmp_6_reg_729) & tmp_7_reg_734) & tmp_8_reg_739) & tmp_9_reg_744) & tmp_10_reg_749) & tmp_11_reg_754) & tmp_12_reg_759) & tmp_13_reg_764) & tmp_14_reg_769) & tmp_15_reg_774);
    p_Result_4_fu_448_p3 <= (p_read & offword_V_reg_694);
        sext_ln18_1_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln18_2_fu_250_p4),64));

        sext_ln18_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln18_1_fu_213_p4),64));

    this_round_keys_address0 <= grp_aes_encrypt_block_fu_190_this_round_keys_address0;
    this_round_keys_ce0 <= grp_aes_encrypt_block_fu_190_this_round_keys_ce0;
    trunc_ln18_1_fu_213_p4 <= plaintext(63 downto 4);
    trunc_ln18_2_fu_250_p4 <= ciphertext(63 downto 4);
    trunc_ln628_1_fu_481_p1 <= block_V_fu_475_p2(8 - 1 downto 0);
    trunc_ln628_fu_294_p1 <= m_axi_gmem_RDATA(8 - 1 downto 0);
end behav;
