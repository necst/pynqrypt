-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pynqrypt_encrypt is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 128;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of pynqrypt_encrypt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pynqrypt_encrypt_pynqrypt_encrypt,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020i-clg400-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=11,HLS_SYN_DSP=0,HLS_SYN_FF=4070,HLS_SYN_LUT=6584,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv60_1 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal key : STD_LOGIC_VECTOR (127 downto 0);
    signal nonce : STD_LOGIC_VECTOR (95 downto 0);
    signal plaintext_length : STD_LOGIC_VECTOR (63 downto 0);
    signal plaintext : STD_LOGIC_VECTOR (63 downto 0);
    signal ciphertext : STD_LOGIC_VECTOR (63 downto 0);
    signal crypto_aes_sbox_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal crypto_aes_sbox_V_ce0 : STD_LOGIC;
    signal crypto_aes_sbox_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal crypto_aes_sbox_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal nonce_read_reg_409 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_1_reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln628_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln628_reg_419 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln20_3_reg_424 : STD_LOGIC_VECTOR (59 downto 0);
    signal trunc_ln20_1_reg_429 : STD_LOGIC_VECTOR (59 downto 0);
    signal trunc_ln2_reg_434 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln20_2_reg_440 : STD_LOGIC_VECTOR (59 downto 0);
    signal offword_V_fu_381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal offword_V_reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln20_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal block_V_reg_465 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_s_fu_390_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_s_reg_470 : STD_LOGIC_VECTOR (127 downto 0);
    signal block_V_1_fu_397_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal block_V_1_reg_475 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_round_key_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_round_key_V_ce0 : STD_LOGIC;
    signal p_round_key_V_we0 : STD_LOGIC;
    signal p_round_key_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_round_key_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_round_key_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_round_key_V_ce1 : STD_LOGIC;
    signal p_round_key_V_we1 : STD_LOGIC;
    signal p_round_key_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_round_key_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pynqrypt_round_keys_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal pynqrypt_round_keys_V_ce0 : STD_LOGIC;
    signal pynqrypt_round_keys_V_we0 : STD_LOGIC;
    signal pynqrypt_round_keys_V_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_ap_start : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_ap_done : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_ap_idle : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_ap_ready : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_ce0 : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_we0 : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_ce1 : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_we1 : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_crypto_aes_sbox_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_crypto_aes_sbox_V_ce0 : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_ap_start : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_ap_done : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_ap_idle : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_ap_ready : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_p_round_key_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_p_round_key_V_ce0 : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_p_round_key_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_p_round_key_V_ce1 : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_pynqrypt_round_keys_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_pynqrypt_round_keys_V_ce0 : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_pynqrypt_round_keys_V_we0 : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_pynqrypt_round_keys_V_d0 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_aes_encrypt_block_fu_254_ap_start : STD_LOGIC;
    signal grp_aes_encrypt_block_fu_254_ap_done : STD_LOGIC;
    signal grp_aes_encrypt_block_fu_254_ap_idle : STD_LOGIC;
    signal grp_aes_encrypt_block_fu_254_ap_ready : STD_LOGIC;
    signal grp_aes_encrypt_block_fu_254_this_round_keys_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_encrypt_block_fu_254_this_round_keys_ce0 : STD_LOGIC;
    signal grp_aes_encrypt_block_fu_254_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_aes_encrypt_block_fu_254_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln20_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln20_1_fu_357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal offset_fu_128 : STD_LOGIC_VECTOR (59 downto 0);
    signal i_fu_375_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pynqrypt_encrypt_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_round_key_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        p_round_key_V_ce0 : OUT STD_LOGIC;
        p_round_key_V_we0 : OUT STD_LOGIC;
        p_round_key_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_round_key_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_round_key_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        p_round_key_V_ce1 : OUT STD_LOGIC;
        p_round_key_V_we1 : OUT STD_LOGIC;
        p_round_key_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_round_key_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        crypto_aes_sbox_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        crypto_aes_sbox_V_ce0 : OUT STD_LOGIC;
        crypto_aes_sbox_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component pynqrypt_encrypt_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_round_key_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        p_round_key_V_ce0 : OUT STD_LOGIC;
        p_round_key_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_round_key_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        p_round_key_V_ce1 : OUT STD_LOGIC;
        p_round_key_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        pynqrypt_round_keys_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        pynqrypt_round_keys_V_ce0 : OUT STD_LOGIC;
        pynqrypt_round_keys_V_we0 : OUT STD_LOGIC;
        pynqrypt_round_keys_V_d0 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component pynqrypt_encrypt_aes_encrypt_block IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        this_round_keys_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        this_round_keys_ce0 : OUT STD_LOGIC;
        this_round_keys_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component pynqrypt_encrypt_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_crypto_aes_sbox_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component pynqrypt_encrypt_p_round_key_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pynqrypt_encrypt_pynqrypt_round_keys_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (127 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component pynqrypt_encrypt_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        key : OUT STD_LOGIC_VECTOR (127 downto 0);
        nonce : OUT STD_LOGIC_VECTOR (95 downto 0);
        plaintext_length : OUT STD_LOGIC_VECTOR (63 downto 0);
        plaintext : OUT STD_LOGIC_VECTOR (63 downto 0);
        ciphertext : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component pynqrypt_encrypt_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    crypto_aes_sbox_V_U : component pynqrypt_encrypt_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_crypto_aes_sbox_V_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => crypto_aes_sbox_V_address0,
        ce0 => crypto_aes_sbox_V_ce0,
        q0 => crypto_aes_sbox_V_q0,
        address1 => ap_const_lv8_0,
        ce1 => ap_const_logic_0,
        q1 => crypto_aes_sbox_V_q1);

    p_round_key_V_U : component pynqrypt_encrypt_p_round_key_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 44,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => p_round_key_V_address0,
        ce0 => p_round_key_V_ce0,
        we0 => p_round_key_V_we0,
        d0 => p_round_key_V_d0,
        q0 => p_round_key_V_q0,
        address1 => p_round_key_V_address1,
        ce1 => p_round_key_V_ce1,
        we1 => p_round_key_V_we1,
        d1 => p_round_key_V_d1,
        q1 => p_round_key_V_q1);

    pynqrypt_round_keys_V_U : component pynqrypt_encrypt_pynqrypt_round_keys_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 128,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => pynqrypt_round_keys_V_address0,
        ce0 => pynqrypt_round_keys_V_ce0,
        we0 => pynqrypt_round_keys_V_we0,
        d0 => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_pynqrypt_round_keys_V_d0,
        q0 => pynqrypt_round_keys_V_q0);

    grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239 : component pynqrypt_encrypt_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_ap_start,
        ap_done => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_ap_done,
        ap_idle => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_ap_idle,
        ap_ready => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_ap_ready,
        p_round_key_V_address0 => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_address0,
        p_round_key_V_ce0 => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_ce0,
        p_round_key_V_we0 => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_we0,
        p_round_key_V_d0 => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_d0,
        p_round_key_V_q0 => p_round_key_V_q0,
        p_round_key_V_address1 => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_address1,
        p_round_key_V_ce1 => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_ce1,
        p_round_key_V_we1 => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_we1,
        p_round_key_V_d1 => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_d1,
        p_round_key_V_q1 => p_round_key_V_q1,
        crypto_aes_sbox_V_address0 => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_crypto_aes_sbox_V_address0,
        crypto_aes_sbox_V_ce0 => grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_crypto_aes_sbox_V_ce0,
        crypto_aes_sbox_V_q0 => crypto_aes_sbox_V_q0);

    grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248 : component pynqrypt_encrypt_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_ap_start,
        ap_done => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_ap_done,
        ap_idle => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_ap_idle,
        ap_ready => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_ap_ready,
        p_round_key_V_address0 => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_p_round_key_V_address0,
        p_round_key_V_ce0 => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_p_round_key_V_ce0,
        p_round_key_V_q0 => p_round_key_V_q0,
        p_round_key_V_address1 => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_p_round_key_V_address1,
        p_round_key_V_ce1 => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_p_round_key_V_ce1,
        p_round_key_V_q1 => p_round_key_V_q1,
        pynqrypt_round_keys_V_address0 => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_pynqrypt_round_keys_V_address0,
        pynqrypt_round_keys_V_ce0 => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_pynqrypt_round_keys_V_ce0,
        pynqrypt_round_keys_V_we0 => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_pynqrypt_round_keys_V_we0,
        pynqrypt_round_keys_V_d0 => grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_pynqrypt_round_keys_V_d0);

    grp_aes_encrypt_block_fu_254 : component pynqrypt_encrypt_aes_encrypt_block
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_encrypt_block_fu_254_ap_start,
        ap_done => grp_aes_encrypt_block_fu_254_ap_done,
        ap_idle => grp_aes_encrypt_block_fu_254_ap_idle,
        ap_ready => grp_aes_encrypt_block_fu_254_ap_ready,
        this_round_keys_address0 => grp_aes_encrypt_block_fu_254_this_round_keys_address0,
        this_round_keys_ce0 => grp_aes_encrypt_block_fu_254_this_round_keys_ce0,
        this_round_keys_q0 => pynqrypt_round_keys_V_q0,
        p_read => p_Result_s_reg_470,
        ap_return => grp_aes_encrypt_block_fu_254_ap_return);

    control_s_axi_U : component pynqrypt_encrypt_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        key => key,
        nonce => nonce,
        plaintext_length => plaintext_length,
        plaintext => plaintext,
        ciphertext => ciphertext,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component pynqrypt_encrypt_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 128,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => sext_ln20_fu_347_p1,
        I_ARLEN => trunc_ln2_reg_434,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => sext_ln20_1_fu_357_p1,
        I_AWLEN => trunc_ln2_reg_434,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => block_V_1_reg_475,
        I_WSTRB => ap_const_lv16_FFFF,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes_encrypt_block_fu_254_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aes_encrypt_block_fu_254_ap_start_reg <= ap_const_logic_0;
            else
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    grp_aes_encrypt_block_fu_254_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_encrypt_block_fu_254_ap_ready = ap_const_logic_1)) then 
                    grp_aes_encrypt_block_fu_254_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_ap_ready = ap_const_logic_1)) then 
                    grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_ap_ready = ap_const_logic_1)) then 
                    grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    offset_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                offset_fu_128 <= ap_const_lv60_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln20_fu_370_p2 = ap_const_lv1_0))) then 
                offset_fu_128 <= i_fu_375_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                block_V_1_reg_475 <= block_V_1_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                block_V_reg_465 <= gmem_RDATA;
                p_Result_s_reg_470 <= p_Result_s_fu_390_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                nonce_read_reg_409 <= nonce;
                tmp_1_reg_414 <= key(63 downto 32);
                trunc_ln20_1_reg_429 <= plaintext(63 downto 4);
                trunc_ln20_2_reg_440 <= ciphertext(63 downto 4);
                trunc_ln20_3_reg_424 <= plaintext_length(63 downto 4);
                trunc_ln2_reg_434 <= plaintext_length(35 downto 4);
                trunc_ln628_reg_419 <= trunc_ln628_fu_298_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln20_fu_370_p2 = ap_const_lv1_0))) then
                offword_V_reg_460 <= offword_V_fu_381_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state9, icmp_ln20_fu_370_p2, ap_CS_fsm_state11, grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_ap_done, grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_ap_done, grp_aes_encrypt_block_fu_254_ap_done, gmem_AWREADY, gmem_WREADY, gmem_ARREADY, gmem_RVALID, gmem_BVALID, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln20_fu_370_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((grp_aes_encrypt_block_fu_254_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(grp_aes_encrypt_block_fu_254_ap_done)
    begin
        if ((grp_aes_encrypt_block_fu_254_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state12_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state17_blk_assign_proc : process(gmem_BVALID)
    begin
        if ((gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_ap_done)
    begin
        if ((grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_ap_done)
    begin
        if ((grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(gmem_AWREADY)
    begin
        if ((gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state17, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    block_V_1_fu_397_p2 <= (grp_aes_encrypt_block_fu_254_ap_return xor block_V_reg_465);

    crypto_aes_sbox_V_address0_assign_proc : process(ap_CS_fsm_state11, grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_crypto_aes_sbox_V_address0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            crypto_aes_sbox_V_address0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            crypto_aes_sbox_V_address0 <= grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_crypto_aes_sbox_V_address0;
        else 
            crypto_aes_sbox_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    crypto_aes_sbox_V_ce0_assign_proc : process(ap_CS_fsm_state11, grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_crypto_aes_sbox_V_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            crypto_aes_sbox_V_ce0 <= ap_const_logic_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            crypto_aes_sbox_V_ce0 <= grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_crypto_aes_sbox_V_ce0;
        else 
            crypto_aes_sbox_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state2, gmem_ARREADY)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state8, gmem_AWREADY)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state17, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state10, gmem_RVALID)
    begin
        if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state12, gmem_WREADY)
    begin
        if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_aes_encrypt_block_fu_254_ap_start <= grp_aes_encrypt_block_fu_254_ap_start_reg;
    grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_ap_start <= grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_ap_start_reg;
    grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_ap_start <= grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_ap_start_reg;
    i_fu_375_p2 <= std_logic_vector(unsigned(offset_fu_128) + unsigned(ap_const_lv60_1));
    icmp_ln20_fu_370_p2 <= "1" when (offset_fu_128 = trunc_ln20_3_reg_424) else "0";
    offword_V_fu_381_p1 <= offset_fu_128(32 - 1 downto 0);
    p_Result_s_fu_390_p3 <= (nonce_read_reg_409 & offword_V_reg_460);

    p_round_key_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_address0, grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_p_round_key_V_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_round_key_V_address0 <= ap_const_lv64_3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_round_key_V_address0 <= ap_const_lv64_1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_round_key_V_address0 <= grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_p_round_key_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_round_key_V_address0 <= grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_address0;
        else 
            p_round_key_V_address0 <= "XXXXXX";
        end if; 
    end process;


    p_round_key_V_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_address1, grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_p_round_key_V_address1, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_round_key_V_address1 <= ap_const_lv64_2(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_round_key_V_address1 <= ap_const_lv64_0(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_round_key_V_address1 <= grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_p_round_key_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_round_key_V_address1 <= grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_address1;
        else 
            p_round_key_V_address1 <= "XXXXXX";
        end if; 
    end process;


    p_round_key_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_ce0, grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_p_round_key_V_ce0, gmem_ARREADY, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            p_round_key_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_round_key_V_ce0 <= grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_p_round_key_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_round_key_V_ce0 <= grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_ce0;
        else 
            p_round_key_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_round_key_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_ce1, grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_p_round_key_V_ce1, gmem_ARREADY, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            p_round_key_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_round_key_V_ce1 <= grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_p_round_key_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_round_key_V_ce1 <= grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_ce1;
        else 
            p_round_key_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_round_key_V_d0_assign_proc : process(ap_CS_fsm_state1, key, ap_CS_fsm_state2, trunc_ln628_reg_419, grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_d0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_round_key_V_d0 <= trunc_ln628_reg_419;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_round_key_V_d0 <= key(95 downto 64);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_round_key_V_d0 <= grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_d0;
        else 
            p_round_key_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_round_key_V_d1_assign_proc : process(ap_CS_fsm_state1, key, ap_CS_fsm_state2, tmp_1_reg_414, grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_d1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_round_key_V_d1 <= tmp_1_reg_414;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            p_round_key_V_d1 <= key(127 downto 96);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_round_key_V_d1 <= grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_d1;
        else 
            p_round_key_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_round_key_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_we0, gmem_ARREADY, ap_CS_fsm_state4)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            p_round_key_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_round_key_V_we0 <= grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_we0;
        else 
            p_round_key_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_round_key_V_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_we1, gmem_ARREADY, ap_CS_fsm_state4)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            p_round_key_V_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_round_key_V_we1 <= grp_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_fu_239_p_round_key_V_we1;
        else 
            p_round_key_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    pynqrypt_round_keys_V_address0_assign_proc : process(ap_CS_fsm_state11, grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_pynqrypt_round_keys_V_address0, grp_aes_encrypt_block_fu_254_this_round_keys_address0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pynqrypt_round_keys_V_address0 <= grp_aes_encrypt_block_fu_254_this_round_keys_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pynqrypt_round_keys_V_address0 <= grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_pynqrypt_round_keys_V_address0;
        else 
            pynqrypt_round_keys_V_address0 <= "XXXX";
        end if; 
    end process;


    pynqrypt_round_keys_V_ce0_assign_proc : process(ap_CS_fsm_state11, grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_pynqrypt_round_keys_V_ce0, grp_aes_encrypt_block_fu_254_this_round_keys_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pynqrypt_round_keys_V_ce0 <= grp_aes_encrypt_block_fu_254_this_round_keys_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pynqrypt_round_keys_V_ce0 <= grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_pynqrypt_round_keys_V_ce0;
        else 
            pynqrypt_round_keys_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pynqrypt_round_keys_V_we0_assign_proc : process(grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_pynqrypt_round_keys_V_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pynqrypt_round_keys_V_we0 <= grp_pynqrypt_encrypt_Pipeline_VITIS_LOOP_155_1_fu_248_pynqrypt_round_keys_V_we0;
        else 
            pynqrypt_round_keys_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln20_1_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln20_2_reg_440),64));

        sext_ln20_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln20_1_reg_429),64));

    trunc_ln628_fu_298_p1 <= key(32 - 1 downto 0);
end behav;
