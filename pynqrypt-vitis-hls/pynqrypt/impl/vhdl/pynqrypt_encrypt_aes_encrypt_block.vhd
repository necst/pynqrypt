-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pynqrypt_encrypt_aes_encrypt_block is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    this_round_keys_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    this_round_keys_ce0 : OUT STD_LOGIC;
    this_round_keys_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read : IN STD_LOGIC_VECTOR (127 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of pynqrypt_encrypt_aes_encrypt_block is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal this_round_keys_load_reg_371 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal xor_ln859_fu_145_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln859_reg_376 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_ap_start : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_ap_done : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_ap_idle : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_ap_ready : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_this_round_keys_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_this_round_keys_ce0 : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_state_promoted_i_out : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_state_promoted_i_out_ap_vld : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_ap_start : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_ap_done : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_ap_idle : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_ap_ready : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_t_out : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_t_out_ap_vld : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp3_fu_158_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_168_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_178_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln628_fu_188_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_192_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_202_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_212_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_222_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_232_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_242_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_252_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_262_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_272_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_282_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_292_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_302_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_312_p17 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln859_1_fu_348_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pynqrypt_encrypt_aes_encrypt_block_Pipeline_loop_aes_encrypt_block IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        xor_ln859 : IN STD_LOGIC_VECTOR (127 downto 0);
        this_round_keys_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        this_round_keys_ce0 : OUT STD_LOGIC;
        this_round_keys_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
        state_promoted_i_out : OUT STD_LOGIC_VECTOR (127 downto 0);
        state_promoted_i_out_ap_vld : OUT STD_LOGIC );
    end component;


    component pynqrypt_encrypt_aes_encrypt_block_Pipeline_loop_aes_sub_bytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_promoted_i_reload : IN STD_LOGIC_VECTOR (127 downto 0);
        t_out : OUT STD_LOGIC_VECTOR (127 downto 0);
        t_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123 : component pynqrypt_encrypt_aes_encrypt_block_Pipeline_loop_aes_encrypt_block
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_ap_start,
        ap_done => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_ap_done,
        ap_idle => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_ap_idle,
        ap_ready => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_ap_ready,
        xor_ln859 => xor_ln859_reg_376,
        this_round_keys_address0 => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_this_round_keys_address0,
        this_round_keys_ce0 => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_this_round_keys_ce0,
        this_round_keys_q0 => this_round_keys_q0,
        state_promoted_i_out => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_state_promoted_i_out,
        state_promoted_i_out_ap_vld => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_state_promoted_i_out_ap_vld);

    grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137 : component pynqrypt_encrypt_aes_encrypt_block_Pipeline_loop_aes_sub_bytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_ap_start,
        ap_done => grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_ap_done,
        ap_idle => grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_ap_idle,
        ap_ready => grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_ap_ready,
        state_promoted_i_reload => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_state_promoted_i_out,
        t_out => grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_t_out,
        t_out_ap_vld => grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_t_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv128_lc_3;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_preg <= xor_ln859_1_fu_348_p2;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_ap_ready = ap_const_logic_1)) then 
                    grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_ap_ready = ap_const_logic_1)) then 
                    grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                this_round_keys_load_reg_371 <= this_round_keys_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                xor_ln859_reg_376 <= xor_ln859_fu_145_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state6, grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_ap_done, grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_ap_done)
    begin
        if ((grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_ap_done)
    begin
        if ((grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state7, xor_ln859_1_fu_348_p2, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return <= xor_ln859_1_fu_348_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_ap_start <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_ap_start_reg;
    grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_ap_start <= grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_ap_start_reg;
    p_Result_s_fu_312_p17 <= (((((((((((((((tmp3_fu_158_p4 & tmp_s_fu_168_p4) & tmp_2_fu_178_p4) & trunc_ln628_fu_188_p1) & tmp_3_fu_192_p4) & tmp_4_fu_202_p4) & tmp_5_fu_212_p4) & tmp_6_fu_222_p4) & tmp_7_fu_232_p4) & tmp_8_fu_242_p4) & tmp_9_fu_252_p4) & tmp_10_fu_262_p4) & tmp_11_fu_272_p4) & tmp_12_fu_282_p4) & tmp_13_fu_292_p4) & tmp_14_fu_302_p4);

    this_round_keys_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_this_round_keys_address0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            this_round_keys_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            this_round_keys_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            this_round_keys_address0 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_this_round_keys_address0;
        else 
            this_round_keys_address0 <= "XXXX";
        end if; 
    end process;


    this_round_keys_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_this_round_keys_ce0, grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_ap_done, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            this_round_keys_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            this_round_keys_ce0 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_123_this_round_keys_ce0;
        else 
            this_round_keys_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp3_fu_158_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_t_out(127 downto 120);
    tmp_10_fu_262_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_t_out(71 downto 64);
    tmp_11_fu_272_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_t_out(31 downto 24);
    tmp_12_fu_282_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_t_out(119 downto 112);
    tmp_13_fu_292_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_t_out(79 downto 72);
    tmp_14_fu_302_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_t_out(39 downto 32);
    tmp_2_fu_178_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_t_out(47 downto 40);
    tmp_3_fu_192_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_t_out(95 downto 88);
    tmp_4_fu_202_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_t_out(55 downto 48);
    tmp_5_fu_212_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_t_out(15 downto 8);
    tmp_6_fu_222_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_t_out(103 downto 96);
    tmp_7_fu_232_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_t_out(63 downto 56);
    tmp_8_fu_242_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_t_out(23 downto 16);
    tmp_9_fu_252_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_t_out(111 downto 104);
    tmp_s_fu_168_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_t_out(87 downto 80);
    trunc_ln628_fu_188_p1 <= grp_aes_encrypt_block_Pipeline_loop_aes_sub_bytes_fu_137_t_out(8 - 1 downto 0);
    xor_ln859_1_fu_348_p2 <= (this_round_keys_q0 xor p_Result_s_fu_312_p17);
    xor_ln859_fu_145_p2 <= (this_round_keys_load_reg_371 xor p_read);
end behav;
