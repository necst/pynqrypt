-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pynqrypt_encrypt_aes_encrypt_block is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pynqrypt_round_keys_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pynqrypt_round_keys_ce0 : OUT STD_LOGIC;
    pynqrypt_round_keys_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pynqrypt_round_keys_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pynqrypt_round_keys_ce1 : OUT STD_LOGIC;
    pynqrypt_round_keys_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce1 : OUT STD_LOGIC;
    state_we1 : OUT STD_LOGIC;
    state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of pynqrypt_encrypt_aes_encrypt_block is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal crypto_aes_sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal crypto_aes_sbox_ce0 : STD_LOGIC;
    signal crypto_aes_sbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_224 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal reg_230 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal reg_236 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal reg_241 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln221_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_addr_reg_301 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_2_reg_306 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal state_addr_3_reg_311 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_10_reg_339 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_ap_start : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_ap_done : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_ap_idle : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_ap_ready : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_ce0 : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_we0 : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_ce1 : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_we1 : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_pynqrypt_round_keys_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_pynqrypt_round_keys_ce0 : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_pynqrypt_round_keys_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_pynqrypt_round_keys_ce1 : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_crypto_aes_sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_crypto_aes_sbox_ce0 : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_ap_start : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_ap_done : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_ap_idle : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_ap_ready : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_ce0 : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_we0 : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_ce1 : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_crypto_aes_sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_crypto_aes_sbox_ce0 : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_start : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_done : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_idle : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_ready : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_pynqrypt_round_keys_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_pynqrypt_round_keys_ce0 : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_ce0 : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_we0 : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_ce1 : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln221_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_54 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln221_fu_268_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal xor_ln222_fu_279_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pynqrypt_encrypt_aes_encrypt_block_Pipeline_loop_aes_encrypt_block IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        pynqrypt_round_keys_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        pynqrypt_round_keys_ce0 : OUT STD_LOGIC;
        pynqrypt_round_keys_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        pynqrypt_round_keys_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        pynqrypt_round_keys_ce1 : OUT STD_LOGIC;
        pynqrypt_round_keys_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        crypto_aes_sbox_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        crypto_aes_sbox_ce0 : OUT STD_LOGIC;
        crypto_aes_sbox_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component pynqrypt_encrypt_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        crypto_aes_sbox_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        crypto_aes_sbox_ce0 : OUT STD_LOGIC;
        crypto_aes_sbox_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component pynqrypt_encrypt_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pynqrypt_round_keys_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        pynqrypt_round_keys_ce0 : OUT STD_LOGIC;
        pynqrypt_round_keys_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component pynqrypt_encrypt_aes_generate_round_keys_Pipeline_loop_generate_round_keys_aes_sbox3_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    crypto_aes_sbox_U : component pynqrypt_encrypt_aes_generate_round_keys_Pipeline_loop_generate_round_keys_aes_sbox3_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => crypto_aes_sbox_address0,
        ce0 => crypto_aes_sbox_ce0,
        q0 => crypto_aes_sbox_q0);

    grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198 : component pynqrypt_encrypt_aes_encrypt_block_Pipeline_loop_aes_encrypt_block
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_ap_start,
        ap_done => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_ap_done,
        ap_idle => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_ap_idle,
        ap_ready => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_ap_ready,
        state_address0 => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_address0,
        state_ce0 => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_ce0,
        state_we0 => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_we0,
        state_d0 => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_d0,
        state_q0 => state_q0,
        state_address1 => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_address1,
        state_ce1 => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_ce1,
        state_we1 => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_we1,
        state_d1 => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_d1,
        state_q1 => state_q1,
        pynqrypt_round_keys_address0 => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_pynqrypt_round_keys_address0,
        pynqrypt_round_keys_ce0 => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_pynqrypt_round_keys_ce0,
        pynqrypt_round_keys_q0 => pynqrypt_round_keys_q0,
        pynqrypt_round_keys_address1 => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_pynqrypt_round_keys_address1,
        pynqrypt_round_keys_ce1 => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_pynqrypt_round_keys_ce1,
        pynqrypt_round_keys_q1 => pynqrypt_round_keys_q1,
        crypto_aes_sbox_address0 => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_crypto_aes_sbox_address0,
        crypto_aes_sbox_ce0 => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_crypto_aes_sbox_ce0,
        crypto_aes_sbox_q0 => crypto_aes_sbox_q0);

    grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208 : component pynqrypt_encrypt_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_ap_start,
        ap_done => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_ap_done,
        ap_idle => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_ap_idle,
        ap_ready => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_ap_ready,
        state_address0 => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_address0,
        state_ce0 => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_ce0,
        state_we0 => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_we0,
        state_d0 => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_d0,
        state_address1 => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_address1,
        state_ce1 => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_ce1,
        state_q1 => state_q1,
        crypto_aes_sbox_address0 => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_crypto_aes_sbox_address0,
        crypto_aes_sbox_ce0 => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_crypto_aes_sbox_ce0,
        crypto_aes_sbox_q0 => crypto_aes_sbox_q0);

    grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216 : component pynqrypt_encrypt_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_start,
        ap_done => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_done,
        ap_idle => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_idle,
        ap_ready => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_ready,
        pynqrypt_round_keys_address0 => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_pynqrypt_round_keys_address0,
        pynqrypt_round_keys_ce0 => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_pynqrypt_round_keys_ce0,
        pynqrypt_round_keys_q0 => pynqrypt_round_keys_q0,
        state_address0 => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_address0,
        state_ce0 => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_ce0,
        state_we0 => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_we0,
        state_d0 => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_d0,
        state_address1 => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_address1,
        state_ce1 => grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_ce1,
        state_q1 => state_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_ready = ap_const_logic_1)) then 
                    grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_ap_ready = ap_const_logic_1)) then 
                    grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln221_fu_262_p2 = ap_const_lv1_1))) then 
                    grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_ap_ready = ap_const_logic_1)) then 
                    grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_54 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln221_fu_262_p2 = ap_const_lv1_0))) then 
                i_fu_54 <= add_ln221_fu_268_p2;
            end if; 
        end if;
    end process;

    reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                reg_224 <= state_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_224 <= state_q1;
            end if; 
        end if;
    end process;

    reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                reg_241 <= state_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                reg_241 <= state_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_230 <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_236 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln221_fu_262_p2 = ap_const_lv1_0))) then
                state_addr_reg_301 <= zext_ln221_fu_256_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln221_fu_262_p2, grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_ap_done, grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_ap_done, grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state17)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln221_fu_262_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln221_fu_268_p2 <= std_logic_vector(unsigned(i_fu_54) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state17_blk_assign_proc : process(grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_done)
    begin
        if ((grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_ap_done)
    begin
        if ((grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_ap_done)
    begin
        if ((grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_done, ap_CS_fsm_state17)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_done = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_done, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    crypto_aes_sbox_address0_assign_proc : process(grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_crypto_aes_sbox_address0, grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_crypto_aes_sbox_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            crypto_aes_sbox_address0 <= grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_crypto_aes_sbox_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            crypto_aes_sbox_address0 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_crypto_aes_sbox_address0;
        else 
            crypto_aes_sbox_address0 <= "XXXXXXXX";
        end if; 
    end process;


    crypto_aes_sbox_ce0_assign_proc : process(grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_crypto_aes_sbox_ce0, grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_crypto_aes_sbox_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            crypto_aes_sbox_ce0 <= grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_crypto_aes_sbox_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            crypto_aes_sbox_ce0 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_crypto_aes_sbox_ce0;
        else 
            crypto_aes_sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_start <= grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_ap_start_reg;
    grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_ap_start <= grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_ap_start_reg;
    grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_ap_start <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_ap_start_reg;
    icmp_ln221_fu_262_p2 <= "1" when (i_fu_54 = ap_const_lv5_10) else "0";

    pynqrypt_round_keys_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln221_fu_262_p2, grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_pynqrypt_round_keys_address0, grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_pynqrypt_round_keys_address0, ap_CS_fsm_state4, ap_CS_fsm_state17, zext_ln221_fu_256_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln221_fu_262_p2 = ap_const_lv1_0))) then 
            pynqrypt_round_keys_address0 <= zext_ln221_fu_256_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            pynqrypt_round_keys_address0 <= grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_pynqrypt_round_keys_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pynqrypt_round_keys_address0 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_pynqrypt_round_keys_address0;
        else 
            pynqrypt_round_keys_address0 <= "XXXXXXXX";
        end if; 
    end process;

    pynqrypt_round_keys_address1 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_pynqrypt_round_keys_address1;

    pynqrypt_round_keys_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln221_fu_262_p2, grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_pynqrypt_round_keys_ce0, grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_pynqrypt_round_keys_ce0, ap_CS_fsm_state4, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln221_fu_262_p2 = ap_const_lv1_0))) then 
            pynqrypt_round_keys_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            pynqrypt_round_keys_ce0 <= grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_pynqrypt_round_keys_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pynqrypt_round_keys_ce0 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_pynqrypt_round_keys_ce0;
        else 
            pynqrypt_round_keys_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pynqrypt_round_keys_ce1_assign_proc : process(grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_pynqrypt_round_keys_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pynqrypt_round_keys_ce1 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_pynqrypt_round_keys_ce1;
        else 
            pynqrypt_round_keys_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    state_addr_10_reg_339 <= ap_const_lv64_9(4 - 1 downto 0);
    state_addr_2_reg_306 <= ap_const_lv64_1(4 - 1 downto 0);
    state_addr_3_reg_311 <= ap_const_lv64_2(4 - 1 downto 0);

    state_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state2, icmp_ln221_fu_262_p2, state_addr_reg_301, ap_CS_fsm_state7, state_addr_3_reg_311, state_addr_10_reg_339, grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_address0, grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_address0, grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_address0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state17, zext_ln221_fu_256_p1, ap_CS_fsm_state3, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_address0 <= state_addr_10_reg_339;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_address0 <= state_addr_3_reg_311;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address0 <= state_addr_reg_301;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln221_fu_262_p2 = ap_const_lv1_0))) then 
            state_address0 <= zext_ln221_fu_256_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_address0 <= grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address0 <= grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address0 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_address0;
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state9, ap_CS_fsm_state13, state_addr_2_reg_306, ap_CS_fsm_state7, grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_address1, grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_address1, grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_address1, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_address1 <= state_addr_2_reg_306;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_address1 <= grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address1 <= grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address1 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_address1;
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state2, icmp_ln221_fu_262_p2, ap_CS_fsm_state7, grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_ce0, grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_ce0, grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state3, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln221_fu_262_p2 = ap_const_lv1_0)))) then 
            state_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_ce0 <= grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_ce0 <= grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_ce0 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_ce0;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state7, grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_ce1, grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_ce1, grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_ce1, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            state_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_ce1 <= grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_ce1 <= grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_ce1 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_ce1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(state_q1, reg_224, ap_CS_fsm_state11, reg_230, ap_CS_fsm_state12, ap_CS_fsm_state13, reg_241, grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_d0, grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_d0, grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_d0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state3, xor_ln222_fu_279_p2, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_d0 <= reg_230;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_d0 <= reg_241;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_d0 <= state_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_d0 <= reg_224;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_d0 <= xor_ln222_fu_279_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_d0 <= grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_d0 <= grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_d0 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_d0;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_d1_assign_proc : process(state_q0, ap_CS_fsm_state11, reg_230, ap_CS_fsm_state10, ap_CS_fsm_state12, reg_236, ap_CS_fsm_state9, ap_CS_fsm_state13, reg_241, grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_d1, ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            state_d1 <= reg_236;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_d1 <= reg_241;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_d1 <= reg_230;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_d1 <= state_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_d1 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_d1;
        else 
            state_d1 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_we0, grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_we0, grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_we0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state3, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_we0 <= grp_aes_encrypt_block_Pipeline_VITIS_LOOP_221_1_fu_216_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_we0 <= grp_aes_encrypt_block_Pipeline_VITIS_LOOP_68_1_fu_208_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_we0 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_we0;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state9, ap_CS_fsm_state13, grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_we1, ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_we1 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_198_state_we1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln222_fu_279_p2 <= (state_q0 xor pynqrypt_round_keys_q0);
    zext_ln221_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_54),64));
end behav;
