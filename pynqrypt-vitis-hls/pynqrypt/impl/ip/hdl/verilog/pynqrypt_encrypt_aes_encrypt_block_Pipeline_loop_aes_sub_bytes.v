// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pynqrypt_encrypt_aes_encrypt_block_Pipeline_loop_aes_sub_bytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_promoted_i_reload,
        t_out,
        t_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] state_promoted_i_reload;
output  [127:0] t_out;
output   t_out_ap_vld;

reg ap_idle;
reg t_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln64_fu_78_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [127:0] p_Result_s_fu_173_p2;
reg   [127:0] p_Result_s_reg_210;
reg   [4:0] i_fu_44;
wire   [4:0] i_4_fu_84_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [127:0] p_Val2_s_fu_48;
reg   [127:0] ap_sig_allocacmp_p_Val2_load_1;
wire    ap_block_pp0_stage0_01001;
wire   [3:0] trunc_ln65_fu_93_p1;
wire   [6:0] shl_ln_fu_97_p3;
wire   [127:0] zext_ln668_fu_105_p1;
wire   [127:0] lshr_ln668_fu_109_p2;
wire   [7:0] trunc_ln668_fu_115_p1;
wire   [10:0] shl_ln1_fu_119_p3;
wire   [2047:0] zext_ln186_fu_127_p1;
wire   [2047:0] lshr_ln186_fu_131_p2;
wire   [127:0] zext_ln368_fu_141_p1;
wire   [127:0] shl_ln368_fu_145_p2;
wire   [127:0] xor_ln368_fu_151_p2;
wire   [7:0] trunc_ln186_fu_137_p1;
wire   [127:0] zext_ln368_1_fu_163_p1;
wire   [127:0] and_ln368_fu_157_p2;
wire   [127:0] shl_ln368_1_fu_167_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

pynqrypt_encrypt_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_44 <= 5'd0;
        end else if (((icmp_ln64_fu_78_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_44 <= i_4_fu_84_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_Val2_s_fu_48 <= state_promoted_i_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            p_Val2_s_fu_48 <= p_Result_s_reg_210;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_78_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Result_s_reg_210 <= p_Result_s_fu_173_p2;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_78_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_Val2_load_1 = p_Result_s_reg_210;
    end else begin
        ap_sig_allocacmp_p_Val2_load_1 = p_Val2_s_fu_48;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_78_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_out_ap_vld = 1'b1;
    end else begin
        t_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln368_fu_157_p2 = (xor_ln368_fu_151_p2 & ap_sig_allocacmp_p_Val2_load_1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign i_4_fu_84_p2 = (i_fu_44 + 5'd1);

assign icmp_ln64_fu_78_p2 = ((i_fu_44 == 5'd16) ? 1'b1 : 1'b0);

assign lshr_ln186_fu_131_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln186_fu_127_p1;

assign lshr_ln668_fu_109_p2 = ap_sig_allocacmp_p_Val2_load_1 >> zext_ln668_fu_105_p1;

assign p_Result_s_fu_173_p2 = (shl_ln368_1_fu_167_p2 | and_ln368_fu_157_p2);

assign shl_ln1_fu_119_p3 = {{trunc_ln668_fu_115_p1}, {3'd0}};

assign shl_ln368_1_fu_167_p2 = zext_ln368_1_fu_163_p1 << zext_ln368_fu_141_p1;

assign shl_ln368_fu_145_p2 = 128'd255 << zext_ln368_fu_141_p1;

assign shl_ln_fu_97_p3 = {{trunc_ln65_fu_93_p1}, {3'd0}};

assign t_out = p_Val2_s_fu_48;

assign trunc_ln186_fu_137_p1 = lshr_ln186_fu_131_p2[7:0];

assign trunc_ln65_fu_93_p1 = i_fu_44[3:0];

assign trunc_ln668_fu_115_p1 = lshr_ln668_fu_109_p2[7:0];

assign xor_ln368_fu_151_p2 = (shl_ln368_fu_145_p2 ^ 128'd340282366920938463463374607431768211455);

assign zext_ln186_fu_127_p1 = shl_ln1_fu_119_p3;

assign zext_ln368_1_fu_163_p1 = trunc_ln186_fu_137_p1;

assign zext_ln368_fu_141_p1 = shl_ln_fu_97_p3;

assign zext_ln668_fu_105_p1 = shl_ln_fu_97_p3;

endmodule //pynqrypt_encrypt_aes_encrypt_block_Pipeline_loop_aes_sub_bytes
