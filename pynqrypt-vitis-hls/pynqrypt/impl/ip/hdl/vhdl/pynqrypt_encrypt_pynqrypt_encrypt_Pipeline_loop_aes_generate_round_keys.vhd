-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pynqrypt_encrypt_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_round_key_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_round_key_V_ce0 : OUT STD_LOGIC;
    p_round_key_V_we0 : OUT STD_LOGIC;
    p_round_key_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_round_key_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_round_key_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_round_key_V_ce1 : OUT STD_LOGIC;
    p_round_key_V_we1 : OUT STD_LOGIC;
    p_round_key_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_round_key_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    crypto_aes_sbox_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    crypto_aes_sbox_V_ce0 : OUT STD_LOGIC;
    crypto_aes_sbox_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of pynqrypt_encrypt_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_2C : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv6_3D : STD_LOGIC_VECTOR (5 downto 0) := "111101";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln144_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal crypto_aes_rcon_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal crypto_aes_rcon_V_ce0 : STD_LOGIC;
    signal crypto_aes_rcon_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_reg_408 : STD_LOGIC_VECTOR (5 downto 0);
    signal lhs_V_3_reg_437 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal trunc_ln541_fu_267_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln541_reg_447 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_reg_452 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln541_1_reg_457 : STD_LOGIC_VECTOR (7 downto 0);
    signal crypto_aes_rcon_V_load_reg_462 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_reg_467 : STD_LOGIC_VECTOR (31 downto 0);
    signal crypto_aes_sbox_V_load_reg_482 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal lhs_V_1_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_2_reg_497 : STD_LOGIC_VECTOR (31 downto 0);
    signal crypto_aes_sbox_V_load_1_reg_502 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal crypto_aes_sbox_V_load_2_reg_512 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ret_V_4_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_4_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ret_V_6_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_6_reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal zext_ln145_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln628_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln151_fu_247_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln153_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_1_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_2_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_3_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast2_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_1_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln153_1_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln154_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_68 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln144_fu_391_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_5_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_376_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln145_fu_209_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1_fu_220_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln149_fu_230_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln151_fu_241_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_p_fu_252_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln152_fu_291_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln153_fu_301_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln1499_fu_323_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_328_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln152_fu_351_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln153_fu_366_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln154_fu_381_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pynqrypt_encrypt_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_crypto_aes_rcon_V_ROM_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component pynqrypt_encrypt_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    crypto_aes_rcon_V_U : component pynqrypt_encrypt_pynqrypt_encrypt_Pipeline_loop_aes_generate_round_keys_crypto_aes_rcon_V_ROM_bkb
    generic map (
        DataWidth => 8,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => crypto_aes_rcon_V_address0,
        ce0 => crypto_aes_rcon_V_ce0,
        q0 => crypto_aes_rcon_V_q0);

    flow_control_loop_pipe_sequential_init_U : component pynqrypt_encrypt_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                i_fu_68 <= ap_const_lv6_4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_fu_68 <= add_ln144_fu_391_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                crypto_aes_rcon_V_load_reg_462 <= crypto_aes_rcon_V_q0;
                lhs_V_3_reg_437 <= p_round_key_V_q1;
                lhs_V_reg_467 <= p_round_key_V_q0;
                lshr_ln541_1_reg_457 <= p_round_key_V_q1(23 downto 16);
                lshr_ln_reg_452 <= p_round_key_V_q1(15 downto 8);
                trunc_ln541_reg_447 <= trunc_ln541_fu_267_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                crypto_aes_sbox_V_load_1_reg_502 <= crypto_aes_sbox_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                crypto_aes_sbox_V_load_2_reg_512 <= crypto_aes_sbox_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                crypto_aes_sbox_V_load_reg_482 <= crypto_aes_sbox_V_q0;
                lhs_V_1_reg_492 <= p_round_key_V_q1;
                lhs_V_2_reg_497 <= p_round_key_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                i_1_reg_408 <= ap_sig_allocacmp_i_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                ret_V_4_reg_522 <= ret_V_4_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ret_V_6_reg_528 <= ret_V_6_fu_361_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln144_fu_203_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (icmp_ln144_fu_203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln144_fu_391_p2 <= std_logic_vector(unsigned(i_1_reg_408) + unsigned(ap_const_lv6_4));
    add_ln145_fu_209_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv6_3F));
    add_ln149_fu_230_p2 <= std_logic_vector(unsigned(trunc_ln1_fu_220_p4) + unsigned(ap_const_lv4_F));
    add_ln151_fu_241_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv6_3C));
    add_ln152_fu_291_p2 <= std_logic_vector(unsigned(i_1_reg_408) + unsigned(ap_const_lv6_3D));
    add_ln153_fu_301_p2 <= std_logic_vector(unsigned(i_1_reg_408) + unsigned(ap_const_lv6_3E));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln144_fu_203_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln144_fu_203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_state1, i_fu_68, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv6_4;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_68;
        end if; 
    end process;

    crypto_aes_rcon_V_address0 <= zext_ln628_fu_236_p1(4 - 1 downto 0);

    crypto_aes_rcon_V_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            crypto_aes_rcon_V_ce0 <= ap_const_logic_1;
        else 
            crypto_aes_rcon_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    crypto_aes_sbox_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, zext_ln541_fu_262_p1, zext_ln541_1_fu_311_p1, zext_ln541_2_fu_315_p1, zext_ln541_3_fu_319_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            crypto_aes_sbox_V_address0 <= zext_ln541_3_fu_319_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            crypto_aes_sbox_V_address0 <= zext_ln541_2_fu_315_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            crypto_aes_sbox_V_address0 <= zext_ln541_1_fu_311_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            crypto_aes_sbox_V_address0 <= zext_ln541_fu_262_p1(8 - 1 downto 0);
        else 
            crypto_aes_sbox_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    crypto_aes_sbox_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            crypto_aes_sbox_V_ce0 <= ap_const_logic_1;
        else 
            crypto_aes_sbox_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_cast2_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_408),64));
    icmp_ln144_fu_203_p2 <= "1" when (unsigned(ap_sig_allocacmp_i_1) < unsigned(ap_const_lv6_2C)) else "0";
    or_ln152_fu_351_p2 <= (i_1_reg_408 or ap_const_lv6_1);
    or_ln153_fu_366_p2 <= (i_1_reg_408 or ap_const_lv6_2);
    or_ln154_fu_381_p2 <= (i_1_reg_408 or ap_const_lv6_3);
    p_Result_s_fu_328_p5 <= (((xor_ln1499_fu_323_p2 & crypto_aes_sbox_V_load_2_reg_512) & crypto_aes_sbox_V_load_1_reg_502) & crypto_aes_sbox_V_load_reg_482);

    p_round_key_V_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln144_fu_203_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state7, zext_ln151_fu_247_p1, zext_ln153_fu_306_p1, zext_ln152_1_fu_356_p1, zext_ln154_fu_386_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            p_round_key_V_address0 <= zext_ln154_fu_386_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            p_round_key_V_address0 <= zext_ln152_1_fu_356_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_round_key_V_address0 <= zext_ln153_fu_306_p1(6 - 1 downto 0);
        elsif (((icmp_ln144_fu_203_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_round_key_V_address0 <= zext_ln151_fu_247_p1(6 - 1 downto 0);
        else 
            p_round_key_V_address0 <= "XXXXXX";
        end if; 
    end process;


    p_round_key_V_address1_assign_proc : process(ap_CS_fsm_state1, icmp_ln144_fu_203_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state7, zext_ln145_fu_215_p1, zext_ln152_fu_296_p1, i_cast2_fu_342_p1, zext_ln153_1_fu_371_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            p_round_key_V_address1 <= zext_ln153_1_fu_371_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            p_round_key_V_address1 <= i_cast2_fu_342_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_round_key_V_address1 <= zext_ln152_fu_296_p1(6 - 1 downto 0);
        elsif (((icmp_ln144_fu_203_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_round_key_V_address1 <= zext_ln145_fu_215_p1(6 - 1 downto 0);
        else 
            p_round_key_V_address1 <= "XXXXXX";
        end if; 
    end process;


    p_round_key_V_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln144_fu_203_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start_int = ap_const_logic_1) and (icmp_ln144_fu_203_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_round_key_V_ce0 <= ap_const_logic_1;
        else 
            p_round_key_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_round_key_V_ce1_assign_proc : process(ap_CS_fsm_state1, icmp_ln144_fu_203_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start_int = ap_const_logic_1) and (icmp_ln144_fu_203_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_round_key_V_ce1 <= ap_const_logic_1;
        else 
            p_round_key_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_round_key_V_d0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state7, ret_V_5_fu_346_p2, ret_V_fu_376_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            p_round_key_V_d0 <= ret_V_fu_376_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            p_round_key_V_d0 <= ret_V_5_fu_346_p2;
        else 
            p_round_key_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_round_key_V_d1_assign_proc : process(ap_CS_fsm_state8, ret_V_4_reg_522, ret_V_6_reg_528, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            p_round_key_V_d1 <= ret_V_6_reg_528;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            p_round_key_V_d1 <= ret_V_4_reg_522;
        else 
            p_round_key_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_round_key_V_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            p_round_key_V_we0 <= ap_const_logic_1;
        else 
            p_round_key_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_round_key_V_we1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            p_round_key_V_we1 <= ap_const_logic_1;
        else 
            p_round_key_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    r_p_fu_252_p4 <= p_round_key_V_q1(31 downto 24);
    ret_V_4_fu_337_p2 <= (p_Result_s_fu_328_p5 xor lhs_V_reg_467);
    ret_V_5_fu_346_p2 <= (ret_V_4_reg_522 xor lhs_V_1_reg_492);
    ret_V_6_fu_361_p2 <= (ret_V_5_fu_346_p2 xor lhs_V_2_reg_497);
    ret_V_fu_376_p2 <= (ret_V_6_reg_528 xor lhs_V_3_reg_437);
    trunc_ln1_fu_220_p4 <= ap_sig_allocacmp_i_1(5 downto 2);
    trunc_ln541_fu_267_p1 <= p_round_key_V_q1(8 - 1 downto 0);
    xor_ln1499_fu_323_p2 <= (crypto_aes_sbox_V_q0 xor crypto_aes_rcon_V_load_reg_462);
    zext_ln145_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln145_fu_209_p2),64));
    zext_ln151_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln151_fu_241_p2),64));
    zext_ln152_1_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln152_fu_351_p2),64));
    zext_ln152_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln152_fu_291_p2),64));
    zext_ln153_1_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln153_fu_366_p2),64));
    zext_ln153_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln153_fu_301_p2),64));
    zext_ln154_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln154_fu_381_p2),64));
    zext_ln541_1_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln541_reg_447),64));
    zext_ln541_2_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_452),64));
    zext_ln541_3_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln541_1_reg_457),64));
    zext_ln541_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_p_fu_252_p4),64));
    zext_ln628_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln149_fu_230_p2),64));
end behav;
