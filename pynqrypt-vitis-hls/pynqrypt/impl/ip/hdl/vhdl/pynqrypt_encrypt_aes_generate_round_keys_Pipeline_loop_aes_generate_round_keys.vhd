-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pynqrypt_encrypt_aes_generate_round_keys_Pipeline_loop_aes_generate_round_keys is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_round_key_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_round_key_V_ce0 : OUT STD_LOGIC;
    p_round_key_V_we0 : OUT STD_LOGIC;
    p_round_key_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_round_key_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_round_key_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_round_key_V_ce1 : OUT STD_LOGIC;
    p_round_key_V_we1 : OUT STD_LOGIC;
    p_round_key_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_round_key_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of pynqrypt_encrypt_aes_generate_round_keys_Pipeline_loop_aes_generate_round_keys is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_2C : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv6_3D : STD_LOGIC_VECTOR (5 downto 0) := "111101";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2048_lc_1 : STD_LOGIC_VECTOR (2047 downto
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln171_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal crypto_aes_rcon_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal crypto_aes_rcon_V_ce0 : STD_LOGIC;
    signal crypto_aes_rcon_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal i_2_reg_452 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_V_reg_481 : STD_LOGIC_VECTOR (31 downto 0);
    signal crypto_aes_rcon_V_load_reg_490 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_4_fu_379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_4_reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_2_reg_511 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_6_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_6_reg_516 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal zext_ln172_fu_187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln186_4_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln178_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln179_fu_229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_fu_239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast3_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln179_1_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_1_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_72 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln171_fu_435_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_5_fu_389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_420_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln172_fu_181_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln_fu_192_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln176_fu_202_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln178_fu_213_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln179_fu_224_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln180_fu_234_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_p_fu_244_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_253_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln186_fu_261_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln186_fu_265_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal trunc_ln186_1_fu_275_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln186_1_fu_278_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln186_1_fu_286_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln186_1_fu_290_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal tmp_5_fu_300_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln186_2_fu_309_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln186_2_fu_317_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln186_2_fu_321_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal tmp_6_fu_331_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln186_3_fu_340_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln186_3_fu_348_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln186_3_fu_352_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal trunc_ln186_4_fu_358_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1499_fu_362_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln186_3_fu_327_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln186_2_fu_296_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln186_fu_271_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_367_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln179_fu_395_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln180_fu_410_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln181_fu_425_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pynqrypt_encrypt_aes_generate_round_keys_Pipeline_loop_aes_generate_round_keys_crypto_aes_rconbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component pynqrypt_encrypt_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    crypto_aes_rcon_V_U : component pynqrypt_encrypt_aes_generate_round_keys_Pipeline_loop_aes_generate_round_keys_crypto_aes_rconbkb
    generic map (
        DataWidth => 8,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => crypto_aes_rcon_V_address0,
        ce0 => crypto_aes_rcon_V_ce0,
        q0 => crypto_aes_rcon_V_q0);

    flow_control_loop_pipe_sequential_init_U : component pynqrypt_encrypt_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                i_fu_72 <= ap_const_lv6_4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_fu_72 <= add_ln171_fu_435_p2;
            end if; 
        end if;
    end process;

    reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                reg_162 <= p_round_key_V_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                reg_162 <= p_round_key_V_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                crypto_aes_rcon_V_load_reg_490 <= crypto_aes_rcon_V_q0;
                temp_V_reg_481 <= p_round_key_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                i_2_reg_452 <= ap_sig_allocacmp_i_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                lhs_V_2_reg_511 <= p_round_key_V_q0;
                ret_V_4_reg_505 <= ret_V_4_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ret_V_6_reg_516 <= ret_V_6_fu_405_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln171_fu_175_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (icmp_ln171_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln171_fu_435_p2 <= std_logic_vector(unsigned(i_2_reg_452) + unsigned(ap_const_lv6_4));
    add_ln172_fu_181_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv6_3F));
    add_ln176_fu_202_p2 <= std_logic_vector(unsigned(trunc_ln_fu_192_p4) + unsigned(ap_const_lv4_F));
    add_ln178_fu_213_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv6_3C));
    add_ln179_fu_224_p2 <= std_logic_vector(unsigned(i_2_reg_452) + unsigned(ap_const_lv6_3D));
    add_ln180_fu_234_p2 <= std_logic_vector(unsigned(i_2_reg_452) + unsigned(ap_const_lv6_3E));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln171_fu_175_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln171_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_state1, i_fu_72, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv6_4;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_72;
        end if; 
    end process;

    crypto_aes_rcon_V_address0 <= zext_ln186_4_fu_208_p1(4 - 1 downto 0);

    crypto_aes_rcon_V_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            crypto_aes_rcon_V_ce0 <= ap_const_logic_1;
        else 
            crypto_aes_rcon_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_cast3_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_452),64));
    icmp_ln171_fu_175_p2 <= "1" when (unsigned(ap_sig_allocacmp_i_2) < unsigned(ap_const_lv6_2C)) else "0";
    lshr_ln186_1_fu_290_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv2048_lc_1),to_integer(unsigned('0' & zext_ln186_1_fu_286_p1(31-1 downto 0)))));
    lshr_ln186_2_fu_321_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv2048_lc_1),to_integer(unsigned('0' & zext_ln186_2_fu_317_p1(31-1 downto 0)))));
    lshr_ln186_3_fu_352_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv2048_lc_1),to_integer(unsigned('0' & zext_ln186_3_fu_348_p1(31-1 downto 0)))));
    lshr_ln186_fu_265_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv2048_lc_1),to_integer(unsigned('0' & zext_ln186_fu_261_p1(31-1 downto 0)))));
    or_ln179_fu_395_p2 <= (i_2_reg_452 or ap_const_lv6_1);
    or_ln180_fu_410_p2 <= (i_2_reg_452 or ap_const_lv6_2);
    or_ln181_fu_425_p2 <= (i_2_reg_452 or ap_const_lv6_3);
    p_Result_s_fu_367_p5 <= (((xor_ln1499_fu_362_p2 & trunc_ln186_3_fu_327_p1) & trunc_ln186_2_fu_296_p1) & trunc_ln186_fu_271_p1);

    p_round_key_V_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln171_fu_175_p2, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state4, zext_ln178_fu_219_p1, zext_ln180_fu_239_p1, zext_ln179_1_fu_400_p1, zext_ln181_fu_430_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            p_round_key_V_address0 <= zext_ln181_fu_430_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_round_key_V_address0 <= zext_ln179_1_fu_400_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_round_key_V_address0 <= zext_ln180_fu_239_p1(6 - 1 downto 0);
        elsif (((icmp_ln171_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_round_key_V_address0 <= zext_ln178_fu_219_p1(6 - 1 downto 0);
        else 
            p_round_key_V_address0 <= "XXXXXX";
        end if; 
    end process;


    p_round_key_V_address1_assign_proc : process(ap_CS_fsm_state1, icmp_ln171_fu_175_p2, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state4, zext_ln172_fu_187_p1, zext_ln179_fu_229_p1, i_cast3_fu_385_p1, zext_ln180_1_fu_415_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            p_round_key_V_address1 <= zext_ln180_1_fu_415_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_round_key_V_address1 <= i_cast3_fu_385_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_round_key_V_address1 <= zext_ln179_fu_229_p1(6 - 1 downto 0);
        elsif (((icmp_ln171_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_round_key_V_address1 <= zext_ln172_fu_187_p1(6 - 1 downto 0);
        else 
            p_round_key_V_address1 <= "XXXXXX";
        end if; 
    end process;


    p_round_key_V_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln171_fu_175_p2, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start_int = ap_const_logic_1) and (icmp_ln171_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_round_key_V_ce0 <= ap_const_logic_1;
        else 
            p_round_key_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_round_key_V_ce1_assign_proc : process(ap_CS_fsm_state1, icmp_ln171_fu_175_p2, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start_int = ap_const_logic_1) and (icmp_ln171_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            p_round_key_V_ce1 <= ap_const_logic_1;
        else 
            p_round_key_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_round_key_V_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4, ret_V_5_fu_389_p2, ret_V_fu_420_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            p_round_key_V_d0 <= ret_V_fu_420_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_round_key_V_d0 <= ret_V_5_fu_389_p2;
        else 
            p_round_key_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_round_key_V_d1_assign_proc : process(ap_CS_fsm_state5, ret_V_4_reg_505, ret_V_6_reg_516, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            p_round_key_V_d1 <= ret_V_6_reg_516;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_round_key_V_d1 <= ret_V_4_reg_505;
        else 
            p_round_key_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_round_key_V_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            p_round_key_V_we0 <= ap_const_logic_1;
        else 
            p_round_key_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_round_key_V_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            p_round_key_V_we1 <= ap_const_logic_1;
        else 
            p_round_key_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    r_p_fu_244_p4 <= temp_V_reg_481(31 downto 24);
    ret_V_4_fu_379_p2 <= (reg_162 xor p_Result_s_fu_367_p5);
    ret_V_5_fu_389_p2 <= (ret_V_4_reg_505 xor reg_162);
    ret_V_6_fu_405_p2 <= (ret_V_5_fu_389_p2 xor lhs_V_2_reg_511);
    ret_V_fu_420_p2 <= (temp_V_reg_481 xor ret_V_6_reg_516);
    shl_ln186_1_fu_278_p3 <= (trunc_ln186_1_fu_275_p1 & ap_const_lv3_0);
    shl_ln186_2_fu_309_p3 <= (tmp_5_fu_300_p4 & ap_const_lv3_0);
    shl_ln186_3_fu_340_p3 <= (tmp_6_fu_331_p4 & ap_const_lv3_0);
    shl_ln_fu_253_p3 <= (r_p_fu_244_p4 & ap_const_lv3_0);
    tmp_5_fu_300_p4 <= temp_V_reg_481(15 downto 8);
    tmp_6_fu_331_p4 <= temp_V_reg_481(23 downto 16);
    trunc_ln186_1_fu_275_p1 <= temp_V_reg_481(8 - 1 downto 0);
    trunc_ln186_2_fu_296_p1 <= lshr_ln186_1_fu_290_p2(8 - 1 downto 0);
    trunc_ln186_3_fu_327_p1 <= lshr_ln186_2_fu_321_p2(8 - 1 downto 0);
    trunc_ln186_4_fu_358_p1 <= lshr_ln186_3_fu_352_p2(8 - 1 downto 0);
    trunc_ln186_fu_271_p1 <= lshr_ln186_fu_265_p2(8 - 1 downto 0);
    trunc_ln_fu_192_p4 <= ap_sig_allocacmp_i_2(5 downto 2);
    xor_ln1499_fu_362_p2 <= (trunc_ln186_4_fu_358_p1 xor crypto_aes_rcon_V_load_reg_490);
    zext_ln172_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln172_fu_181_p2),64));
    zext_ln178_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln178_fu_213_p2),64));
    zext_ln179_1_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln179_fu_395_p2),64));
    zext_ln179_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln179_fu_224_p2),64));
    zext_ln180_1_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln180_fu_410_p2),64));
    zext_ln180_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_fu_234_p2),64));
    zext_ln181_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln181_fu_425_p2),64));
    zext_ln186_1_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln186_1_fu_278_p3),2048));
    zext_ln186_2_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln186_2_fu_309_p3),2048));
    zext_ln186_3_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln186_3_fu_340_p3),2048));
    zext_ln186_4_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln176_fu_202_p2),64));
    zext_ln186_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_253_p3),2048));
end behav;
