-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pynqrypt_encrypt_dataflow_in_loop_loop_ctr_encrypt is
port (
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    i : IN STD_LOGIC_VECTOR (59 downto 0);
    plaintext : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read : IN STD_LOGIC_VECTOR (95 downto 0);
    this_round_keys_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    this_round_keys_ce0 : OUT STD_LOGIC;
    this_round_keys_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    this_round_keys_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    this_round_keys_we0 : OUT STD_LOGIC;
    this_round_keys_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    this_round_keys_ce1 : OUT STD_LOGIC;
    this_round_keys_d1 : OUT STD_LOGIC_VECTOR (127 downto 0);
    this_round_keys_q1 : IN STD_LOGIC_VECTOR (127 downto 0);
    this_round_keys_we1 : OUT STD_LOGIC;
    ciphertext : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ciphertext_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    i_ap_vld : IN STD_LOGIC;
    plaintext_ap_vld : IN STD_LOGIC;
    p_read_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of pynqrypt_encrypt_dataflow_in_loop_loop_ctr_encrypt is 
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv60_20 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_ciphertext_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_ciphertext_c_write : STD_LOGIC;
    signal assign_swap_endianness_U0_ap_start : STD_LOGIC;
    signal assign_swap_endianness_U0_ap_done : STD_LOGIC;
    signal assign_swap_endianness_U0_ap_continue : STD_LOGIC;
    signal assign_swap_endianness_U0_ap_idle : STD_LOGIC;
    signal assign_swap_endianness_U0_ap_ready : STD_LOGIC;
    signal assign_swap_endianness_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal assign_swap_endianness_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal assign_swap_endianness_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal assign_swap_endianness_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal assign_swap_endianness_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal assign_swap_endianness_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal assign_swap_endianness_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal assign_swap_endianness_U0_i_c_din : STD_LOGIC_VECTOR (59 downto 0);
    signal assign_swap_endianness_U0_i_c_write : STD_LOGIC;
    signal assign_swap_endianness_U0_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal block_V1_out_tmp_channel_full_n : STD_LOGIC;
    signal ctr_compute_nonce_U0_ap_start : STD_LOGIC;
    signal ctr_compute_nonce_U0_ap_done : STD_LOGIC;
    signal ctr_compute_nonce_U0_ap_continue : STD_LOGIC;
    signal ctr_compute_nonce_U0_ap_idle : STD_LOGIC;
    signal ctr_compute_nonce_U0_ap_ready : STD_LOGIC;
    signal ctr_compute_nonce_U0_i : STD_LOGIC_VECTOR (31 downto 0);
    signal ctr_compute_nonce_U0_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_full_n : STD_LOGIC;
    signal aes_encrypt_block_U0_ap_start : STD_LOGIC;
    signal aes_encrypt_block_U0_ap_done : STD_LOGIC;
    signal aes_encrypt_block_U0_ap_continue : STD_LOGIC;
    signal aes_encrypt_block_U0_ap_idle : STD_LOGIC;
    signal aes_encrypt_block_U0_ap_ready : STD_LOGIC;
    signal aes_encrypt_block_U0_this_round_keys_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal aes_encrypt_block_U0_this_round_keys_ce0 : STD_LOGIC;
    signal aes_encrypt_block_U0_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal block_nonce_V_full_n : STD_LOGIC;
    signal ctr_xor_block_U0_ap_start : STD_LOGIC;
    signal ctr_xor_block_U0_ap_done : STD_LOGIC;
    signal ctr_xor_block_U0_ap_continue : STD_LOGIC;
    signal ctr_xor_block_U0_ap_idle : STD_LOGIC;
    signal ctr_xor_block_U0_ap_ready : STD_LOGIC;
    signal ctr_xor_block_U0_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal block_V_full_n : STD_LOGIC;
    signal assign_swap_endianness_1_U0_ap_start : STD_LOGIC;
    signal assign_swap_endianness_1_U0_ap_done : STD_LOGIC;
    signal assign_swap_endianness_1_U0_ap_continue : STD_LOGIC;
    signal assign_swap_endianness_1_U0_ap_idle : STD_LOGIC;
    signal assign_swap_endianness_1_U0_ap_ready : STD_LOGIC;
    signal assign_swap_endianness_1_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal assign_swap_endianness_1_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal assign_swap_endianness_1_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal assign_swap_endianness_1_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal assign_swap_endianness_1_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal assign_swap_endianness_1_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal assign_swap_endianness_1_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal assign_swap_endianness_1_U0_i_read : STD_LOGIC;
    signal assign_swap_endianness_1_U0_ciphertext_read : STD_LOGIC;
    signal ciphertext_c_full_n : STD_LOGIC;
    signal ciphertext_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal ciphertext_c_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal ciphertext_c_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal ciphertext_c_empty_n : STD_LOGIC;
    signal i_c_full_n : STD_LOGIC;
    signal i_c_dout : STD_LOGIC_VECTOR (59 downto 0);
    signal i_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal i_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal i_c_empty_n : STD_LOGIC;
    signal block_V1_out_tmp_channel_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal block_V1_out_tmp_channel_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal block_V1_out_tmp_channel_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal block_V1_out_tmp_channel_empty_n : STD_LOGIC;
    signal tmp_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_empty_n : STD_LOGIC;
    signal block_nonce_V_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal block_nonce_V_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal block_nonce_V_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal block_nonce_V_empty_n : STD_LOGIC;
    signal block_V_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal block_V_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal block_V_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal block_V_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_assign_swap_endianness_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_assign_swap_endianness_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_ctr_compute_nonce_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_ctr_compute_nonce_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_aes_encrypt_block_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_aes_encrypt_block_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pynqrypt_encrypt_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ciphertext : IN STD_LOGIC_VECTOR (63 downto 0);
        ciphertext_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        ciphertext_c_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        ciphertext_c_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        ciphertext_c_full_n : IN STD_LOGIC;
        ciphertext_c_write : OUT STD_LOGIC );
    end component;


    component pynqrypt_encrypt_assign_swap_endianness IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        i : IN STD_LOGIC_VECTOR (59 downto 0);
        plaintext : IN STD_LOGIC_VECTOR (63 downto 0);
        i_c_din : OUT STD_LOGIC_VECTOR (59 downto 0);
        i_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        i_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        i_c_full_n : IN STD_LOGIC;
        i_c_write : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component pynqrypt_encrypt_ctr_compute_nonce IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (95 downto 0);
        i : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component pynqrypt_encrypt_aes_encrypt_block IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        this_round_keys_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        this_round_keys_ce0 : OUT STD_LOGIC;
        this_round_keys_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component pynqrypt_encrypt_ctr_xor_block IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component pynqrypt_encrypt_assign_swap_endianness_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        i_dout : IN STD_LOGIC_VECTOR (59 downto 0);
        i_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        i_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        i_empty_n : IN STD_LOGIC;
        i_read : OUT STD_LOGIC;
        ciphertext_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        ciphertext_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        ciphertext_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        ciphertext_empty_n : IN STD_LOGIC;
        ciphertext_read : OUT STD_LOGIC );
    end component;


    component pynqrypt_encrypt_fifo_w64_d5_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component pynqrypt_encrypt_fifo_w60_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (59 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (59 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component pynqrypt_encrypt_fifo_w128_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component pynqrypt_encrypt_fifo_w128_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    entry_proc_U0 : component pynqrypt_encrypt_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => entry_proc_U0_ap_start,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        ciphertext => ciphertext,
        ciphertext_c_din => entry_proc_U0_ciphertext_c_din,
        ciphertext_c_num_data_valid => ciphertext_c_num_data_valid,
        ciphertext_c_fifo_cap => ciphertext_c_fifo_cap,
        ciphertext_c_full_n => ciphertext_c_full_n,
        ciphertext_c_write => entry_proc_U0_ciphertext_c_write);

    assign_swap_endianness_U0 : component pynqrypt_encrypt_assign_swap_endianness
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => assign_swap_endianness_U0_ap_start,
        ap_done => assign_swap_endianness_U0_ap_done,
        ap_continue => assign_swap_endianness_U0_ap_continue,
        ap_idle => assign_swap_endianness_U0_ap_idle,
        ap_ready => assign_swap_endianness_U0_ap_ready,
        m_axi_gmem_AWVALID => assign_swap_endianness_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => assign_swap_endianness_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => assign_swap_endianness_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => assign_swap_endianness_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => assign_swap_endianness_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => assign_swap_endianness_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => assign_swap_endianness_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => assign_swap_endianness_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => assign_swap_endianness_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => assign_swap_endianness_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => assign_swap_endianness_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => assign_swap_endianness_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => assign_swap_endianness_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => assign_swap_endianness_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => assign_swap_endianness_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => assign_swap_endianness_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => assign_swap_endianness_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => assign_swap_endianness_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => assign_swap_endianness_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR => assign_swap_endianness_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => assign_swap_endianness_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => assign_swap_endianness_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => assign_swap_endianness_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => assign_swap_endianness_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => assign_swap_endianness_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => assign_swap_endianness_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => assign_swap_endianness_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => assign_swap_endianness_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => assign_swap_endianness_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => assign_swap_endianness_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => m_axi_gmem_RVALID,
        m_axi_gmem_RREADY => assign_swap_endianness_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => m_axi_gmem_RDATA,
        m_axi_gmem_RLAST => m_axi_gmem_RLAST,
        m_axi_gmem_RID => m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM => m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER => m_axi_gmem_RUSER,
        m_axi_gmem_RRESP => m_axi_gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => assign_swap_endianness_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        i => i,
        plaintext => plaintext,
        i_c_din => assign_swap_endianness_U0_i_c_din,
        i_c_num_data_valid => i_c_num_data_valid,
        i_c_fifo_cap => i_c_fifo_cap,
        i_c_full_n => i_c_full_n,
        i_c_write => assign_swap_endianness_U0_i_c_write,
        ap_return => assign_swap_endianness_U0_ap_return);

    ctr_compute_nonce_U0 : component pynqrypt_encrypt_ctr_compute_nonce
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ctr_compute_nonce_U0_ap_start,
        ap_done => ctr_compute_nonce_U0_ap_done,
        ap_continue => ctr_compute_nonce_U0_ap_continue,
        ap_idle => ctr_compute_nonce_U0_ap_idle,
        ap_ready => ctr_compute_nonce_U0_ap_ready,
        p_read => p_read,
        i => ctr_compute_nonce_U0_i,
        ap_return => ctr_compute_nonce_U0_ap_return);

    aes_encrypt_block_U0 : component pynqrypt_encrypt_aes_encrypt_block
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => aes_encrypt_block_U0_ap_start,
        ap_done => aes_encrypt_block_U0_ap_done,
        ap_continue => aes_encrypt_block_U0_ap_continue,
        ap_idle => aes_encrypt_block_U0_ap_idle,
        ap_ready => aes_encrypt_block_U0_ap_ready,
        this_round_keys_address0 => aes_encrypt_block_U0_this_round_keys_address0,
        this_round_keys_ce0 => aes_encrypt_block_U0_this_round_keys_ce0,
        this_round_keys_q0 => this_round_keys_q0,
        p_read => tmp_dout,
        ap_return => aes_encrypt_block_U0_ap_return);

    ctr_xor_block_U0 : component pynqrypt_encrypt_ctr_xor_block
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ctr_xor_block_U0_ap_start,
        ap_done => ctr_xor_block_U0_ap_done,
        ap_continue => ctr_xor_block_U0_ap_continue,
        ap_idle => ctr_xor_block_U0_ap_idle,
        ap_ready => ctr_xor_block_U0_ap_ready,
        p_read => block_V1_out_tmp_channel_dout,
        p_read2 => block_nonce_V_dout,
        ap_return => ctr_xor_block_U0_ap_return);

    assign_swap_endianness_1_U0 : component pynqrypt_encrypt_assign_swap_endianness_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => assign_swap_endianness_1_U0_ap_start,
        ap_done => assign_swap_endianness_1_U0_ap_done,
        ap_continue => assign_swap_endianness_1_U0_ap_continue,
        ap_idle => assign_swap_endianness_1_U0_ap_idle,
        ap_ready => assign_swap_endianness_1_U0_ap_ready,
        p_read => block_V_dout,
        m_axi_gmem_AWVALID => assign_swap_endianness_1_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR => assign_swap_endianness_1_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => assign_swap_endianness_1_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => assign_swap_endianness_1_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => assign_swap_endianness_1_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => assign_swap_endianness_1_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => assign_swap_endianness_1_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => assign_swap_endianness_1_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => assign_swap_endianness_1_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => assign_swap_endianness_1_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => assign_swap_endianness_1_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => assign_swap_endianness_1_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => assign_swap_endianness_1_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => m_axi_gmem_WREADY,
        m_axi_gmem_WDATA => assign_swap_endianness_1_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => assign_swap_endianness_1_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => assign_swap_endianness_1_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => assign_swap_endianness_1_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => assign_swap_endianness_1_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => assign_swap_endianness_1_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => assign_swap_endianness_1_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => assign_swap_endianness_1_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => assign_swap_endianness_1_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => assign_swap_endianness_1_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => assign_swap_endianness_1_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => assign_swap_endianness_1_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => assign_swap_endianness_1_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => assign_swap_endianness_1_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => assign_swap_endianness_1_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => assign_swap_endianness_1_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => assign_swap_endianness_1_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => assign_swap_endianness_1_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv128_lc_2,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => m_axi_gmem_BVALID,
        m_axi_gmem_BREADY => assign_swap_endianness_1_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => m_axi_gmem_BRESP,
        m_axi_gmem_BID => m_axi_gmem_BID,
        m_axi_gmem_BUSER => m_axi_gmem_BUSER,
        i_dout => i_c_dout,
        i_num_data_valid => i_c_num_data_valid,
        i_fifo_cap => i_c_fifo_cap,
        i_empty_n => i_c_empty_n,
        i_read => assign_swap_endianness_1_U0_i_read,
        ciphertext_dout => ciphertext_c_dout,
        ciphertext_num_data_valid => ciphertext_c_num_data_valid,
        ciphertext_fifo_cap => ciphertext_c_fifo_cap,
        ciphertext_empty_n => ciphertext_c_empty_n,
        ciphertext_read => assign_swap_endianness_1_U0_ciphertext_read);

    ciphertext_c_U : component pynqrypt_encrypt_fifo_w64_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_ciphertext_c_din,
        if_full_n => ciphertext_c_full_n,
        if_write => entry_proc_U0_ciphertext_c_write,
        if_dout => ciphertext_c_dout,
        if_num_data_valid => ciphertext_c_num_data_valid,
        if_fifo_cap => ciphertext_c_fifo_cap,
        if_empty_n => ciphertext_c_empty_n,
        if_read => assign_swap_endianness_1_U0_ciphertext_read);

    i_c_U : component pynqrypt_encrypt_fifo_w60_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => assign_swap_endianness_U0_i_c_din,
        if_full_n => i_c_full_n,
        if_write => assign_swap_endianness_U0_i_c_write,
        if_dout => i_c_dout,
        if_num_data_valid => i_c_num_data_valid,
        if_fifo_cap => i_c_fifo_cap,
        if_empty_n => i_c_empty_n,
        if_read => assign_swap_endianness_1_U0_i_read);

    block_V1_out_tmp_channel_U : component pynqrypt_encrypt_fifo_w128_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => assign_swap_endianness_U0_ap_return,
        if_full_n => block_V1_out_tmp_channel_full_n,
        if_write => assign_swap_endianness_U0_ap_done,
        if_dout => block_V1_out_tmp_channel_dout,
        if_num_data_valid => block_V1_out_tmp_channel_num_data_valid,
        if_fifo_cap => block_V1_out_tmp_channel_fifo_cap,
        if_empty_n => block_V1_out_tmp_channel_empty_n,
        if_read => ctr_xor_block_U0_ap_ready);

    tmp_U : component pynqrypt_encrypt_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ctr_compute_nonce_U0_ap_return,
        if_full_n => tmp_full_n,
        if_write => ctr_compute_nonce_U0_ap_done,
        if_dout => tmp_dout,
        if_num_data_valid => tmp_num_data_valid,
        if_fifo_cap => tmp_fifo_cap,
        if_empty_n => tmp_empty_n,
        if_read => aes_encrypt_block_U0_ap_ready);

    block_nonce_V_U : component pynqrypt_encrypt_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => aes_encrypt_block_U0_ap_return,
        if_full_n => block_nonce_V_full_n,
        if_write => aes_encrypt_block_U0_ap_done,
        if_dout => block_nonce_V_dout,
        if_num_data_valid => block_nonce_V_num_data_valid,
        if_fifo_cap => block_nonce_V_fifo_cap,
        if_empty_n => block_nonce_V_empty_n,
        if_read => ctr_xor_block_U0_ap_ready);

    block_V_U : component pynqrypt_encrypt_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ctr_xor_block_U0_ap_return,
        if_full_n => block_V_full_n,
        if_write => ctr_xor_block_U0_ap_done,
        if_dout => block_V_dout,
        if_num_data_valid => block_V_num_data_valid,
        if_fifo_cap => block_V_fifo_cap,
        if_empty_n => block_V_empty_n,
        if_read => assign_swap_endianness_1_U0_ap_ready);





    ap_sync_reg_aes_encrypt_block_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_aes_encrypt_block_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_aes_encrypt_block_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_aes_encrypt_block_U0_ap_ready <= ap_sync_aes_encrypt_block_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_assign_swap_endianness_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_assign_swap_endianness_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_assign_swap_endianness_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_assign_swap_endianness_U0_ap_ready <= ap_sync_assign_swap_endianness_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_ctr_compute_nonce_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_ctr_compute_nonce_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_ctr_compute_nonce_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_ctr_compute_nonce_U0_ap_ready <= ap_sync_ctr_compute_nonce_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    aes_encrypt_block_U0_ap_continue <= block_nonce_V_full_n;
    aes_encrypt_block_U0_ap_start <= (tmp_empty_n and (ap_sync_reg_aes_encrypt_block_U0_ap_ready xor ap_const_logic_1) and ap_start);
    ap_done <= assign_swap_endianness_1_U0_ap_done;
    ap_idle <= ((block_V_empty_n xor ap_const_logic_1) and (block_nonce_V_empty_n xor ap_const_logic_1) and (tmp_empty_n xor ap_const_logic_1) and (block_V1_out_tmp_channel_empty_n xor ap_const_logic_1) and entry_proc_U0_ap_idle and ctr_xor_block_U0_ap_idle and ctr_compute_nonce_U0_ap_idle and assign_swap_endianness_U0_ap_idle and assign_swap_endianness_1_U0_ap_idle and aes_encrypt_block_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_aes_encrypt_block_U0_ap_ready <= (ap_sync_reg_aes_encrypt_block_U0_ap_ready or aes_encrypt_block_U0_ap_ready);
    ap_sync_assign_swap_endianness_U0_ap_ready <= (assign_swap_endianness_U0_ap_ready or ap_sync_reg_assign_swap_endianness_U0_ap_ready);
    ap_sync_ctr_compute_nonce_U0_ap_ready <= (ctr_compute_nonce_U0_ap_ready or ap_sync_reg_ctr_compute_nonce_U0_ap_ready);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_ready <= (ap_sync_entry_proc_U0_ap_ready and ap_sync_ctr_compute_nonce_U0_ap_ready and ap_sync_assign_swap_endianness_U0_ap_ready and ap_sync_aes_encrypt_block_U0_ap_ready);
    assign_swap_endianness_1_U0_ap_continue <= ap_continue;
    assign_swap_endianness_1_U0_ap_start <= block_V_empty_n;
    assign_swap_endianness_U0_ap_continue <= block_V1_out_tmp_channel_full_n;
    assign_swap_endianness_U0_ap_start <= ((ap_sync_reg_assign_swap_endianness_U0_ap_ready xor ap_const_logic_1) and ap_start);
    ctr_compute_nonce_U0_ap_continue <= tmp_full_n;
    ctr_compute_nonce_U0_ap_start <= ((ap_sync_reg_ctr_compute_nonce_U0_ap_ready xor ap_const_logic_1) and ap_start);
    
    ctr_compute_nonce_U0_i_proc : process(i)
    variable vlo_cpy : STD_LOGIC_VECTOR(60+60 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(60+60 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(60 - 1 downto 0);
    variable ctr_compute_nonce_U0_i_i : integer;
    variable section : STD_LOGIC_VECTOR(60 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(60 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(60 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv60_0(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv60_20(6 - 1 downto 0);
        v0_cpy := i;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(60-1-unsigned(ap_const_lv60_20(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(60-1-unsigned(ap_const_lv60_0(6-1 downto 0)));
            for ctr_compute_nonce_U0_i_i in 0 to 60-1 loop
                v0_cpy(ctr_compute_nonce_U0_i_i) := i(60-1-ctr_compute_nonce_U0_i_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(60-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        ctr_compute_nonce_U0_i <= resvalue(32-1 downto 0);
    end process;

    ctr_xor_block_U0_ap_continue <= block_V_full_n;
    ctr_xor_block_U0_ap_start <= (block_nonce_V_empty_n and block_V1_out_tmp_channel_empty_n);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    m_axi_gmem_ARADDR <= assign_swap_endianness_U0_m_axi_gmem_ARADDR;
    m_axi_gmem_ARBURST <= assign_swap_endianness_U0_m_axi_gmem_ARBURST;
    m_axi_gmem_ARCACHE <= assign_swap_endianness_U0_m_axi_gmem_ARCACHE;
    m_axi_gmem_ARID <= assign_swap_endianness_U0_m_axi_gmem_ARID;
    m_axi_gmem_ARLEN <= assign_swap_endianness_U0_m_axi_gmem_ARLEN;
    m_axi_gmem_ARLOCK <= assign_swap_endianness_U0_m_axi_gmem_ARLOCK;
    m_axi_gmem_ARPROT <= assign_swap_endianness_U0_m_axi_gmem_ARPROT;
    m_axi_gmem_ARQOS <= assign_swap_endianness_U0_m_axi_gmem_ARQOS;
    m_axi_gmem_ARREGION <= assign_swap_endianness_U0_m_axi_gmem_ARREGION;
    m_axi_gmem_ARSIZE <= assign_swap_endianness_U0_m_axi_gmem_ARSIZE;
    m_axi_gmem_ARUSER <= assign_swap_endianness_U0_m_axi_gmem_ARUSER;
    m_axi_gmem_ARVALID <= assign_swap_endianness_U0_m_axi_gmem_ARVALID;
    m_axi_gmem_AWADDR <= assign_swap_endianness_1_U0_m_axi_gmem_AWADDR;
    m_axi_gmem_AWBURST <= assign_swap_endianness_1_U0_m_axi_gmem_AWBURST;
    m_axi_gmem_AWCACHE <= assign_swap_endianness_1_U0_m_axi_gmem_AWCACHE;
    m_axi_gmem_AWID <= assign_swap_endianness_1_U0_m_axi_gmem_AWID;
    m_axi_gmem_AWLEN <= assign_swap_endianness_1_U0_m_axi_gmem_AWLEN;
    m_axi_gmem_AWLOCK <= assign_swap_endianness_1_U0_m_axi_gmem_AWLOCK;
    m_axi_gmem_AWPROT <= assign_swap_endianness_1_U0_m_axi_gmem_AWPROT;
    m_axi_gmem_AWQOS <= assign_swap_endianness_1_U0_m_axi_gmem_AWQOS;
    m_axi_gmem_AWREGION <= assign_swap_endianness_1_U0_m_axi_gmem_AWREGION;
    m_axi_gmem_AWSIZE <= assign_swap_endianness_1_U0_m_axi_gmem_AWSIZE;
    m_axi_gmem_AWUSER <= assign_swap_endianness_1_U0_m_axi_gmem_AWUSER;
    m_axi_gmem_AWVALID <= assign_swap_endianness_1_U0_m_axi_gmem_AWVALID;
    m_axi_gmem_BREADY <= assign_swap_endianness_1_U0_m_axi_gmem_BREADY;
    m_axi_gmem_RREADY <= assign_swap_endianness_U0_m_axi_gmem_RREADY;
    m_axi_gmem_WDATA <= assign_swap_endianness_1_U0_m_axi_gmem_WDATA;
    m_axi_gmem_WID <= assign_swap_endianness_1_U0_m_axi_gmem_WID;
    m_axi_gmem_WLAST <= assign_swap_endianness_1_U0_m_axi_gmem_WLAST;
    m_axi_gmem_WSTRB <= assign_swap_endianness_1_U0_m_axi_gmem_WSTRB;
    m_axi_gmem_WUSER <= assign_swap_endianness_1_U0_m_axi_gmem_WUSER;
    m_axi_gmem_WVALID <= assign_swap_endianness_1_U0_m_axi_gmem_WVALID;
    this_round_keys_address0 <= aes_encrypt_block_U0_this_round_keys_address0;
    this_round_keys_address1 <= ap_const_lv4_0;
    this_round_keys_ce0 <= aes_encrypt_block_U0_this_round_keys_ce0;
    this_round_keys_ce1 <= ap_const_logic_0;
    this_round_keys_d0 <= ap_const_lv128_lc_2;
    this_round_keys_d1 <= ap_const_lv128_lc_2;
    this_round_keys_we0 <= ap_const_logic_0;
    this_round_keys_we1 <= ap_const_logic_0;
end behav;
