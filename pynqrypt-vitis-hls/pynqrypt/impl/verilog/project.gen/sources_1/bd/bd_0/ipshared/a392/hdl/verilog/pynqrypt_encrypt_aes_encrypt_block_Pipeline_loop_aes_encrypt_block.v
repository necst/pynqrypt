// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pynqrypt_encrypt_aes_encrypt_block_Pipeline_loop_aes_encrypt_block (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xor_ln233,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1,
        p_out,
        p_out_ap_vld,
        conv6_i36_1_phi_out,
        conv6_i36_1_phi_out_ap_vld,
        conv6_i36_2_phi_out,
        conv6_i36_2_phi_out_ap_vld,
        conv6_i36_3_phi_out,
        conv6_i36_3_phi_out_ap_vld,
        conv6_i36_4_phi_out,
        conv6_i36_4_phi_out_ap_vld,
        conv6_i36_5_phi_out,
        conv6_i36_5_phi_out_ap_vld,
        conv6_i36_6_phi_out,
        conv6_i36_6_phi_out_ap_vld,
        conv6_i36_7_phi_out,
        conv6_i36_7_phi_out_ap_vld,
        conv6_i36_8_phi_out,
        conv6_i36_8_phi_out_ap_vld,
        conv6_i36_9_phi_out,
        conv6_i36_9_phi_out_ap_vld,
        conv6_i36_10_phi_out,
        conv6_i36_10_phi_out_ap_vld,
        conv6_i36_11_phi_out,
        conv6_i36_11_phi_out_ap_vld,
        conv6_i36_12_phi_out,
        conv6_i36_12_phi_out_ap_vld,
        conv6_i36_13_phi_out,
        conv6_i36_13_phi_out_ap_vld,
        conv6_i36_14_phi_out,
        conv6_i36_14_phi_out_ap_vld,
        conv6_i36_15_phi_out,
        conv6_i36_15_phi_out_ap_vld,
        crypto_aes_sbox_address0,
        crypto_aes_sbox_ce0,
        crypto_aes_sbox_q0,
        crypto_aes_sbox_address1,
        crypto_aes_sbox_ce1,
        crypto_aes_sbox_q1
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] xor_ln233;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;
output  [7:0] p_out;
output   p_out_ap_vld;
output  [7:0] conv6_i36_1_phi_out;
output   conv6_i36_1_phi_out_ap_vld;
output  [7:0] conv6_i36_2_phi_out;
output   conv6_i36_2_phi_out_ap_vld;
output  [7:0] conv6_i36_3_phi_out;
output   conv6_i36_3_phi_out_ap_vld;
output  [7:0] conv6_i36_4_phi_out;
output   conv6_i36_4_phi_out_ap_vld;
output  [7:0] conv6_i36_5_phi_out;
output   conv6_i36_5_phi_out_ap_vld;
output  [7:0] conv6_i36_6_phi_out;
output   conv6_i36_6_phi_out_ap_vld;
output  [7:0] conv6_i36_7_phi_out;
output   conv6_i36_7_phi_out_ap_vld;
output  [7:0] conv6_i36_8_phi_out;
output   conv6_i36_8_phi_out_ap_vld;
output  [7:0] conv6_i36_9_phi_out;
output   conv6_i36_9_phi_out_ap_vld;
output  [7:0] conv6_i36_10_phi_out;
output   conv6_i36_10_phi_out_ap_vld;
output  [7:0] conv6_i36_11_phi_out;
output   conv6_i36_11_phi_out_ap_vld;
output  [7:0] conv6_i36_12_phi_out;
output   conv6_i36_12_phi_out_ap_vld;
output  [7:0] conv6_i36_13_phi_out;
output   conv6_i36_13_phi_out_ap_vld;
output  [7:0] conv6_i36_14_phi_out;
output   conv6_i36_14_phi_out_ap_vld;
output  [7:0] conv6_i36_15_phi_out;
output   conv6_i36_15_phi_out_ap_vld;
output  [7:0] crypto_aes_sbox_address0;
output   crypto_aes_sbox_ce0;
input  [7:0] crypto_aes_sbox_q0;
output  [7:0] crypto_aes_sbox_address1;
output   crypto_aes_sbox_ce1;
input  [7:0] crypto_aes_sbox_q1;

reg ap_idle;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[7:0] state_d1;
reg p_out_ap_vld;
reg conv6_i36_1_phi_out_ap_vld;
reg conv6_i36_2_phi_out_ap_vld;
reg conv6_i36_3_phi_out_ap_vld;
reg conv6_i36_4_phi_out_ap_vld;
reg conv6_i36_5_phi_out_ap_vld;
reg conv6_i36_6_phi_out_ap_vld;
reg conv6_i36_7_phi_out_ap_vld;
reg conv6_i36_8_phi_out_ap_vld;
reg conv6_i36_9_phi_out_ap_vld;
reg conv6_i36_10_phi_out_ap_vld;
reg conv6_i36_11_phi_out_ap_vld;
reg conv6_i36_12_phi_out_ap_vld;
reg conv6_i36_13_phi_out_ap_vld;
reg conv6_i36_14_phi_out_ap_vld;
reg conv6_i36_15_phi_out_ap_vld;
reg[7:0] crypto_aes_sbox_address0;
reg crypto_aes_sbox_ce0;
reg[7:0] crypto_aes_sbox_address1;
reg crypto_aes_sbox_ce1;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln54_fu_761_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state15;
wire    ap_block_state15_pp0_stage14_iter0;
reg   [7:0] pynqrypt_round_keys_address0;
reg    pynqrypt_round_keys_ce0;
wire   [7:0] pynqrypt_round_keys_q0;
reg   [7:0] pynqrypt_round_keys_address1;
reg    pynqrypt_round_keys_ce1;
wire   [7:0] pynqrypt_round_keys_q1;
reg   [7:0] reg_729;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_CS_fsm_state5;
wire    ap_block_state5_pp0_stage4_iter0;
reg   [7:0] reg_734;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_CS_fsm_state9;
wire    ap_block_state9_pp0_stage8_iter0;
reg   [7:0] reg_738;
wire    ap_CS_fsm_state8;
wire    ap_block_state8_pp0_stage7_iter0;
reg   [7:0] reg_743;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
wire   [7:0] shl_ln1_fu_775_p3;
reg   [7:0] shl_ln1_reg_2181;
reg   [7:0] tmp3_reg_2209;
reg   [7:0] pynqrypt_round_keys_load_reg_2226;
reg   [7:0] pynqrypt_round_keys_load_1_reg_2251;
reg   [7:0] pynqrypt_round_keys_load_2_reg_2256;
reg   [7:0] crypto_aes_sbox_load_11_reg_2281;
reg   [7:0] pynqrypt_round_keys_load_3_reg_2289;
reg   [7:0] pynqrypt_round_keys_load_4_reg_2294;
reg   [7:0] crypto_aes_sbox_load_2_reg_2309;
reg   [7:0] crypto_aes_sbox_load_3_reg_2316;
wire   [7:0] tmp2_12_fu_910_p2;
reg   [7:0] tmp2_12_reg_2334;
wire   [7:0] xor_ln109_7_fu_916_p2;
reg   [7:0] xor_ln109_7_reg_2341;
reg   [7:0] pynqrypt_round_keys_load_6_reg_2346;
reg   [7:0] tmp3_1_reg_2361;
wire    ap_CS_fsm_state6;
wire    ap_block_state6_pp0_stage5_iter0;
reg   [7:0] crypto_aes_sbox_load_5_reg_2368;
reg   [7:0] pynqrypt_round_keys_load_7_reg_2385;
reg   [7:0] pynqrypt_round_keys_load_8_reg_2390;
reg   [7:0] crypto_aes_sbox_load_7_reg_2405;
wire    ap_CS_fsm_state7;
wire    ap_block_state7_pp0_stage6_iter0;
reg   [7:0] crypto_aes_sbox_load_15_reg_2423;
reg   [7:0] pynqrypt_round_keys_load_9_reg_2431;
reg   [7:0] pynqrypt_round_keys_load_10_reg_2436;
reg   [7:0] crypto_aes_sbox_load_9_reg_2451;
wire   [7:0] tmp1_3_fu_1063_p2;
reg   [7:0] tmp1_3_reg_2468;
reg   [7:0] pynqrypt_round_keys_load_11_reg_2473;
wire   [7:0] xor_ln233_15_fu_1685_p2;
reg   [7:0] xor_ln233_15_reg_2493;
wire    ap_CS_fsm_state10;
wire    ap_block_state10_pp0_stage9_iter0;
wire   [7:0] xor_ln233_19_fu_1707_p2;
reg   [7:0] xor_ln233_19_reg_2498;
wire   [7:0] xor_ln233_23_fu_1730_p2;
reg   [7:0] xor_ln233_23_reg_2503;
wire   [7:0] xor_ln233_27_fu_1752_p2;
reg   [7:0] xor_ln233_27_reg_2508;
wire   [7:0] xor_ln233_30_fu_1769_p2;
reg   [7:0] xor_ln233_30_reg_2513;
wire   [7:0] xor_ln233_34_fu_1792_p2;
reg   [7:0] xor_ln233_34_reg_2518;
wire   [7:0] xor_ln233_38_fu_1815_p2;
reg   [7:0] xor_ln233_38_reg_2523;
wire   [7:0] xor_ln233_42_fu_1837_p2;
reg   [7:0] xor_ln233_42_reg_2528;
wire   [7:0] xor_ln233_43_fu_1854_p2;
reg   [7:0] xor_ln233_43_reg_2533;
wire   [63:0] zext_ln72_fu_770_p1;
wire   [63:0] zext_ln233_fu_783_p1;
wire   [63:0] zext_ln233_15_fu_794_p1;
wire   [63:0] zext_ln72_1_fu_810_p1;
wire   [63:0] zext_ln72_12_fu_815_p1;
wire   [63:0] zext_ln233_1_fu_825_p1;
wire   [63:0] zext_ln233_2_fu_835_p1;
wire   [63:0] zext_ln72_6_fu_840_p1;
wire   [63:0] zext_ln72_11_fu_845_p1;
wire   [63:0] zext_ln233_3_fu_855_p1;
wire   [63:0] zext_ln233_4_fu_865_p1;
wire   [63:0] zext_ln72_2_fu_870_p1;
wire   [63:0] zext_ln72_3_fu_875_p1;
wire   [63:0] zext_ln233_5_fu_885_p1;
wire   [63:0] zext_ln233_6_fu_895_p1;
wire   [63:0] zext_ln72_4_fu_900_p1;
wire   [63:0] zext_ln72_5_fu_905_p1;
wire   [63:0] zext_ln233_7_fu_954_p1;
wire   [63:0] zext_ln233_8_fu_964_p1;
wire   [63:0] zext_ln72_7_fu_993_p1;
wire   [63:0] zext_ln72_15_fu_998_p1;
wire   [63:0] zext_ln233_9_fu_1008_p1;
wire   [63:0] zext_ln233_10_fu_1018_p1;
wire   [63:0] zext_ln72_8_fu_1023_p1;
wire   [63:0] zext_ln72_9_fu_1028_p1;
wire   [63:0] zext_ln233_11_fu_1038_p1;
wire   [63:0] zext_ln233_12_fu_1048_p1;
wire   [63:0] zext_ln72_10_fu_1053_p1;
wire   [63:0] zext_ln72_13_fu_1058_p1;
wire   [63:0] zext_ln233_13_fu_1117_p1;
wire   [63:0] zext_ln233_14_fu_1127_p1;
wire   [63:0] zext_ln72_14_fu_1137_p1;
reg   [7:0] conv6_i36_15_phi_fu_138;
wire   [7:0] xor_ln233_47_fu_981_p2;
reg   [7:0] conv6_i36_14_phi_fu_142;
wire   [7:0] xor_ln233_46_fu_1237_p2;
reg   [7:0] conv6_i36_13_phi_fu_146;
wire   [7:0] xor_ln233_45_fu_1214_p2;
reg   [7:0] conv6_i36_12_phi_fu_150;
wire   [7:0] xor_ln233_44_fu_1105_p2;
reg   [7:0] conv6_i36_11_phi_fu_154;
reg   [7:0] conv6_i36_10_phi_fu_158;
reg   [7:0] conv6_i36_9_phi_fu_162;
reg   [7:0] conv6_i36_8_phi_fu_166;
reg   [7:0] conv6_i36_7_phi_fu_170;
reg   [7:0] conv6_i36_6_phi_fu_174;
reg   [7:0] conv6_i36_5_phi_fu_178;
reg   [7:0] conv6_i36_4_phi_fu_182;
reg   [7:0] conv6_i36_3_phi_fu_186;
reg   [7:0] conv6_i36_2_phi_fu_190;
wire   [7:0] xor_ln233_12_fu_1667_p2;
reg   [7:0] conv6_i36_1_phi_fu_194;
wire   [7:0] xor_ln233_8_fu_1644_p2;
reg   [7:0] empty_fu_198;
wire   [7:0] xor_ln233_4_fu_1622_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_p_load18;
reg   [3:0] i_fu_202;
wire   [3:0] add_ln54_fu_799_p2;
reg   [3:0] ap_sig_allocacmp_i_7;
wire    ap_CS_fsm_state11;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_CS_fsm_state12;
wire    ap_block_state12_pp0_stage11_iter0;
wire    ap_CS_fsm_state13;
wire    ap_block_state13_pp0_stage12_iter0;
wire    ap_CS_fsm_state14;
wire    ap_block_state14_pp0_stage13_iter0;
wire   [7:0] or_ln233_14_fu_788_p2;
wire   [7:0] or_ln233_fu_820_p2;
wire   [7:0] or_ln233_1_fu_830_p2;
wire   [7:0] or_ln233_2_fu_850_p2;
wire   [7:0] or_ln233_3_fu_860_p2;
wire   [7:0] or_ln233_4_fu_880_p2;
wire   [7:0] or_ln233_5_fu_890_p2;
wire   [7:0] tmp2_15_fu_922_p2;
wire   [0:0] tmp_16_fu_933_p3;
wire   [7:0] or_ln233_6_fu_949_p2;
wire   [7:0] or_ln233_7_fu_959_p2;
wire   [7:0] select_ln227_fu_941_p3;
wire   [7:0] shl_ln239_15_fu_927_p2;
wire   [7:0] xor_ln233_60_fu_975_p2;
wire   [7:0] xor_ln233_59_fu_969_p2;
wire   [7:0] or_ln233_8_fu_1003_p2;
wire   [7:0] or_ln233_9_fu_1013_p2;
wire   [7:0] or_ln233_10_fu_1033_p2;
wire   [7:0] or_ln233_11_fu_1043_p2;
wire   [0:0] tmp_13_fu_1072_p3;
wire   [7:0] shl_ln239_12_fu_1067_p2;
wire   [7:0] xor_ln233_51_fu_1093_p2;
wire   [7:0] select_ln114_3_fu_1079_p3;
wire   [7:0] xor_ln233_52_fu_1099_p2;
wire   [7:0] xor_ln233_50_fu_1087_p2;
wire   [7:0] or_ln233_12_fu_1112_p2;
wire   [7:0] or_ln233_13_fu_1122_p2;
wire   [7:0] tmp2_13_fu_1142_p2;
wire   [0:0] tmp_14_fu_1154_p3;
wire   [7:0] tmp2_14_fu_1170_p2;
wire   [0:0] tmp_15_fu_1181_p3;
wire   [7:0] shl_ln239_13_fu_1148_p2;
wire   [7:0] xor_ln233_54_fu_1203_p2;
wire   [7:0] select_ln118_3_fu_1162_p3;
wire   [7:0] xor_ln233_55_fu_1208_p2;
wire   [7:0] xor_ln233_53_fu_1197_p2;
wire   [7:0] select_ln122_3_fu_1189_p3;
wire   [7:0] xor_ln233_57_fu_1226_p2;
wire   [7:0] shl_ln239_14_fu_1175_p2;
wire   [7:0] xor_ln233_58_fu_1231_p2;
wire   [7:0] xor_ln233_56_fu_1221_p2;
wire   [7:0] tmp2_fu_1254_p2;
wire   [7:0] xor_ln109_1_fu_1258_p2;
wire   [0:0] tmp_fu_1275_p3;
wire   [7:0] tmp2_1_fu_1291_p2;
wire   [0:0] tmp_2_fu_1302_p3;
wire   [7:0] tmp2_2_fu_1318_p2;
wire   [0:0] tmp_3_fu_1329_p3;
wire   [7:0] tmp2_3_fu_1345_p2;
wire   [0:0] tmp_4_fu_1355_p3;
wire   [7:0] tmp2_4_fu_1371_p2;
wire   [7:0] xor_ln109_3_fu_1375_p2;
wire   [0:0] tmp_5_fu_1392_p3;
wire   [7:0] tmp2_5_fu_1408_p2;
wire   [0:0] tmp_6_fu_1419_p3;
wire   [7:0] tmp2_6_fu_1435_p2;
wire   [0:0] tmp_7_fu_1446_p3;
wire   [7:0] tmp2_7_fu_1462_p2;
wire   [0:0] tmp_8_fu_1472_p3;
wire   [7:0] tmp2_8_fu_1488_p2;
wire   [7:0] xor_ln109_5_fu_1494_p2;
wire   [0:0] tmp_9_fu_1510_p3;
wire   [7:0] tmp2_9_fu_1526_p2;
wire   [0:0] tmp_10_fu_1537_p3;
wire   [7:0] tmp2_10_fu_1553_p2;
wire   [0:0] tmp_11_fu_1563_p3;
wire   [7:0] tmp2_11_fu_1579_p2;
wire   [0:0] tmp_12_fu_1590_p3;
wire   [7:0] select_ln114_fu_1283_p3;
wire   [7:0] tmp1_fu_1264_p2;
wire   [7:0] xor_ln233_2_fu_1610_p2;
wire   [7:0] shl_ln239_fu_1269_p2;
wire   [7:0] xor_ln233_3_fu_1616_p2;
wire   [7:0] xor_ln233_1_fu_1606_p2;
wire   [7:0] shl_ln239_1_fu_1296_p2;
wire   [7:0] xor_ln233_6_fu_1632_p2;
wire   [7:0] select_ln118_fu_1310_p3;
wire   [7:0] xor_ln233_7_fu_1638_p2;
wire   [7:0] xor_ln233_5_fu_1628_p2;
wire   [7:0] select_ln122_fu_1337_p3;
wire   [7:0] xor_ln233_10_fu_1655_p2;
wire   [7:0] shl_ln239_2_fu_1323_p2;
wire   [7:0] xor_ln233_11_fu_1661_p2;
wire   [7:0] xor_ln233_9_fu_1651_p2;
wire   [7:0] select_ln104_fu_1363_p3;
wire   [7:0] shl_ln239_3_fu_1349_p2;
wire   [7:0] xor_ln233_14_fu_1679_p2;
wire   [7:0] xor_ln233_13_fu_1674_p2;
wire   [7:0] tmp1_1_fu_1381_p2;
wire   [7:0] shl_ln239_4_fu_1386_p2;
wire   [7:0] xor_ln233_17_fu_1695_p2;
wire   [7:0] select_ln114_1_fu_1400_p3;
wire   [7:0] xor_ln233_18_fu_1701_p2;
wire   [7:0] xor_ln233_16_fu_1691_p2;
wire   [7:0] shl_ln239_5_fu_1413_p2;
wire   [7:0] xor_ln233_21_fu_1718_p2;
wire   [7:0] select_ln118_1_fu_1427_p3;
wire   [7:0] xor_ln233_22_fu_1724_p2;
wire   [7:0] xor_ln233_20_fu_1713_p2;
wire   [7:0] select_ln122_1_fu_1454_p3;
wire   [7:0] xor_ln233_25_fu_1740_p2;
wire   [7:0] shl_ln239_6_fu_1440_p2;
wire   [7:0] xor_ln233_26_fu_1746_p2;
wire   [7:0] xor_ln233_24_fu_1736_p2;
wire   [7:0] select_ln104_1_fu_1480_p3;
wire   [7:0] shl_ln239_7_fu_1466_p2;
wire   [7:0] xor_ln233_29_fu_1763_p2;
wire   [7:0] xor_ln233_28_fu_1758_p2;
wire   [7:0] tmp1_2_fu_1499_p2;
wire   [7:0] shl_ln239_8_fu_1504_p2;
wire   [7:0] xor_ln233_32_fu_1780_p2;
wire   [7:0] select_ln114_2_fu_1518_p3;
wire   [7:0] xor_ln233_33_fu_1786_p2;
wire   [7:0] xor_ln233_31_fu_1775_p2;
wire   [7:0] shl_ln239_9_fu_1531_p2;
wire   [7:0] xor_ln233_36_fu_1803_p2;
wire   [7:0] select_ln118_2_fu_1545_p3;
wire   [7:0] xor_ln233_37_fu_1809_p2;
wire   [7:0] xor_ln233_35_fu_1798_p2;
wire   [7:0] select_ln122_2_fu_1571_p3;
wire   [7:0] xor_ln233_40_fu_1825_p2;
wire   [7:0] shl_ln239_10_fu_1557_p2;
wire   [7:0] xor_ln233_41_fu_1831_p2;
wire   [7:0] xor_ln233_39_fu_1821_p2;
wire   [7:0] select_ln104_2_fu_1598_p3;
wire   [7:0] shl_ln239_11_fu_1584_p2;
wire   [7:0] xor_ln233_49_fu_1848_p2;
wire   [7:0] xor_ln233_48_fu_1843_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [14:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
#0 ap_done_reg = 1'b0;
end

pynqrypt_encrypt_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_pynqrypt_round_keys_ROM_AUTbkb #(
    .DataWidth( 8 ),
    .AddressRange( 176 ),
    .AddressWidth( 8 ))
pynqrypt_round_keys_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pynqrypt_round_keys_address0),
    .ce0(pynqrypt_round_keys_ce0),
    .q0(pynqrypt_round_keys_q0),
    .address1(pynqrypt_round_keys_address1),
    .ce1(pynqrypt_round_keys_ce1),
    .q1(pynqrypt_round_keys_q1)
);

pynqrypt_encrypt_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        empty_fu_198 <= xor_ln233;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        empty_fu_198 <= xor_ln233_4_fu_1622_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln54_fu_761_p2 == 1'd0)) begin
            i_fu_202 <= add_ln54_fu_799_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_202 <= 4'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        reg_729 <= pynqrypt_round_keys_q1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        reg_729 <= pynqrypt_round_keys_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        reg_738 <= crypto_aes_sbox_q1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        reg_738 <= crypto_aes_sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        reg_743 <= crypto_aes_sbox_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        reg_743 <= crypto_aes_sbox_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        conv6_i36_10_phi_fu_158 <= xor_ln233_42_fu_1837_p2;
        conv6_i36_11_phi_fu_154 <= xor_ln233_43_fu_1854_p2;
        conv6_i36_1_phi_fu_194 <= xor_ln233_8_fu_1644_p2;
        conv6_i36_2_phi_fu_190 <= xor_ln233_12_fu_1667_p2;
        conv6_i36_3_phi_fu_186 <= xor_ln233_15_fu_1685_p2;
        conv6_i36_4_phi_fu_182 <= xor_ln233_19_fu_1707_p2;
        conv6_i36_5_phi_fu_178 <= xor_ln233_23_fu_1730_p2;
        conv6_i36_6_phi_fu_174 <= xor_ln233_27_fu_1752_p2;
        conv6_i36_7_phi_fu_170 <= xor_ln233_30_fu_1769_p2;
        conv6_i36_8_phi_fu_166 <= xor_ln233_34_fu_1792_p2;
        conv6_i36_9_phi_fu_162 <= xor_ln233_38_fu_1815_p2;
        xor_ln233_15_reg_2493 <= xor_ln233_15_fu_1685_p2;
        xor_ln233_19_reg_2498 <= xor_ln233_19_fu_1707_p2;
        xor_ln233_23_reg_2503 <= xor_ln233_23_fu_1730_p2;
        xor_ln233_27_reg_2508 <= xor_ln233_27_fu_1752_p2;
        xor_ln233_30_reg_2513 <= xor_ln233_30_fu_1769_p2;
        xor_ln233_34_reg_2518 <= xor_ln233_34_fu_1792_p2;
        xor_ln233_38_reg_2523 <= xor_ln233_38_fu_1815_p2;
        xor_ln233_42_reg_2528 <= xor_ln233_42_fu_1837_p2;
        xor_ln233_43_reg_2533 <= xor_ln233_43_fu_1854_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv6_i36_12_phi_fu_150 <= xor_ln233_44_fu_1105_p2;
        crypto_aes_sbox_load_9_reg_2451 <= crypto_aes_sbox_q0;
        pynqrypt_round_keys_load_11_reg_2473 <= pynqrypt_round_keys_q1;
        tmp1_3_reg_2468 <= tmp1_3_fu_1063_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv6_i36_13_phi_fu_146 <= xor_ln233_45_fu_1214_p2;
        conv6_i36_14_phi_fu_142 <= xor_ln233_46_fu_1237_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv6_i36_15_phi_fu_138 <= xor_ln233_47_fu_981_p2;
        crypto_aes_sbox_load_2_reg_2309 <= crypto_aes_sbox_q1;
        crypto_aes_sbox_load_3_reg_2316 <= crypto_aes_sbox_q0;
        pynqrypt_round_keys_load_6_reg_2346 <= pynqrypt_round_keys_q0;
        tmp2_12_reg_2334 <= tmp2_12_fu_910_p2;
        xor_ln109_7_reg_2341 <= xor_ln109_7_fu_916_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        crypto_aes_sbox_load_11_reg_2281 <= crypto_aes_sbox_q0;
        pynqrypt_round_keys_load_3_reg_2289 <= pynqrypt_round_keys_q1;
        pynqrypt_round_keys_load_4_reg_2294 <= pynqrypt_round_keys_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        crypto_aes_sbox_load_15_reg_2423 <= crypto_aes_sbox_q0;
        crypto_aes_sbox_load_7_reg_2405 <= crypto_aes_sbox_q1;
        pynqrypt_round_keys_load_10_reg_2436 <= pynqrypt_round_keys_q0;
        pynqrypt_round_keys_load_9_reg_2431 <= pynqrypt_round_keys_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        crypto_aes_sbox_load_5_reg_2368 <= crypto_aes_sbox_q0;
        pynqrypt_round_keys_load_7_reg_2385 <= pynqrypt_round_keys_q1;
        pynqrypt_round_keys_load_8_reg_2390 <= pynqrypt_round_keys_q0;
        tmp3_1_reg_2361 <= crypto_aes_sbox_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        pynqrypt_round_keys_load_1_reg_2251 <= pynqrypt_round_keys_q1;
        pynqrypt_round_keys_load_2_reg_2256 <= pynqrypt_round_keys_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pynqrypt_round_keys_load_reg_2226 <= pynqrypt_round_keys_q1;
        tmp3_reg_2209 <= crypto_aes_sbox_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_734 <= crypto_aes_sbox_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_761_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        shl_ln1_reg_2181[7 : 4] <= shl_ln1_fu_775_p3[7 : 4];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln54_fu_761_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_7 = 4'd1;
    end else begin
        ap_sig_allocacmp_i_7 = i_fu_202;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_p_load18 = xor_ln233;
    end else begin
        ap_sig_allocacmp_p_load18 = empty_fu_198;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_761_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        conv6_i36_10_phi_out_ap_vld = 1'b1;
    end else begin
        conv6_i36_10_phi_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_761_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        conv6_i36_11_phi_out_ap_vld = 1'b1;
    end else begin
        conv6_i36_11_phi_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_761_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        conv6_i36_12_phi_out_ap_vld = 1'b1;
    end else begin
        conv6_i36_12_phi_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_761_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        conv6_i36_13_phi_out_ap_vld = 1'b1;
    end else begin
        conv6_i36_13_phi_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_761_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        conv6_i36_14_phi_out_ap_vld = 1'b1;
    end else begin
        conv6_i36_14_phi_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_761_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        conv6_i36_15_phi_out_ap_vld = 1'b1;
    end else begin
        conv6_i36_15_phi_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_761_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        conv6_i36_1_phi_out_ap_vld = 1'b1;
    end else begin
        conv6_i36_1_phi_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_761_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        conv6_i36_2_phi_out_ap_vld = 1'b1;
    end else begin
        conv6_i36_2_phi_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_761_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        conv6_i36_3_phi_out_ap_vld = 1'b1;
    end else begin
        conv6_i36_3_phi_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_761_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        conv6_i36_4_phi_out_ap_vld = 1'b1;
    end else begin
        conv6_i36_4_phi_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_761_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        conv6_i36_5_phi_out_ap_vld = 1'b1;
    end else begin
        conv6_i36_5_phi_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_761_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        conv6_i36_6_phi_out_ap_vld = 1'b1;
    end else begin
        conv6_i36_6_phi_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_761_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        conv6_i36_7_phi_out_ap_vld = 1'b1;
    end else begin
        conv6_i36_7_phi_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_761_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        conv6_i36_8_phi_out_ap_vld = 1'b1;
    end else begin
        conv6_i36_8_phi_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_761_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        conv6_i36_9_phi_out_ap_vld = 1'b1;
    end else begin
        conv6_i36_9_phi_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        crypto_aes_sbox_address0 = zext_ln72_14_fu_1137_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        crypto_aes_sbox_address0 = zext_ln72_13_fu_1058_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        crypto_aes_sbox_address0 = zext_ln72_9_fu_1028_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        crypto_aes_sbox_address0 = zext_ln72_15_fu_998_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        crypto_aes_sbox_address0 = zext_ln72_5_fu_905_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        crypto_aes_sbox_address0 = zext_ln72_3_fu_875_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        crypto_aes_sbox_address0 = zext_ln72_11_fu_845_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        crypto_aes_sbox_address0 = zext_ln72_12_fu_815_p1;
    end else if (((icmp_ln54_fu_761_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        crypto_aes_sbox_address0 = zext_ln72_fu_770_p1;
    end else begin
        crypto_aes_sbox_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        crypto_aes_sbox_address1 = zext_ln72_10_fu_1053_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        crypto_aes_sbox_address1 = zext_ln72_8_fu_1023_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        crypto_aes_sbox_address1 = zext_ln72_7_fu_993_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        crypto_aes_sbox_address1 = zext_ln72_4_fu_900_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        crypto_aes_sbox_address1 = zext_ln72_2_fu_870_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        crypto_aes_sbox_address1 = zext_ln72_6_fu_840_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        crypto_aes_sbox_address1 = zext_ln72_1_fu_810_p1;
    end else begin
        crypto_aes_sbox_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | ((icmp_ln54_fu_761_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        crypto_aes_sbox_ce0 = 1'b1;
    end else begin
        crypto_aes_sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        crypto_aes_sbox_ce1 = 1'b1;
    end else begin
        crypto_aes_sbox_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_761_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        pynqrypt_round_keys_address0 = zext_ln233_14_fu_1127_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        pynqrypt_round_keys_address0 = zext_ln233_12_fu_1048_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        pynqrypt_round_keys_address0 = zext_ln233_10_fu_1018_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        pynqrypt_round_keys_address0 = zext_ln233_8_fu_964_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        pynqrypt_round_keys_address0 = zext_ln233_6_fu_895_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        pynqrypt_round_keys_address0 = zext_ln233_4_fu_865_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pynqrypt_round_keys_address0 = zext_ln233_2_fu_835_p1;
    end else if (((icmp_ln54_fu_761_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        pynqrypt_round_keys_address0 = zext_ln233_15_fu_794_p1;
    end else begin
        pynqrypt_round_keys_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        pynqrypt_round_keys_address1 = zext_ln233_13_fu_1117_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        pynqrypt_round_keys_address1 = zext_ln233_11_fu_1038_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        pynqrypt_round_keys_address1 = zext_ln233_9_fu_1008_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        pynqrypt_round_keys_address1 = zext_ln233_7_fu_954_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        pynqrypt_round_keys_address1 = zext_ln233_5_fu_885_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        pynqrypt_round_keys_address1 = zext_ln233_3_fu_855_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pynqrypt_round_keys_address1 = zext_ln233_1_fu_825_p1;
    end else if (((icmp_ln54_fu_761_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        pynqrypt_round_keys_address1 = zext_ln233_fu_783_p1;
    end else begin
        pynqrypt_round_keys_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | ((icmp_ln54_fu_761_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        pynqrypt_round_keys_ce0 = 1'b1;
    end else begin
        pynqrypt_round_keys_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | ((icmp_ln54_fu_761_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        pynqrypt_round_keys_ce1 = 1'b1;
    end else begin
        pynqrypt_round_keys_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = 64'd15;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4))) begin
        state_address0 = 64'd5;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state3))) begin
        state_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = 64'd11;
    end else if (((icmp_ln54_fu_761_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        state_address0 = 64'd12;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        state_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address1 = 64'd7;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state4))) begin
        state_address1 = 64'd4;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3))) begin
        state_address1 = 64'd2;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state2))) begin
        state_address1 = 64'd6;
    end else if (((icmp_ln54_fu_761_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        state_address1 = 64'd1;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | ((icmp_ln54_fu_761_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | ((icmp_ln54_fu_761_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        state_d0 = xor_ln233_38_reg_2523;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_d0 = xor_ln233_30_reg_2513;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_d0 = xor_ln233_23_reg_2503;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_d0 = xor_ln233_15_reg_2493;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_d0 = xor_ln233_8_fu_1644_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_d0 = xor_ln233_45_fu_1214_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_d0 = xor_ln233_47_fu_981_p2;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        state_d1 = xor_ln233_43_reg_2533;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_d1 = xor_ln233_42_reg_2528;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_d1 = xor_ln233_34_reg_2518;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_d1 = xor_ln233_27_reg_2508;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_d1 = xor_ln233_19_reg_2498;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_d1 = xor_ln233_12_fu_1667_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_d1 = xor_ln233_46_fu_1237_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_d1 = xor_ln233_44_fu_1105_p2;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        state_we0 = 1'b1;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln54_fu_761_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_fu_799_p2 = (ap_sig_allocacmp_i_7 + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv6_i36_10_phi_out = conv6_i36_10_phi_fu_158;

assign conv6_i36_11_phi_out = conv6_i36_11_phi_fu_154;

assign conv6_i36_12_phi_out = conv6_i36_12_phi_fu_150;

assign conv6_i36_13_phi_out = conv6_i36_13_phi_fu_146;

assign conv6_i36_14_phi_out = conv6_i36_14_phi_fu_142;

assign conv6_i36_15_phi_out = conv6_i36_15_phi_fu_138;

assign conv6_i36_1_phi_out = conv6_i36_1_phi_fu_194;

assign conv6_i36_2_phi_out = conv6_i36_2_phi_fu_190;

assign conv6_i36_3_phi_out = conv6_i36_3_phi_fu_186;

assign conv6_i36_4_phi_out = conv6_i36_4_phi_fu_182;

assign conv6_i36_5_phi_out = conv6_i36_5_phi_fu_178;

assign conv6_i36_6_phi_out = conv6_i36_6_phi_fu_174;

assign conv6_i36_7_phi_out = conv6_i36_7_phi_fu_170;

assign conv6_i36_8_phi_out = conv6_i36_8_phi_fu_166;

assign conv6_i36_9_phi_out = conv6_i36_9_phi_fu_162;

assign icmp_ln54_fu_761_p2 = ((ap_sig_allocacmp_i_7 == 4'd10) ? 1'b1 : 1'b0);

assign or_ln233_10_fu_1033_p2 = (shl_ln1_reg_2181 | 8'd11);

assign or_ln233_11_fu_1043_p2 = (shl_ln1_reg_2181 | 8'd12);

assign or_ln233_12_fu_1112_p2 = (shl_ln1_reg_2181 | 8'd13);

assign or_ln233_13_fu_1122_p2 = (shl_ln1_reg_2181 | 8'd14);

assign or_ln233_14_fu_788_p2 = (shl_ln1_fu_775_p3 | 8'd15);

assign or_ln233_1_fu_830_p2 = (shl_ln1_reg_2181 | 8'd2);

assign or_ln233_2_fu_850_p2 = (shl_ln1_reg_2181 | 8'd3);

assign or_ln233_3_fu_860_p2 = (shl_ln1_reg_2181 | 8'd4);

assign or_ln233_4_fu_880_p2 = (shl_ln1_reg_2181 | 8'd5);

assign or_ln233_5_fu_890_p2 = (shl_ln1_reg_2181 | 8'd6);

assign or_ln233_6_fu_949_p2 = (shl_ln1_reg_2181 | 8'd7);

assign or_ln233_7_fu_959_p2 = (shl_ln1_reg_2181 | 8'd8);

assign or_ln233_8_fu_1003_p2 = (shl_ln1_reg_2181 | 8'd9);

assign or_ln233_9_fu_1013_p2 = (shl_ln1_reg_2181 | 8'd10);

assign or_ln233_fu_820_p2 = (shl_ln1_reg_2181 | 8'd1);

assign p_out = empty_fu_198;

assign select_ln104_1_fu_1480_p3 = ((tmp_8_fu_1472_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln104_2_fu_1598_p3 = ((tmp_12_fu_1590_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln104_fu_1363_p3 = ((tmp_4_fu_1355_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln114_1_fu_1400_p3 = ((tmp_5_fu_1392_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln114_2_fu_1518_p3 = ((tmp_9_fu_1510_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln114_3_fu_1079_p3 = ((tmp_13_fu_1072_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln114_fu_1283_p3 = ((tmp_fu_1275_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln118_1_fu_1427_p3 = ((tmp_6_fu_1419_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln118_2_fu_1545_p3 = ((tmp_10_fu_1537_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln118_3_fu_1162_p3 = ((tmp_14_fu_1154_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln118_fu_1310_p3 = ((tmp_2_fu_1302_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln122_1_fu_1454_p3 = ((tmp_7_fu_1446_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln122_2_fu_1571_p3 = ((tmp_11_fu_1563_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln122_3_fu_1189_p3 = ((tmp_15_fu_1181_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln122_fu_1337_p3 = ((tmp_3_fu_1329_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln227_fu_941_p3 = ((tmp_16_fu_933_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign shl_ln1_fu_775_p3 = {{ap_sig_allocacmp_i_7}, {4'd0}};

assign shl_ln239_10_fu_1557_p2 = tmp2_10_fu_1553_p2 << 8'd1;

assign shl_ln239_11_fu_1584_p2 = tmp2_11_fu_1579_p2 << 8'd1;

assign shl_ln239_12_fu_1067_p2 = tmp2_12_reg_2334 << 8'd1;

assign shl_ln239_13_fu_1148_p2 = tmp2_13_fu_1142_p2 << 8'd1;

assign shl_ln239_14_fu_1175_p2 = tmp2_14_fu_1170_p2 << 8'd1;

assign shl_ln239_15_fu_927_p2 = tmp2_15_fu_922_p2 << 8'd1;

assign shl_ln239_1_fu_1296_p2 = tmp2_1_fu_1291_p2 << 8'd1;

assign shl_ln239_2_fu_1323_p2 = tmp2_2_fu_1318_p2 << 8'd1;

assign shl_ln239_3_fu_1349_p2 = tmp2_3_fu_1345_p2 << 8'd1;

assign shl_ln239_4_fu_1386_p2 = tmp2_4_fu_1371_p2 << 8'd1;

assign shl_ln239_5_fu_1413_p2 = tmp2_5_fu_1408_p2 << 8'd1;

assign shl_ln239_6_fu_1440_p2 = tmp2_6_fu_1435_p2 << 8'd1;

assign shl_ln239_7_fu_1466_p2 = tmp2_7_fu_1462_p2 << 8'd1;

assign shl_ln239_8_fu_1504_p2 = tmp2_8_fu_1488_p2 << 8'd1;

assign shl_ln239_9_fu_1531_p2 = tmp2_9_fu_1526_p2 << 8'd1;

assign shl_ln239_fu_1269_p2 = tmp2_fu_1254_p2 << 8'd1;

assign tmp1_1_fu_1381_p2 = (xor_ln109_3_fu_1375_p2 ^ crypto_aes_sbox_load_3_reg_2316);

assign tmp1_2_fu_1499_p2 = (xor_ln109_5_fu_1494_p2 ^ crypto_aes_sbox_load_7_reg_2405);

assign tmp1_3_fu_1063_p2 = (xor_ln109_7_reg_2341 ^ crypto_aes_sbox_load_11_reg_2281);

assign tmp1_fu_1264_p2 = (xor_ln109_1_fu_1258_p2 ^ crypto_aes_sbox_load_15_reg_2423);

assign tmp2_10_fu_1553_p2 = (crypto_aes_sbox_load_7_reg_2405 ^ crypto_aes_sbox_load_2_reg_2309);

assign tmp2_11_fu_1579_p2 = (reg_738 ^ crypto_aes_sbox_load_7_reg_2405);

assign tmp2_12_fu_910_p2 = (reg_738 ^ reg_734);

assign tmp2_13_fu_1142_p2 = (reg_743 ^ reg_734);

assign tmp2_14_fu_1170_p2 = (reg_743 ^ crypto_aes_sbox_load_11_reg_2281);

assign tmp2_15_fu_922_p2 = (reg_738 ^ crypto_aes_sbox_load_11_reg_2281);

assign tmp2_1_fu_1291_p2 = (reg_734 ^ crypto_aes_sbox_load_5_reg_2368);

assign tmp2_2_fu_1318_p2 = (reg_734 ^ crypto_aes_sbox_load_15_reg_2423);

assign tmp2_3_fu_1345_p2 = (tmp3_reg_2209 ^ crypto_aes_sbox_load_15_reg_2423);

assign tmp2_4_fu_1371_p2 = (tmp3_1_reg_2361 ^ crypto_aes_sbox_load_9_reg_2451);

assign tmp2_5_fu_1408_p2 = (crypto_aes_sbox_q0 ^ crypto_aes_sbox_load_9_reg_2451);

assign tmp2_6_fu_1435_p2 = (crypto_aes_sbox_q0 ^ crypto_aes_sbox_load_3_reg_2316);

assign tmp2_7_fu_1462_p2 = (tmp3_1_reg_2361 ^ crypto_aes_sbox_load_3_reg_2316);

assign tmp2_8_fu_1488_p2 = (reg_743 ^ reg_738);

assign tmp2_9_fu_1526_p2 = (reg_743 ^ crypto_aes_sbox_load_2_reg_2309);

assign tmp2_fu_1254_p2 = (tmp3_reg_2209 ^ crypto_aes_sbox_load_5_reg_2368);

assign tmp_10_fu_1537_p3 = tmp2_9_fu_1526_p2[32'd7];

assign tmp_11_fu_1563_p3 = tmp2_10_fu_1553_p2[32'd7];

assign tmp_12_fu_1590_p3 = tmp2_11_fu_1579_p2[32'd7];

assign tmp_13_fu_1072_p3 = tmp2_12_reg_2334[32'd7];

assign tmp_14_fu_1154_p3 = tmp2_13_fu_1142_p2[32'd7];

assign tmp_15_fu_1181_p3 = tmp2_14_fu_1170_p2[32'd7];

assign tmp_16_fu_933_p3 = tmp2_15_fu_922_p2[32'd7];

assign tmp_2_fu_1302_p3 = tmp2_1_fu_1291_p2[32'd7];

assign tmp_3_fu_1329_p3 = tmp2_2_fu_1318_p2[32'd7];

assign tmp_4_fu_1355_p3 = tmp2_3_fu_1345_p2[32'd7];

assign tmp_5_fu_1392_p3 = tmp2_4_fu_1371_p2[32'd7];

assign tmp_6_fu_1419_p3 = tmp2_5_fu_1408_p2[32'd7];

assign tmp_7_fu_1446_p3 = tmp2_6_fu_1435_p2[32'd7];

assign tmp_8_fu_1472_p3 = tmp2_7_fu_1462_p2[32'd7];

assign tmp_9_fu_1510_p3 = tmp2_8_fu_1488_p2[32'd7];

assign tmp_fu_1275_p3 = tmp2_fu_1254_p2[32'd7];

assign xor_ln109_1_fu_1258_p2 = (tmp2_fu_1254_p2 ^ reg_734);

assign xor_ln109_3_fu_1375_p2 = (tmp2_4_fu_1371_p2 ^ crypto_aes_sbox_q0);

assign xor_ln109_5_fu_1494_p2 = (tmp2_8_fu_1488_p2 ^ crypto_aes_sbox_load_2_reg_2309);

assign xor_ln109_7_fu_916_p2 = (tmp2_12_fu_910_p2 ^ reg_743);

assign xor_ln233_10_fu_1655_p2 = (tmp2_fu_1254_p2 ^ select_ln122_fu_1337_p3);

assign xor_ln233_11_fu_1661_p2 = (xor_ln233_10_fu_1655_p2 ^ shl_ln239_2_fu_1323_p2);

assign xor_ln233_12_fu_1667_p2 = (xor_ln233_9_fu_1651_p2 ^ xor_ln233_11_fu_1661_p2);

assign xor_ln233_13_fu_1674_p2 = (xor_ln109_1_fu_1258_p2 ^ pynqrypt_round_keys_load_3_reg_2289);

assign xor_ln233_14_fu_1679_p2 = (shl_ln239_3_fu_1349_p2 ^ select_ln104_fu_1363_p3);

assign xor_ln233_15_fu_1685_p2 = (xor_ln233_14_fu_1679_p2 ^ xor_ln233_13_fu_1674_p2);

assign xor_ln233_16_fu_1691_p2 = (tmp3_1_reg_2361 ^ pynqrypt_round_keys_load_4_reg_2294);

assign xor_ln233_17_fu_1695_p2 = (tmp1_1_fu_1381_p2 ^ shl_ln239_4_fu_1386_p2);

assign xor_ln233_18_fu_1701_p2 = (xor_ln233_17_fu_1695_p2 ^ select_ln114_1_fu_1400_p3);

assign xor_ln233_19_fu_1707_p2 = (xor_ln233_18_fu_1701_p2 ^ xor_ln233_16_fu_1691_p2);

assign xor_ln233_1_fu_1606_p2 = (tmp3_reg_2209 ^ pynqrypt_round_keys_load_reg_2226);

assign xor_ln233_20_fu_1713_p2 = (reg_729 ^ crypto_aes_sbox_load_9_reg_2451);

assign xor_ln233_21_fu_1718_p2 = (tmp1_1_fu_1381_p2 ^ shl_ln239_5_fu_1413_p2);

assign xor_ln233_22_fu_1724_p2 = (xor_ln233_21_fu_1718_p2 ^ select_ln118_1_fu_1427_p3);

assign xor_ln233_23_fu_1730_p2 = (xor_ln233_22_fu_1724_p2 ^ xor_ln233_20_fu_1713_p2);

assign xor_ln233_24_fu_1736_p2 = (pynqrypt_round_keys_load_6_reg_2346 ^ crypto_aes_sbox_load_3_reg_2316);

assign xor_ln233_25_fu_1740_p2 = (tmp2_4_fu_1371_p2 ^ select_ln122_1_fu_1454_p3);

assign xor_ln233_26_fu_1746_p2 = (xor_ln233_25_fu_1740_p2 ^ shl_ln239_6_fu_1440_p2);

assign xor_ln233_27_fu_1752_p2 = (xor_ln233_26_fu_1746_p2 ^ xor_ln233_24_fu_1736_p2);

assign xor_ln233_28_fu_1758_p2 = (xor_ln109_3_fu_1375_p2 ^ pynqrypt_round_keys_load_7_reg_2385);

assign xor_ln233_29_fu_1763_p2 = (shl_ln239_7_fu_1466_p2 ^ select_ln104_1_fu_1480_p3);

assign xor_ln233_2_fu_1610_p2 = (tmp1_fu_1264_p2 ^ select_ln114_fu_1283_p3);

assign xor_ln233_30_fu_1769_p2 = (xor_ln233_29_fu_1763_p2 ^ xor_ln233_28_fu_1758_p2);

assign xor_ln233_31_fu_1775_p2 = (reg_738 ^ pynqrypt_round_keys_load_8_reg_2390);

assign xor_ln233_32_fu_1780_p2 = (tmp1_2_fu_1499_p2 ^ shl_ln239_8_fu_1504_p2);

assign xor_ln233_33_fu_1786_p2 = (xor_ln233_32_fu_1780_p2 ^ select_ln114_2_fu_1518_p3);

assign xor_ln233_34_fu_1792_p2 = (xor_ln233_33_fu_1786_p2 ^ xor_ln233_31_fu_1775_p2);

assign xor_ln233_35_fu_1798_p2 = (reg_743 ^ pynqrypt_round_keys_load_9_reg_2431);

assign xor_ln233_36_fu_1803_p2 = (tmp1_2_fu_1499_p2 ^ shl_ln239_9_fu_1531_p2);

assign xor_ln233_37_fu_1809_p2 = (xor_ln233_36_fu_1803_p2 ^ select_ln118_2_fu_1545_p3);

assign xor_ln233_38_fu_1815_p2 = (xor_ln233_37_fu_1809_p2 ^ xor_ln233_35_fu_1798_p2);

assign xor_ln233_39_fu_1821_p2 = (pynqrypt_round_keys_load_10_reg_2436 ^ crypto_aes_sbox_load_7_reg_2405);

assign xor_ln233_3_fu_1616_p2 = (xor_ln233_2_fu_1610_p2 ^ shl_ln239_fu_1269_p2);

assign xor_ln233_40_fu_1825_p2 = (tmp2_8_fu_1488_p2 ^ select_ln122_2_fu_1571_p3);

assign xor_ln233_41_fu_1831_p2 = (xor_ln233_40_fu_1825_p2 ^ shl_ln239_10_fu_1557_p2);

assign xor_ln233_42_fu_1837_p2 = (xor_ln233_41_fu_1831_p2 ^ xor_ln233_39_fu_1821_p2);

assign xor_ln233_43_fu_1854_p2 = (xor_ln233_49_fu_1848_p2 ^ xor_ln233_48_fu_1843_p2);

assign xor_ln233_44_fu_1105_p2 = (xor_ln233_52_fu_1099_p2 ^ xor_ln233_50_fu_1087_p2);

assign xor_ln233_45_fu_1214_p2 = (xor_ln233_55_fu_1208_p2 ^ xor_ln233_53_fu_1197_p2);

assign xor_ln233_46_fu_1237_p2 = (xor_ln233_58_fu_1231_p2 ^ xor_ln233_56_fu_1221_p2);

assign xor_ln233_47_fu_981_p2 = (xor_ln233_60_fu_975_p2 ^ xor_ln233_59_fu_969_p2);

assign xor_ln233_48_fu_1843_p2 = (xor_ln109_5_fu_1494_p2 ^ pynqrypt_round_keys_load_11_reg_2473);

assign xor_ln233_49_fu_1848_p2 = (shl_ln239_11_fu_1584_p2 ^ select_ln104_2_fu_1598_p3);

assign xor_ln233_4_fu_1622_p2 = (xor_ln233_3_fu_1616_p2 ^ xor_ln233_1_fu_1606_p2);

assign xor_ln233_50_fu_1087_p2 = (reg_738 ^ pynqrypt_round_keys_q0);

assign xor_ln233_51_fu_1093_p2 = (tmp1_3_fu_1063_p2 ^ shl_ln239_12_fu_1067_p2);

assign xor_ln233_52_fu_1099_p2 = (xor_ln233_51_fu_1093_p2 ^ select_ln114_3_fu_1079_p3);

assign xor_ln233_53_fu_1197_p2 = (reg_734 ^ pynqrypt_round_keys_q1);

assign xor_ln233_54_fu_1203_p2 = (tmp1_3_reg_2468 ^ shl_ln239_13_fu_1148_p2);

assign xor_ln233_55_fu_1208_p2 = (xor_ln233_54_fu_1203_p2 ^ select_ln118_3_fu_1162_p3);

assign xor_ln233_56_fu_1221_p2 = (pynqrypt_round_keys_q0 ^ crypto_aes_sbox_load_11_reg_2281);

assign xor_ln233_57_fu_1226_p2 = (tmp2_12_reg_2334 ^ select_ln122_3_fu_1189_p3);

assign xor_ln233_58_fu_1231_p2 = (xor_ln233_57_fu_1226_p2 ^ shl_ln239_14_fu_1175_p2);

assign xor_ln233_59_fu_969_p2 = (xor_ln109_7_fu_916_p2 ^ reg_729);

assign xor_ln233_5_fu_1628_p2 = (pynqrypt_round_keys_load_1_reg_2251 ^ crypto_aes_sbox_load_5_reg_2368);

assign xor_ln233_60_fu_975_p2 = (shl_ln239_15_fu_927_p2 ^ select_ln227_fu_941_p3);

assign xor_ln233_6_fu_1632_p2 = (tmp1_fu_1264_p2 ^ shl_ln239_1_fu_1296_p2);

assign xor_ln233_7_fu_1638_p2 = (xor_ln233_6_fu_1632_p2 ^ select_ln118_fu_1310_p3);

assign xor_ln233_8_fu_1644_p2 = (xor_ln233_7_fu_1638_p2 ^ xor_ln233_5_fu_1628_p2);

assign xor_ln233_9_fu_1651_p2 = (pynqrypt_round_keys_load_2_reg_2256 ^ crypto_aes_sbox_load_15_reg_2423);

assign zext_ln233_10_fu_1018_p1 = or_ln233_9_fu_1013_p2;

assign zext_ln233_11_fu_1038_p1 = or_ln233_10_fu_1033_p2;

assign zext_ln233_12_fu_1048_p1 = or_ln233_11_fu_1043_p2;

assign zext_ln233_13_fu_1117_p1 = or_ln233_12_fu_1112_p2;

assign zext_ln233_14_fu_1127_p1 = or_ln233_13_fu_1122_p2;

assign zext_ln233_15_fu_794_p1 = or_ln233_14_fu_788_p2;

assign zext_ln233_1_fu_825_p1 = or_ln233_fu_820_p2;

assign zext_ln233_2_fu_835_p1 = or_ln233_1_fu_830_p2;

assign zext_ln233_3_fu_855_p1 = or_ln233_2_fu_850_p2;

assign zext_ln233_4_fu_865_p1 = or_ln233_3_fu_860_p2;

assign zext_ln233_5_fu_885_p1 = or_ln233_4_fu_880_p2;

assign zext_ln233_6_fu_895_p1 = or_ln233_5_fu_890_p2;

assign zext_ln233_7_fu_954_p1 = or_ln233_6_fu_949_p2;

assign zext_ln233_8_fu_964_p1 = or_ln233_7_fu_959_p2;

assign zext_ln233_9_fu_1008_p1 = or_ln233_8_fu_1003_p2;

assign zext_ln233_fu_783_p1 = shl_ln1_fu_775_p3;

assign zext_ln72_10_fu_1053_p1 = state_q0;

assign zext_ln72_11_fu_845_p1 = state_q0;

assign zext_ln72_12_fu_815_p1 = state_q0;

assign zext_ln72_13_fu_1058_p1 = state_q1;

assign zext_ln72_14_fu_1137_p1 = state_q0;

assign zext_ln72_15_fu_998_p1 = state_q0;

assign zext_ln72_1_fu_810_p1 = state_q1;

assign zext_ln72_2_fu_870_p1 = state_q1;

assign zext_ln72_3_fu_875_p1 = state_q0;

assign zext_ln72_4_fu_900_p1 = state_q1;

assign zext_ln72_5_fu_905_p1 = state_q0;

assign zext_ln72_6_fu_840_p1 = state_q1;

assign zext_ln72_7_fu_993_p1 = state_q1;

assign zext_ln72_8_fu_1023_p1 = state_q0;

assign zext_ln72_9_fu_1028_p1 = state_q1;

assign zext_ln72_fu_770_p1 = ap_sig_allocacmp_p_load18;

always @ (posedge ap_clk) begin
    shl_ln1_reg_2181[3:0] <= 4'b0000;
end

endmodule //pynqrypt_encrypt_aes_encrypt_block_Pipeline_loop_aes_encrypt_block
