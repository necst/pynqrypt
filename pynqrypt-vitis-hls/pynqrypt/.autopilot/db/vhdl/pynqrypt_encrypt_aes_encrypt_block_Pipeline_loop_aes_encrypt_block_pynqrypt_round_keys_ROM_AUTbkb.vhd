-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pynqrypt_encrypt_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_pynqrypt_round_keys_ROM_AUTbkb is 
    generic(
             DataWidth     : integer := 8; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 176
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);
 
          address1        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce1             : in std_logic; 
          q1              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of pynqrypt_encrypt_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_pynqrypt_round_keys_ROM_AUTbkb is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0);  
signal address1_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "01101001", 1 => "01110010", 2 => "00110110", 3 => "01111100", 
    4 => "01000110", 5 => "01001101", 6 => "10001010", 7 => "10100001", 
    8 => "01111110", 9 => "10100100", 10 => "10110001", 11 => "01000100", 
    12 => "01001011", 13 => "10000010", 14 => "00000010", 15 => "10010110", 
    16 => "01111011", 17 => "00000101", 18 => "10100110", 19 => "11001111", 
    20 => "00111101", 21 => "01001000", 22 => "00101100", 23 => "01101110", 
    24 => "01000011", 25 => "11101100", 26 => "10011101", 27 => "00101010", 
    28 => "00001000", 29 => "01101110", 30 => "10011111", 31 => "10111100", 
    32 => "11100110", 33 => "11011110", 34 => "11000011", 35 => "11111111", 
    36 => "11011011", 37 => "10010110", 38 => "11101111", 39 => "10010001", 
    40 => "10011000", 41 => "01111010", 42 => "01110010", 43 => "10111011", 
    44 => "10010000", 45 => "00010100", 46 => "11101101", 47 => "00000111", 
    48 => "00011000", 49 => "10001011", 50 => "00000110", 51 => "10011111", 
    52 => "11000011", 53 => "00011101", 54 => "11101001", 55 => "00001110", 
    56 => "01011011", 57 => "01100111", 58 => "10011011", 59 => "10110101", 
    60 => "11001011", 61 => "01110011", 62 => "01110110", 63 => "10110010", 
    64 => "10011111", 65 => "10110011", 66 => "00110001", 67 => "10000000", 
    68 => "01011100", 69 => "10101110", 70 => "11011000", 71 => "10001110", 
    72 => "00000111", 73 => "11001001", 74 => "01000011", 75 => "00111011", 
    76 => "11001100", 77 => "10111010", 78 => "00110101", 79 => "10001001", 
    80 => "01111011", 81 => "00100101", 82 => "10010110", 83 => "11001011", 
    84 => "00100111", 85 => "10001011", 86 => "01001110", 87 => "01000101", 
    88 => "00100000", 89 => "01000010", 90 => "00001101", 91 => "01111110", 
    92 => "11101100", 93 => "11111000", 94 => "00111000", 95 => "11110111", 
    96 => "00011010", 97 => "00100010", 98 => "11111110", 99 => "00000101", 
    100 => "00111101", 101 => "10101001", 102 => "10110000", 103 => "01000000", 
    104 => "00011101", 105 => "11101011", 106 => "10111101", 107 => "00111110", 
    108 => "11110001", 109 => "00010011", 110 => "10000101", 111 => "11001001", 
    112 => "00100111", 113 => "10110101", 114 => "00100011", 115 => "10100100", 
    116 => "00011010", 117 => "00011100", 118 => "10010011", 119 => "11100100", 
    120 => "00000111", 121 => "11110111", 122 => "00101110", 123 => "11011010", 
    124 => "11110110", 125 => "11100100", 126 => "10101011", 127 => "00010011", 
    128 => "11001110", 129 => "11010111", 130 => "01011110", 131 => "11100110", 
    132 => "11010100", 133 => "11001011", 134 => "11001101", 135 => "00000010", 
    136 => "11010011", 137 => "00111100", 138 => "11100011", 139 => "11011000", 
    140 => "00100101", 141 => "11011000", 142 => "01001000", 143 => "11001011", 
    144 => "10110100", 145 => "10000101", 146 => "01000001", 147 => "11011001", 
    148 => "01100000", 149 => "01001110", 150 => "10001100", 151 => "11011011", 
    152 => "10110011", 153 => "01110010", 154 => "01101111", 155 => "00000011", 
    156 => "10010110", 157 => "10101010", 158 => "00100111", 159 => "11001000", 
    160 => "00101110", 161 => "01001001", 162 => "10101001", 163 => "01001001", 
    164 => "01001110", 165 => "00000111", 166 => "00100101", 167 => "10010010", 
    168 => "11111101", 169 => "01110101", 170 => "01001010", 171 => "10010001", 
    172 => "01101011", 173 => "11011111", 174 => "01101101", 175 => "01011001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;
 
memory_access_guard_1: process (address1) 
begin
      address1_tmp <= address1;
--synthesis translate_off
      if (CONV_INTEGER(address1) > AddressRange-1) then
           address1_tmp <= (others => '0');
      else 
           address1_tmp <= address1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;
 
        if (ce1 = '1') then  
            q1 <= mem0(CONV_INTEGER(address1_tmp)); 
        end if;

end if;
end process;

end rtl;

