// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pynqrypt_encrypt_dataflow_in_loop_loop_ctr_encrypt (
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        i,
        plaintext,
        p_read,
        this_round_keys_address0,
        this_round_keys_ce0,
        this_round_keys_d0,
        this_round_keys_q0,
        this_round_keys_we0,
        this_round_keys_address1,
        this_round_keys_ce1,
        this_round_keys_d1,
        this_round_keys_q1,
        this_round_keys_we1,
        ciphertext,
        ap_clk,
        ap_rst,
        ciphertext_ap_vld,
        ap_start,
        i_ap_vld,
        plaintext_ap_vld,
        p_read_ap_vld,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [127:0] m_axi_gmem_WDATA;
output  [15:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [127:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [59:0] i;
input  [63:0] plaintext;
input  [95:0] p_read;
output  [3:0] this_round_keys_address0;
output   this_round_keys_ce0;
output  [127:0] this_round_keys_d0;
input  [127:0] this_round_keys_q0;
output   this_round_keys_we0;
output  [3:0] this_round_keys_address1;
output   this_round_keys_ce1;
output  [127:0] this_round_keys_d1;
input  [127:0] this_round_keys_q1;
output   this_round_keys_we1;
input  [63:0] ciphertext;
input   ap_clk;
input   ap_rst;
input   ciphertext_ap_vld;
input   ap_start;
input   i_ap_vld;
input   plaintext_ap_vld;
input   p_read_ap_vld;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    entry_proc_U0_ap_start;
wire    entry_proc_U0_ap_done;
wire    entry_proc_U0_ap_continue;
wire    entry_proc_U0_ap_idle;
wire    entry_proc_U0_ap_ready;
wire   [63:0] entry_proc_U0_ciphertext_c_din;
wire    entry_proc_U0_ciphertext_c_write;
wire    assign_swap_endianness_U0_ap_start;
wire    assign_swap_endianness_U0_ap_done;
wire    assign_swap_endianness_U0_ap_continue;
wire    assign_swap_endianness_U0_ap_idle;
wire    assign_swap_endianness_U0_ap_ready;
wire    assign_swap_endianness_U0_m_axi_gmem_AWVALID;
wire   [63:0] assign_swap_endianness_U0_m_axi_gmem_AWADDR;
wire   [0:0] assign_swap_endianness_U0_m_axi_gmem_AWID;
wire   [31:0] assign_swap_endianness_U0_m_axi_gmem_AWLEN;
wire   [2:0] assign_swap_endianness_U0_m_axi_gmem_AWSIZE;
wire   [1:0] assign_swap_endianness_U0_m_axi_gmem_AWBURST;
wire   [1:0] assign_swap_endianness_U0_m_axi_gmem_AWLOCK;
wire   [3:0] assign_swap_endianness_U0_m_axi_gmem_AWCACHE;
wire   [2:0] assign_swap_endianness_U0_m_axi_gmem_AWPROT;
wire   [3:0] assign_swap_endianness_U0_m_axi_gmem_AWQOS;
wire   [3:0] assign_swap_endianness_U0_m_axi_gmem_AWREGION;
wire   [0:0] assign_swap_endianness_U0_m_axi_gmem_AWUSER;
wire    assign_swap_endianness_U0_m_axi_gmem_WVALID;
wire   [127:0] assign_swap_endianness_U0_m_axi_gmem_WDATA;
wire   [15:0] assign_swap_endianness_U0_m_axi_gmem_WSTRB;
wire    assign_swap_endianness_U0_m_axi_gmem_WLAST;
wire   [0:0] assign_swap_endianness_U0_m_axi_gmem_WID;
wire   [0:0] assign_swap_endianness_U0_m_axi_gmem_WUSER;
wire    assign_swap_endianness_U0_m_axi_gmem_ARVALID;
wire   [63:0] assign_swap_endianness_U0_m_axi_gmem_ARADDR;
wire   [0:0] assign_swap_endianness_U0_m_axi_gmem_ARID;
wire   [31:0] assign_swap_endianness_U0_m_axi_gmem_ARLEN;
wire   [2:0] assign_swap_endianness_U0_m_axi_gmem_ARSIZE;
wire   [1:0] assign_swap_endianness_U0_m_axi_gmem_ARBURST;
wire   [1:0] assign_swap_endianness_U0_m_axi_gmem_ARLOCK;
wire   [3:0] assign_swap_endianness_U0_m_axi_gmem_ARCACHE;
wire   [2:0] assign_swap_endianness_U0_m_axi_gmem_ARPROT;
wire   [3:0] assign_swap_endianness_U0_m_axi_gmem_ARQOS;
wire   [3:0] assign_swap_endianness_U0_m_axi_gmem_ARREGION;
wire   [0:0] assign_swap_endianness_U0_m_axi_gmem_ARUSER;
wire    assign_swap_endianness_U0_m_axi_gmem_RREADY;
wire    assign_swap_endianness_U0_m_axi_gmem_BREADY;
wire   [59:0] assign_swap_endianness_U0_i_c_din;
wire    assign_swap_endianness_U0_i_c_write;
wire   [127:0] assign_swap_endianness_U0_ap_return;
wire    block_V1_out_tmp_channel_full_n;
wire    ctr_compute_nonce_U0_ap_start;
wire    ctr_compute_nonce_U0_ap_done;
wire    ctr_compute_nonce_U0_ap_continue;
wire    ctr_compute_nonce_U0_ap_idle;
wire    ctr_compute_nonce_U0_ap_ready;
wire   [31:0] ctr_compute_nonce_U0_i;
wire   [127:0] ctr_compute_nonce_U0_ap_return;
wire    tmp_full_n;
wire    aes_encrypt_block_U0_ap_start;
wire    aes_encrypt_block_U0_ap_done;
wire    aes_encrypt_block_U0_ap_continue;
wire    aes_encrypt_block_U0_ap_idle;
wire    aes_encrypt_block_U0_ap_ready;
wire   [3:0] aes_encrypt_block_U0_this_round_keys_address0;
wire    aes_encrypt_block_U0_this_round_keys_ce0;
wire   [127:0] aes_encrypt_block_U0_ap_return;
wire    block_nonce_V_full_n;
wire    ctr_xor_block_U0_ap_start;
wire    ctr_xor_block_U0_ap_done;
wire    ctr_xor_block_U0_ap_continue;
wire    ctr_xor_block_U0_ap_idle;
wire    ctr_xor_block_U0_ap_ready;
wire   [127:0] ctr_xor_block_U0_ap_return;
wire    block_V_full_n;
wire    assign_swap_endianness_1_U0_ap_start;
wire    assign_swap_endianness_1_U0_ap_done;
wire    assign_swap_endianness_1_U0_ap_continue;
wire    assign_swap_endianness_1_U0_ap_idle;
wire    assign_swap_endianness_1_U0_ap_ready;
wire    assign_swap_endianness_1_U0_m_axi_gmem_AWVALID;
wire   [63:0] assign_swap_endianness_1_U0_m_axi_gmem_AWADDR;
wire   [0:0] assign_swap_endianness_1_U0_m_axi_gmem_AWID;
wire   [31:0] assign_swap_endianness_1_U0_m_axi_gmem_AWLEN;
wire   [2:0] assign_swap_endianness_1_U0_m_axi_gmem_AWSIZE;
wire   [1:0] assign_swap_endianness_1_U0_m_axi_gmem_AWBURST;
wire   [1:0] assign_swap_endianness_1_U0_m_axi_gmem_AWLOCK;
wire   [3:0] assign_swap_endianness_1_U0_m_axi_gmem_AWCACHE;
wire   [2:0] assign_swap_endianness_1_U0_m_axi_gmem_AWPROT;
wire   [3:0] assign_swap_endianness_1_U0_m_axi_gmem_AWQOS;
wire   [3:0] assign_swap_endianness_1_U0_m_axi_gmem_AWREGION;
wire   [0:0] assign_swap_endianness_1_U0_m_axi_gmem_AWUSER;
wire    assign_swap_endianness_1_U0_m_axi_gmem_WVALID;
wire   [127:0] assign_swap_endianness_1_U0_m_axi_gmem_WDATA;
wire   [15:0] assign_swap_endianness_1_U0_m_axi_gmem_WSTRB;
wire    assign_swap_endianness_1_U0_m_axi_gmem_WLAST;
wire   [0:0] assign_swap_endianness_1_U0_m_axi_gmem_WID;
wire   [0:0] assign_swap_endianness_1_U0_m_axi_gmem_WUSER;
wire    assign_swap_endianness_1_U0_m_axi_gmem_ARVALID;
wire   [63:0] assign_swap_endianness_1_U0_m_axi_gmem_ARADDR;
wire   [0:0] assign_swap_endianness_1_U0_m_axi_gmem_ARID;
wire   [31:0] assign_swap_endianness_1_U0_m_axi_gmem_ARLEN;
wire   [2:0] assign_swap_endianness_1_U0_m_axi_gmem_ARSIZE;
wire   [1:0] assign_swap_endianness_1_U0_m_axi_gmem_ARBURST;
wire   [1:0] assign_swap_endianness_1_U0_m_axi_gmem_ARLOCK;
wire   [3:0] assign_swap_endianness_1_U0_m_axi_gmem_ARCACHE;
wire   [2:0] assign_swap_endianness_1_U0_m_axi_gmem_ARPROT;
wire   [3:0] assign_swap_endianness_1_U0_m_axi_gmem_ARQOS;
wire   [3:0] assign_swap_endianness_1_U0_m_axi_gmem_ARREGION;
wire   [0:0] assign_swap_endianness_1_U0_m_axi_gmem_ARUSER;
wire    assign_swap_endianness_1_U0_m_axi_gmem_RREADY;
wire    assign_swap_endianness_1_U0_m_axi_gmem_BREADY;
wire    assign_swap_endianness_1_U0_i_read;
wire    assign_swap_endianness_1_U0_ciphertext_read;
wire    ciphertext_c_full_n;
wire   [63:0] ciphertext_c_dout;
wire   [3:0] ciphertext_c_num_data_valid;
wire   [3:0] ciphertext_c_fifo_cap;
wire    ciphertext_c_empty_n;
wire    i_c_full_n;
wire   [59:0] i_c_dout;
wire   [2:0] i_c_num_data_valid;
wire   [2:0] i_c_fifo_cap;
wire    i_c_empty_n;
wire   [127:0] block_V1_out_tmp_channel_dout;
wire   [2:0] block_V1_out_tmp_channel_num_data_valid;
wire   [2:0] block_V1_out_tmp_channel_fifo_cap;
wire    block_V1_out_tmp_channel_empty_n;
wire   [127:0] tmp_dout;
wire   [1:0] tmp_num_data_valid;
wire   [1:0] tmp_fifo_cap;
wire    tmp_empty_n;
wire   [127:0] block_nonce_V_dout;
wire   [1:0] block_nonce_V_num_data_valid;
wire   [1:0] block_nonce_V_fifo_cap;
wire    block_nonce_V_empty_n;
wire   [127:0] block_V_dout;
wire   [1:0] block_V_num_data_valid;
wire   [1:0] block_V_fifo_cap;
wire    block_V_empty_n;
wire    ap_sync_ready;
reg    ap_sync_reg_entry_proc_U0_ap_ready;
wire    ap_sync_entry_proc_U0_ap_ready;
reg    ap_sync_reg_assign_swap_endianness_U0_ap_ready;
wire    ap_sync_assign_swap_endianness_U0_ap_ready;
reg    ap_sync_reg_ctr_compute_nonce_U0_ap_ready;
wire    ap_sync_ctr_compute_nonce_U0_ap_ready;
reg    ap_sync_reg_aes_encrypt_block_U0_ap_ready;
wire    ap_sync_aes_encrypt_block_U0_ap_ready;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_sync_reg_entry_proc_U0_ap_ready = 1'b0;
#0 ap_sync_reg_assign_swap_endianness_U0_ap_ready = 1'b0;
#0 ap_sync_reg_ctr_compute_nonce_U0_ap_ready = 1'b0;
#0 ap_sync_reg_aes_encrypt_block_U0_ap_ready = 1'b0;
end

pynqrypt_encrypt_entry_proc entry_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(entry_proc_U0_ap_start),
    .ap_done(entry_proc_U0_ap_done),
    .ap_continue(entry_proc_U0_ap_continue),
    .ap_idle(entry_proc_U0_ap_idle),
    .ap_ready(entry_proc_U0_ap_ready),
    .ciphertext(ciphertext),
    .ciphertext_c_din(entry_proc_U0_ciphertext_c_din),
    .ciphertext_c_num_data_valid(ciphertext_c_num_data_valid),
    .ciphertext_c_fifo_cap(ciphertext_c_fifo_cap),
    .ciphertext_c_full_n(ciphertext_c_full_n),
    .ciphertext_c_write(entry_proc_U0_ciphertext_c_write)
);

pynqrypt_encrypt_assign_swap_endianness assign_swap_endianness_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(assign_swap_endianness_U0_ap_start),
    .ap_done(assign_swap_endianness_U0_ap_done),
    .ap_continue(assign_swap_endianness_U0_ap_continue),
    .ap_idle(assign_swap_endianness_U0_ap_idle),
    .ap_ready(assign_swap_endianness_U0_ap_ready),
    .m_axi_gmem_AWVALID(assign_swap_endianness_U0_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(1'b0),
    .m_axi_gmem_AWADDR(assign_swap_endianness_U0_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(assign_swap_endianness_U0_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(assign_swap_endianness_U0_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(assign_swap_endianness_U0_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(assign_swap_endianness_U0_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(assign_swap_endianness_U0_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(assign_swap_endianness_U0_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(assign_swap_endianness_U0_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(assign_swap_endianness_U0_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(assign_swap_endianness_U0_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(assign_swap_endianness_U0_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(assign_swap_endianness_U0_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(1'b0),
    .m_axi_gmem_WDATA(assign_swap_endianness_U0_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(assign_swap_endianness_U0_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(assign_swap_endianness_U0_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(assign_swap_endianness_U0_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(assign_swap_endianness_U0_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(assign_swap_endianness_U0_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(m_axi_gmem_ARREADY),
    .m_axi_gmem_ARADDR(assign_swap_endianness_U0_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(assign_swap_endianness_U0_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(assign_swap_endianness_U0_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(assign_swap_endianness_U0_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(assign_swap_endianness_U0_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(assign_swap_endianness_U0_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(assign_swap_endianness_U0_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(assign_swap_endianness_U0_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(assign_swap_endianness_U0_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(assign_swap_endianness_U0_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(assign_swap_endianness_U0_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(m_axi_gmem_RVALID),
    .m_axi_gmem_RREADY(assign_swap_endianness_U0_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(m_axi_gmem_RDATA),
    .m_axi_gmem_RLAST(m_axi_gmem_RLAST),
    .m_axi_gmem_RID(m_axi_gmem_RID),
    .m_axi_gmem_RFIFONUM(m_axi_gmem_RFIFONUM),
    .m_axi_gmem_RUSER(m_axi_gmem_RUSER),
    .m_axi_gmem_RRESP(m_axi_gmem_RRESP),
    .m_axi_gmem_BVALID(1'b0),
    .m_axi_gmem_BREADY(assign_swap_endianness_U0_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(2'd0),
    .m_axi_gmem_BID(1'd0),
    .m_axi_gmem_BUSER(1'd0),
    .i(i),
    .plaintext(plaintext),
    .i_c_din(assign_swap_endianness_U0_i_c_din),
    .i_c_num_data_valid(i_c_num_data_valid),
    .i_c_fifo_cap(i_c_fifo_cap),
    .i_c_full_n(i_c_full_n),
    .i_c_write(assign_swap_endianness_U0_i_c_write),
    .ap_return(assign_swap_endianness_U0_ap_return)
);

pynqrypt_encrypt_ctr_compute_nonce ctr_compute_nonce_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ctr_compute_nonce_U0_ap_start),
    .ap_done(ctr_compute_nonce_U0_ap_done),
    .ap_continue(ctr_compute_nonce_U0_ap_continue),
    .ap_idle(ctr_compute_nonce_U0_ap_idle),
    .ap_ready(ctr_compute_nonce_U0_ap_ready),
    .p_read(p_read),
    .i(ctr_compute_nonce_U0_i),
    .ap_return(ctr_compute_nonce_U0_ap_return)
);

pynqrypt_encrypt_aes_encrypt_block aes_encrypt_block_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(aes_encrypt_block_U0_ap_start),
    .ap_done(aes_encrypt_block_U0_ap_done),
    .ap_continue(aes_encrypt_block_U0_ap_continue),
    .ap_idle(aes_encrypt_block_U0_ap_idle),
    .ap_ready(aes_encrypt_block_U0_ap_ready),
    .this_round_keys_address0(aes_encrypt_block_U0_this_round_keys_address0),
    .this_round_keys_ce0(aes_encrypt_block_U0_this_round_keys_ce0),
    .this_round_keys_q0(this_round_keys_q0),
    .p_read(tmp_dout),
    .ap_return(aes_encrypt_block_U0_ap_return)
);

pynqrypt_encrypt_ctr_xor_block ctr_xor_block_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ctr_xor_block_U0_ap_start),
    .ap_done(ctr_xor_block_U0_ap_done),
    .ap_continue(ctr_xor_block_U0_ap_continue),
    .ap_idle(ctr_xor_block_U0_ap_idle),
    .ap_ready(ctr_xor_block_U0_ap_ready),
    .p_read(block_V1_out_tmp_channel_dout),
    .p_read2(block_nonce_V_dout),
    .ap_return(ctr_xor_block_U0_ap_return)
);

pynqrypt_encrypt_assign_swap_endianness_1 assign_swap_endianness_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(assign_swap_endianness_1_U0_ap_start),
    .ap_done(assign_swap_endianness_1_U0_ap_done),
    .ap_continue(assign_swap_endianness_1_U0_ap_continue),
    .ap_idle(assign_swap_endianness_1_U0_ap_idle),
    .ap_ready(assign_swap_endianness_1_U0_ap_ready),
    .p_read(block_V_dout),
    .m_axi_gmem_AWVALID(assign_swap_endianness_1_U0_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(m_axi_gmem_AWREADY),
    .m_axi_gmem_AWADDR(assign_swap_endianness_1_U0_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(assign_swap_endianness_1_U0_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(assign_swap_endianness_1_U0_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(assign_swap_endianness_1_U0_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(assign_swap_endianness_1_U0_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(assign_swap_endianness_1_U0_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(assign_swap_endianness_1_U0_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(assign_swap_endianness_1_U0_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(assign_swap_endianness_1_U0_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(assign_swap_endianness_1_U0_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(assign_swap_endianness_1_U0_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(assign_swap_endianness_1_U0_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(m_axi_gmem_WREADY),
    .m_axi_gmem_WDATA(assign_swap_endianness_1_U0_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(assign_swap_endianness_1_U0_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(assign_swap_endianness_1_U0_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(assign_swap_endianness_1_U0_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(assign_swap_endianness_1_U0_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(assign_swap_endianness_1_U0_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(1'b0),
    .m_axi_gmem_ARADDR(assign_swap_endianness_1_U0_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(assign_swap_endianness_1_U0_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(assign_swap_endianness_1_U0_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(assign_swap_endianness_1_U0_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(assign_swap_endianness_1_U0_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(assign_swap_endianness_1_U0_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(assign_swap_endianness_1_U0_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(assign_swap_endianness_1_U0_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(assign_swap_endianness_1_U0_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(assign_swap_endianness_1_U0_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(assign_swap_endianness_1_U0_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(1'b0),
    .m_axi_gmem_RREADY(assign_swap_endianness_1_U0_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(128'd0),
    .m_axi_gmem_RLAST(1'b0),
    .m_axi_gmem_RID(1'd0),
    .m_axi_gmem_RFIFONUM(9'd0),
    .m_axi_gmem_RUSER(1'd0),
    .m_axi_gmem_RRESP(2'd0),
    .m_axi_gmem_BVALID(m_axi_gmem_BVALID),
    .m_axi_gmem_BREADY(assign_swap_endianness_1_U0_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(m_axi_gmem_BRESP),
    .m_axi_gmem_BID(m_axi_gmem_BID),
    .m_axi_gmem_BUSER(m_axi_gmem_BUSER),
    .i_dout(i_c_dout),
    .i_num_data_valid(i_c_num_data_valid),
    .i_fifo_cap(i_c_fifo_cap),
    .i_empty_n(i_c_empty_n),
    .i_read(assign_swap_endianness_1_U0_i_read),
    .ciphertext_dout(ciphertext_c_dout),
    .ciphertext_num_data_valid(ciphertext_c_num_data_valid),
    .ciphertext_fifo_cap(ciphertext_c_fifo_cap),
    .ciphertext_empty_n(ciphertext_c_empty_n),
    .ciphertext_read(assign_swap_endianness_1_U0_ciphertext_read)
);

pynqrypt_encrypt_fifo_w64_d5_S ciphertext_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_ciphertext_c_din),
    .if_full_n(ciphertext_c_full_n),
    .if_write(entry_proc_U0_ciphertext_c_write),
    .if_dout(ciphertext_c_dout),
    .if_num_data_valid(ciphertext_c_num_data_valid),
    .if_fifo_cap(ciphertext_c_fifo_cap),
    .if_empty_n(ciphertext_c_empty_n),
    .if_read(assign_swap_endianness_1_U0_ciphertext_read)
);

pynqrypt_encrypt_fifo_w60_d4_S i_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(assign_swap_endianness_U0_i_c_din),
    .if_full_n(i_c_full_n),
    .if_write(assign_swap_endianness_U0_i_c_write),
    .if_dout(i_c_dout),
    .if_num_data_valid(i_c_num_data_valid),
    .if_fifo_cap(i_c_fifo_cap),
    .if_empty_n(i_c_empty_n),
    .if_read(assign_swap_endianness_1_U0_i_read)
);

pynqrypt_encrypt_fifo_w128_d3_S block_V1_out_tmp_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(assign_swap_endianness_U0_ap_return),
    .if_full_n(block_V1_out_tmp_channel_full_n),
    .if_write(assign_swap_endianness_U0_ap_done),
    .if_dout(block_V1_out_tmp_channel_dout),
    .if_num_data_valid(block_V1_out_tmp_channel_num_data_valid),
    .if_fifo_cap(block_V1_out_tmp_channel_fifo_cap),
    .if_empty_n(block_V1_out_tmp_channel_empty_n),
    .if_read(ctr_xor_block_U0_ap_ready)
);

pynqrypt_encrypt_fifo_w128_d2_S tmp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(ctr_compute_nonce_U0_ap_return),
    .if_full_n(tmp_full_n),
    .if_write(ctr_compute_nonce_U0_ap_done),
    .if_dout(tmp_dout),
    .if_num_data_valid(tmp_num_data_valid),
    .if_fifo_cap(tmp_fifo_cap),
    .if_empty_n(tmp_empty_n),
    .if_read(aes_encrypt_block_U0_ap_ready)
);

pynqrypt_encrypt_fifo_w128_d2_S block_nonce_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(aes_encrypt_block_U0_ap_return),
    .if_full_n(block_nonce_V_full_n),
    .if_write(aes_encrypt_block_U0_ap_done),
    .if_dout(block_nonce_V_dout),
    .if_num_data_valid(block_nonce_V_num_data_valid),
    .if_fifo_cap(block_nonce_V_fifo_cap),
    .if_empty_n(block_nonce_V_empty_n),
    .if_read(ctr_xor_block_U0_ap_ready)
);

pynqrypt_encrypt_fifo_w128_d2_S block_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(ctr_xor_block_U0_ap_return),
    .if_full_n(block_V_full_n),
    .if_write(ctr_xor_block_U0_ap_done),
    .if_dout(block_V_dout),
    .if_num_data_valid(block_V_num_data_valid),
    .if_fifo_cap(block_V_fifo_cap),
    .if_empty_n(block_V_empty_n),
    .if_read(assign_swap_endianness_1_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_aes_encrypt_block_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_aes_encrypt_block_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_aes_encrypt_block_U0_ap_ready <= ap_sync_aes_encrypt_block_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_assign_swap_endianness_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_assign_swap_endianness_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_assign_swap_endianness_U0_ap_ready <= ap_sync_assign_swap_endianness_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_ctr_compute_nonce_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_ctr_compute_nonce_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_ctr_compute_nonce_U0_ap_ready <= ap_sync_ctr_compute_nonce_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
        end
    end
end

assign aes_encrypt_block_U0_ap_continue = block_nonce_V_full_n;

assign aes_encrypt_block_U0_ap_start = (tmp_empty_n & (ap_sync_reg_aes_encrypt_block_U0_ap_ready ^ 1'b1) & ap_start);

assign ap_done = assign_swap_endianness_1_U0_ap_done;

assign ap_idle = ((block_V_empty_n ^ 1'b1) & (block_nonce_V_empty_n ^ 1'b1) & (tmp_empty_n ^ 1'b1) & (block_V1_out_tmp_channel_empty_n ^ 1'b1) & entry_proc_U0_ap_idle & ctr_xor_block_U0_ap_idle & ctr_compute_nonce_U0_ap_idle & assign_swap_endianness_U0_ap_idle & assign_swap_endianness_1_U0_ap_idle & aes_encrypt_block_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_aes_encrypt_block_U0_ap_ready = (ap_sync_reg_aes_encrypt_block_U0_ap_ready | aes_encrypt_block_U0_ap_ready);

assign ap_sync_assign_swap_endianness_U0_ap_ready = (assign_swap_endianness_U0_ap_ready | ap_sync_reg_assign_swap_endianness_U0_ap_ready);

assign ap_sync_ctr_compute_nonce_U0_ap_ready = (ctr_compute_nonce_U0_ap_ready | ap_sync_reg_ctr_compute_nonce_U0_ap_ready);

assign ap_sync_entry_proc_U0_ap_ready = (entry_proc_U0_ap_ready | ap_sync_reg_entry_proc_U0_ap_ready);

assign ap_sync_ready = (ap_sync_entry_proc_U0_ap_ready & ap_sync_ctr_compute_nonce_U0_ap_ready & ap_sync_assign_swap_endianness_U0_ap_ready & ap_sync_aes_encrypt_block_U0_ap_ready);

assign assign_swap_endianness_1_U0_ap_continue = ap_continue;

assign assign_swap_endianness_1_U0_ap_start = block_V_empty_n;

assign assign_swap_endianness_U0_ap_continue = block_V1_out_tmp_channel_full_n;

assign assign_swap_endianness_U0_ap_start = ((ap_sync_reg_assign_swap_endianness_U0_ap_ready ^ 1'b1) & ap_start);

assign ctr_compute_nonce_U0_ap_continue = tmp_full_n;

assign ctr_compute_nonce_U0_ap_start = ((ap_sync_reg_ctr_compute_nonce_U0_ap_ready ^ 1'b1) & ap_start);

assign ctr_compute_nonce_U0_i = {{i[(32 - 60'd1):0]}};

assign ctr_xor_block_U0_ap_continue = block_V_full_n;

assign ctr_xor_block_U0_ap_start = (block_nonce_V_empty_n & block_V1_out_tmp_channel_empty_n);

assign entry_proc_U0_ap_continue = 1'b1;

assign entry_proc_U0_ap_start = ((ap_sync_reg_entry_proc_U0_ap_ready ^ 1'b1) & ap_start);

assign m_axi_gmem_ARADDR = assign_swap_endianness_U0_m_axi_gmem_ARADDR;

assign m_axi_gmem_ARBURST = assign_swap_endianness_U0_m_axi_gmem_ARBURST;

assign m_axi_gmem_ARCACHE = assign_swap_endianness_U0_m_axi_gmem_ARCACHE;

assign m_axi_gmem_ARID = assign_swap_endianness_U0_m_axi_gmem_ARID;

assign m_axi_gmem_ARLEN = assign_swap_endianness_U0_m_axi_gmem_ARLEN;

assign m_axi_gmem_ARLOCK = assign_swap_endianness_U0_m_axi_gmem_ARLOCK;

assign m_axi_gmem_ARPROT = assign_swap_endianness_U0_m_axi_gmem_ARPROT;

assign m_axi_gmem_ARQOS = assign_swap_endianness_U0_m_axi_gmem_ARQOS;

assign m_axi_gmem_ARREGION = assign_swap_endianness_U0_m_axi_gmem_ARREGION;

assign m_axi_gmem_ARSIZE = assign_swap_endianness_U0_m_axi_gmem_ARSIZE;

assign m_axi_gmem_ARUSER = assign_swap_endianness_U0_m_axi_gmem_ARUSER;

assign m_axi_gmem_ARVALID = assign_swap_endianness_U0_m_axi_gmem_ARVALID;

assign m_axi_gmem_AWADDR = assign_swap_endianness_1_U0_m_axi_gmem_AWADDR;

assign m_axi_gmem_AWBURST = assign_swap_endianness_1_U0_m_axi_gmem_AWBURST;

assign m_axi_gmem_AWCACHE = assign_swap_endianness_1_U0_m_axi_gmem_AWCACHE;

assign m_axi_gmem_AWID = assign_swap_endianness_1_U0_m_axi_gmem_AWID;

assign m_axi_gmem_AWLEN = assign_swap_endianness_1_U0_m_axi_gmem_AWLEN;

assign m_axi_gmem_AWLOCK = assign_swap_endianness_1_U0_m_axi_gmem_AWLOCK;

assign m_axi_gmem_AWPROT = assign_swap_endianness_1_U0_m_axi_gmem_AWPROT;

assign m_axi_gmem_AWQOS = assign_swap_endianness_1_U0_m_axi_gmem_AWQOS;

assign m_axi_gmem_AWREGION = assign_swap_endianness_1_U0_m_axi_gmem_AWREGION;

assign m_axi_gmem_AWSIZE = assign_swap_endianness_1_U0_m_axi_gmem_AWSIZE;

assign m_axi_gmem_AWUSER = assign_swap_endianness_1_U0_m_axi_gmem_AWUSER;

assign m_axi_gmem_AWVALID = assign_swap_endianness_1_U0_m_axi_gmem_AWVALID;

assign m_axi_gmem_BREADY = assign_swap_endianness_1_U0_m_axi_gmem_BREADY;

assign m_axi_gmem_RREADY = assign_swap_endianness_U0_m_axi_gmem_RREADY;

assign m_axi_gmem_WDATA = assign_swap_endianness_1_U0_m_axi_gmem_WDATA;

assign m_axi_gmem_WID = assign_swap_endianness_1_U0_m_axi_gmem_WID;

assign m_axi_gmem_WLAST = assign_swap_endianness_1_U0_m_axi_gmem_WLAST;

assign m_axi_gmem_WSTRB = assign_swap_endianness_1_U0_m_axi_gmem_WSTRB;

assign m_axi_gmem_WUSER = assign_swap_endianness_1_U0_m_axi_gmem_WUSER;

assign m_axi_gmem_WVALID = assign_swap_endianness_1_U0_m_axi_gmem_WVALID;

assign this_round_keys_address0 = aes_encrypt_block_U0_this_round_keys_address0;

assign this_round_keys_address1 = 4'd0;

assign this_round_keys_ce0 = aes_encrypt_block_U0_this_round_keys_ce0;

assign this_round_keys_ce1 = 1'b0;

assign this_round_keys_d0 = 128'd0;

assign this_round_keys_d1 = 128'd0;

assign this_round_keys_we0 = 1'b0;

assign this_round_keys_we1 = 1'b0;

endmodule //pynqrypt_encrypt_dataflow_in_loop_loop_ctr_encrypt
