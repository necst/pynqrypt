// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pynqrypt_encrypt_ctr_encrypt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        this_round_keys_address0,
        this_round_keys_ce0,
        this_round_keys_q0,
        plaintext_length,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        plaintext,
        ciphertext
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [95:0] p_read;
output  [3:0] this_round_keys_address0;
output   this_round_keys_ce0;
input  [127:0] this_round_keys_q0;
input  [63:0] plaintext_length;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [127:0] m_axi_gmem_WDATA;
output  [15:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [127:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] plaintext;
input  [63:0] ciphertext;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AR;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state9;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state7;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state11;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state16;
reg   [59:0] trunc_ln18_3_reg_663;
reg   [31:0] trunc_ln_reg_674;
wire   [31:0] offword_V_fu_285_p1;
reg   [31:0] offword_V_reg_694;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln18_fu_274_p2;
wire   [7:0] trunc_ln628_fu_294_p1;
reg   [7:0] trunc_ln628_reg_699;
reg   [7:0] tmp_s_reg_704;
reg   [7:0] tmp_2_reg_709;
reg   [7:0] tmp_3_reg_714;
reg   [7:0] tmp_4_reg_719;
reg   [7:0] tmp_5_reg_724;
reg   [7:0] tmp_6_reg_729;
reg   [7:0] tmp_7_reg_734;
reg   [7:0] tmp_8_reg_739;
reg   [7:0] tmp_9_reg_744;
reg   [7:0] tmp_10_reg_749;
reg   [7:0] tmp_11_reg_754;
reg   [7:0] tmp_12_reg_759;
reg   [7:0] tmp_13_reg_764;
reg   [7:0] tmp_14_reg_769;
reg   [7:0] tmp_15_reg_774;
wire   [127:0] p_Result_4_fu_448_p3;
reg   [127:0] p_Result_4_reg_779;
wire   [7:0] trunc_ln628_1_fu_481_p1;
reg   [7:0] trunc_ln628_1_reg_784;
wire    ap_CS_fsm_state10;
reg   [7:0] tmp_16_reg_789;
reg   [7:0] tmp_17_reg_794;
reg   [7:0] tmp_18_reg_799;
reg   [7:0] tmp_19_reg_804;
reg   [7:0] tmp_20_reg_809;
reg   [7:0] tmp_21_reg_814;
reg   [7:0] tmp_22_reg_819;
reg   [7:0] tmp_23_reg_824;
reg   [7:0] tmp_24_reg_829;
reg   [7:0] tmp_25_reg_834;
reg   [7:0] tmp_26_reg_839;
reg   [7:0] tmp_27_reg_844;
reg   [7:0] tmp_28_reg_849;
reg   [7:0] tmp_29_reg_854;
reg   [7:0] tmp_30_reg_859;
wire    grp_aes_encrypt_block_fu_190_ap_start;
wire    grp_aes_encrypt_block_fu_190_ap_done;
wire    grp_aes_encrypt_block_fu_190_ap_idle;
wire    grp_aes_encrypt_block_fu_190_ap_ready;
wire   [3:0] grp_aes_encrypt_block_fu_190_this_round_keys_address0;
wire    grp_aes_encrypt_block_fu_190_this_round_keys_ce0;
wire   [127:0] grp_aes_encrypt_block_fu_190_ap_return;
reg    grp_aes_encrypt_block_fu_190_ap_start_reg;
wire  signed [63:0] sext_ln18_fu_223_p1;
wire  signed [63:0] sext_ln18_1_fu_260_p1;
reg   [59:0] offset_fu_136;
wire   [59:0] i_fu_279_p2;
wire   [59:0] trunc_ln18_1_fu_213_p4;
wire   [59:0] trunc_ln18_2_fu_250_p4;
wire   [127:0] p_Result_3_fu_455_p17;
wire   [127:0] block_V_fu_475_p2;
reg   [15:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 grp_aes_encrypt_block_fu_190_ap_start_reg = 1'b0;
end

pynqrypt_encrypt_aes_encrypt_block grp_aes_encrypt_block_fu_190(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes_encrypt_block_fu_190_ap_start),
    .ap_done(grp_aes_encrypt_block_fu_190_ap_done),
    .ap_idle(grp_aes_encrypt_block_fu_190_ap_idle),
    .ap_ready(grp_aes_encrypt_block_fu_190_ap_ready),
    .this_round_keys_address0(grp_aes_encrypt_block_fu_190_this_round_keys_address0),
    .this_round_keys_ce0(grp_aes_encrypt_block_fu_190_this_round_keys_ce0),
    .this_round_keys_q0(this_round_keys_q0),
    .p_read(p_Result_4_reg_779),
    .ap_return(grp_aes_encrypt_block_fu_190_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_aes_encrypt_block_fu_190_ap_start_reg <= 1'b0;
    end else begin
        if (((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
            grp_aes_encrypt_block_fu_190_ap_start_reg <= 1'b1;
        end else if ((grp_aes_encrypt_block_fu_190_ap_ready == 1'b1)) begin
            grp_aes_encrypt_block_fu_190_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_gmem_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        offset_fu_136 <= 60'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln18_fu_274_p2 == 1'd0))) begin
        offset_fu_136 <= i_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln18_fu_274_p2 == 1'd0))) begin
        offword_V_reg_694 <= offword_V_fu_285_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_Result_4_reg_779 <= p_Result_4_fu_448_p3;
        tmp_10_reg_749 <= {{m_axi_gmem_RDATA[87:80]}};
        tmp_11_reg_754 <= {{m_axi_gmem_RDATA[95:88]}};
        tmp_12_reg_759 <= {{m_axi_gmem_RDATA[103:96]}};
        tmp_13_reg_764 <= {{m_axi_gmem_RDATA[111:104]}};
        tmp_14_reg_769 <= {{m_axi_gmem_RDATA[119:112]}};
        tmp_15_reg_774 <= {{m_axi_gmem_RDATA[127:120]}};
        tmp_2_reg_709 <= {{m_axi_gmem_RDATA[23:16]}};
        tmp_3_reg_714 <= {{m_axi_gmem_RDATA[31:24]}};
        tmp_4_reg_719 <= {{m_axi_gmem_RDATA[39:32]}};
        tmp_5_reg_724 <= {{m_axi_gmem_RDATA[47:40]}};
        tmp_6_reg_729 <= {{m_axi_gmem_RDATA[55:48]}};
        tmp_7_reg_734 <= {{m_axi_gmem_RDATA[63:56]}};
        tmp_8_reg_739 <= {{m_axi_gmem_RDATA[71:64]}};
        tmp_9_reg_744 <= {{m_axi_gmem_RDATA[79:72]}};
        tmp_s_reg_704 <= {{m_axi_gmem_RDATA[15:8]}};
        trunc_ln628_reg_699 <= trunc_ln628_fu_294_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_16_reg_789 <= {{block_V_fu_475_p2[15:8]}};
        tmp_17_reg_794 <= {{block_V_fu_475_p2[23:16]}};
        tmp_18_reg_799 <= {{block_V_fu_475_p2[31:24]}};
        tmp_19_reg_804 <= {{block_V_fu_475_p2[39:32]}};
        tmp_20_reg_809 <= {{block_V_fu_475_p2[47:40]}};
        tmp_21_reg_814 <= {{block_V_fu_475_p2[55:48]}};
        tmp_22_reg_819 <= {{block_V_fu_475_p2[63:56]}};
        tmp_23_reg_824 <= {{block_V_fu_475_p2[71:64]}};
        tmp_24_reg_829 <= {{block_V_fu_475_p2[79:72]}};
        tmp_25_reg_834 <= {{block_V_fu_475_p2[87:80]}};
        tmp_26_reg_839 <= {{block_V_fu_475_p2[95:88]}};
        tmp_27_reg_844 <= {{block_V_fu_475_p2[103:96]}};
        tmp_28_reg_849 <= {{block_V_fu_475_p2[111:104]}};
        tmp_29_reg_854 <= {{block_V_fu_475_p2[119:112]}};
        tmp_30_reg_859 <= {{block_V_fu_475_p2[127:120]}};
        trunc_ln628_1_reg_784 <= trunc_ln628_1_fu_481_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln18_3_reg_663 <= {{plaintext_length[63:4]}};
        trunc_ln_reg_674 <= {{plaintext_length[35:4]}};
    end
end

always @ (*) begin
    if ((grp_aes_encrypt_block_fu_190_ap_done == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_ARREADY == 1'b0) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((m_axi_gmem_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln18_fu_274_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((grp_aes_encrypt_block_fu_190_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign block_V_fu_475_p2 = (p_Result_3_fu_455_p17 ^ grp_aes_encrypt_block_fu_190_ap_return);

assign grp_aes_encrypt_block_fu_190_ap_start = grp_aes_encrypt_block_fu_190_ap_start_reg;

assign i_fu_279_p2 = (offset_fu_136 + 60'd1);

assign icmp_ln18_fu_274_p2 = ((offset_fu_136 == trunc_ln18_3_reg_663) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = sext_ln18_fu_223_p1;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = {{plaintext_length[35:4]}};

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = sext_ln18_1_fu_260_p1;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = trunc_ln_reg_674;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WDATA = {{{{{{{{{{{{{{{{trunc_ln628_1_reg_784}, {tmp_16_reg_789}}, {tmp_17_reg_794}}, {tmp_18_reg_799}}, {tmp_19_reg_804}}, {tmp_20_reg_809}}, {tmp_21_reg_814}}, {tmp_22_reg_819}}, {tmp_23_reg_824}}, {tmp_24_reg_829}}, {tmp_25_reg_834}}, {tmp_26_reg_839}}, {tmp_27_reg_844}}, {tmp_28_reg_849}}, {tmp_29_reg_854}}, {tmp_30_reg_859}};

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 16'd65535;

assign m_axi_gmem_WUSER = 1'd0;

assign offword_V_fu_285_p1 = offset_fu_136[31:0];

assign p_Result_3_fu_455_p17 = {{{{{{{{{{{{{{{{trunc_ln628_reg_699}, {tmp_s_reg_704}}, {tmp_2_reg_709}}, {tmp_3_reg_714}}, {tmp_4_reg_719}}, {tmp_5_reg_724}}, {tmp_6_reg_729}}, {tmp_7_reg_734}}, {tmp_8_reg_739}}, {tmp_9_reg_744}}, {tmp_10_reg_749}}, {tmp_11_reg_754}}, {tmp_12_reg_759}}, {tmp_13_reg_764}}, {tmp_14_reg_769}}, {tmp_15_reg_774}};

assign p_Result_4_fu_448_p3 = {{p_read}, {offword_V_reg_694}};

assign sext_ln18_1_fu_260_p1 = $signed(trunc_ln18_2_fu_250_p4);

assign sext_ln18_fu_223_p1 = $signed(trunc_ln18_1_fu_213_p4);

assign this_round_keys_address0 = grp_aes_encrypt_block_fu_190_this_round_keys_address0;

assign this_round_keys_ce0 = grp_aes_encrypt_block_fu_190_this_round_keys_ce0;

assign trunc_ln18_1_fu_213_p4 = {{plaintext[63:4]}};

assign trunc_ln18_2_fu_250_p4 = {{ciphertext[63:4]}};

assign trunc_ln628_1_fu_481_p1 = block_V_fu_475_p2[7:0];

assign trunc_ln628_fu_294_p1 = m_axi_gmem_RDATA[7:0];

endmodule //pynqrypt_encrypt_ctr_encrypt
