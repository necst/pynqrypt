// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pynqrypt_encrypt_Loop_3_proc_Pipeline_VITIS_LOOP_198_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pynqrypt_round_keys_address0,
        pynqrypt_round_keys_ce0,
        pynqrypt_round_keys_we0,
        pynqrypt_round_keys_d0,
        pynqrypt_round_keys_q0,
        pynqrypt_round_keys_address1,
        pynqrypt_round_keys_ce1,
        pynqrypt_round_keys_we1,
        pynqrypt_round_keys_d1,
        pynqrypt_round_keys_q1
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] pynqrypt_round_keys_address0;
output   pynqrypt_round_keys_ce0;
output   pynqrypt_round_keys_we0;
output  [7:0] pynqrypt_round_keys_d0;
input  [7:0] pynqrypt_round_keys_q0;
output  [7:0] pynqrypt_round_keys_address1;
output   pynqrypt_round_keys_ce1;
output   pynqrypt_round_keys_we1;
output  [7:0] pynqrypt_round_keys_d1;
input  [7:0] pynqrypt_round_keys_q1;

reg ap_idle;
reg[7:0] pynqrypt_round_keys_address0;
reg pynqrypt_round_keys_ce0;
reg pynqrypt_round_keys_we0;
reg[7:0] pynqrypt_round_keys_d0;
reg[7:0] pynqrypt_round_keys_address1;
reg pynqrypt_round_keys_ce1;
reg pynqrypt_round_keys_we1;
reg[7:0] pynqrypt_round_keys_d1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln198_fu_249_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state8;
wire    ap_block_state8_pp0_stage7_iter0;
reg   [7:0] aes_sbox3_address0;
reg    aes_sbox3_ce0;
wire   [7:0] aes_sbox3_q0;
wire   [3:0] crypto_aes_rcon_address0;
reg    crypto_aes_rcon_ce0;
wire   [7:0] crypto_aes_rcon_q0;
reg   [5:0] i_8_reg_528;
wire   [7:0] atoms_result_fu_255_p3;
reg   [7:0] atoms_result_reg_537;
reg   [7:0] temp_1_reg_566;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [7:0] pynqrypt_round_keys_load_1_reg_572;
reg   [7:0] crypto_aes_rcon_load_reg_592;
reg   [7:0] pynqrypt_round_keys_load_2_reg_597;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
reg   [7:0] pynqrypt_round_keys_load_3_reg_602;
reg   [7:0] aes_sbox3_load_reg_608;
reg   [7:0] aes_sbox3_load_1_reg_628;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
reg   [7:0] pynqrypt_round_keys_load_reg_638;
reg   [7:0] pynqrypt_round_keys_load_4_reg_643;
reg   [7:0] aes_sbox3_load_2_reg_658;
wire    ap_CS_fsm_state5;
wire    ap_block_state5_pp0_stage4_iter0;
reg   [7:0] pynqrypt_round_keys_load_5_reg_668;
reg   [7:0] pynqrypt_round_keys_load_6_reg_673;
wire   [7:0] xor_ln266_fu_427_p2;
reg   [7:0] xor_ln266_reg_678;
wire    ap_CS_fsm_state6;
wire    ap_block_state6_pp0_stage5_iter0;
wire   [7:0] xor_ln266_1_fu_442_p2;
reg   [7:0] xor_ln266_1_reg_683;
wire   [7:0] xor_ln266_2_fu_457_p2;
reg   [7:0] xor_ln266_2_reg_688;
wire   [7:0] xor_ln266_3_fu_472_p2;
reg   [7:0] xor_ln266_3_reg_693;
wire   [63:0] zext_ln199_1_fu_269_p1;
wire   [63:0] zext_ln199_2_fu_280_p1;
wire   [63:0] zext_ln256_fu_301_p1;
wire   [63:0] zext_ln199_3_fu_311_p1;
wire   [63:0] zext_ln199_4_fu_321_p1;
wire   [63:0] zext_ln249_fu_326_p1;
wire   [63:0] zext_ln249_1_fu_331_p1;
wire   [63:0] zext_ln207_fu_341_p1;
wire   [63:0] zext_ln207_1_fu_351_p1;
wire   [63:0] zext_ln249_2_fu_356_p1;
wire   [63:0] zext_ln207_2_fu_365_p1;
wire   [63:0] zext_ln207_3_fu_375_p1;
wire   [63:0] zext_ln249_3_fu_380_p1;
wire   [63:0] zext_ln199_fu_477_p1;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln266_fu_486_p1;
wire   [63:0] zext_ln266_1_fu_496_p1;
wire   [63:0] zext_ln266_2_fu_506_p1;
reg   [5:0] i_fu_82;
wire   [5:0] add_ln209_fu_511_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i_8;
wire    ap_block_state7_pp0_stage6_iter0;
wire   [7:0] add_ln199_fu_263_p2;
wire   [7:0] add_ln199_1_fu_274_p2;
wire   [3:0] trunc_ln_fu_285_p4;
wire   [3:0] add_ln204_fu_295_p2;
wire   [7:0] add_ln199_2_fu_306_p2;
wire   [7:0] add_ln199_3_fu_316_p2;
wire   [7:0] add_ln207_fu_336_p2;
wire   [7:0] add_ln207_1_fu_346_p2;
wire   [7:0] add_ln207_2_fu_360_p2;
wire   [7:0] add_ln207_3_fu_370_p2;
wire   [1:0] empty_66_fu_392_p1;
wire   [7:0] xor_ln256_fu_401_p2;
wire   [0:0] icmp_ln201_fu_395_p2;
wire   [31:0] temp_2_fu_405_p5;
wire   [31:0] temp_fu_384_p5;
wire   [31:0] temp_3_fu_415_p3;
wire   [7:0] trunc_ln266_fu_423_p1;
wire   [7:0] trunc_ln266_1_fu_432_p4;
wire   [7:0] trunc_ln266_3_fu_447_p4;
wire   [7:0] trunc_ln266_5_fu_462_p4;
wire   [7:0] or_ln266_fu_481_p2;
wire   [7:0] or_ln266_1_fu_491_p2;
wire   [7:0] or_ln266_2_fu_501_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_done_reg = 1'b0;
end

pynqrypt_encrypt_Loop_3_proc_Pipeline_VITIS_LOOP_198_1_aes_sbox3_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
aes_sbox3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(aes_sbox3_address0),
    .ce0(aes_sbox3_ce0),
    .q0(aes_sbox3_q0)
);

pynqrypt_encrypt_Loop_3_proc_Pipeline_VITIS_LOOP_198_1_crypto_aes_rcon_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
crypto_aes_rcon_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(crypto_aes_rcon_address0),
    .ce0(crypto_aes_rcon_ce0),
    .q0(crypto_aes_rcon_q0)
);

pynqrypt_encrypt_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        i_fu_82 <= 6'd4;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_fu_82 <= add_ln209_fu_511_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        aes_sbox3_load_1_reg_628 <= aes_sbox3_q0;
        pynqrypt_round_keys_load_4_reg_643 <= pynqrypt_round_keys_q0;
        pynqrypt_round_keys_load_reg_638 <= pynqrypt_round_keys_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        aes_sbox3_load_2_reg_658 <= aes_sbox3_q0;
        pynqrypt_round_keys_load_5_reg_668 <= pynqrypt_round_keys_q1;
        pynqrypt_round_keys_load_6_reg_673 <= pynqrypt_round_keys_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        aes_sbox3_load_reg_608 <= aes_sbox3_q0;
        pynqrypt_round_keys_load_2_reg_597 <= pynqrypt_round_keys_q1;
        pynqrypt_round_keys_load_3_reg_602 <= pynqrypt_round_keys_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln198_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        atoms_result_reg_537[7 : 2] <= atoms_result_fu_255_p3[7 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        crypto_aes_rcon_load_reg_592 <= crypto_aes_rcon_q0;
        pynqrypt_round_keys_load_1_reg_572 <= pynqrypt_round_keys_q0;
        temp_1_reg_566 <= pynqrypt_round_keys_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_8_reg_528 <= ap_sig_allocacmp_i_8;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        xor_ln266_1_reg_683 <= xor_ln266_1_fu_442_p2;
        xor_ln266_2_reg_688 <= xor_ln266_2_fu_457_p2;
        xor_ln266_3_reg_693 <= xor_ln266_3_fu_472_p2;
        xor_ln266_reg_678 <= xor_ln266_fu_427_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        aes_sbox3_address0 = zext_ln249_3_fu_380_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        aes_sbox3_address0 = zext_ln249_2_fu_356_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        aes_sbox3_address0 = zext_ln249_1_fu_331_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        aes_sbox3_address0 = zext_ln249_fu_326_p1;
    end else begin
        aes_sbox3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        aes_sbox3_ce0 = 1'b1;
    end else begin
        aes_sbox3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln198_fu_249_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_8 = 6'd4;
    end else begin
        ap_sig_allocacmp_i_8 = i_fu_82;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        crypto_aes_rcon_ce0 = 1'b1;
    end else begin
        crypto_aes_rcon_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        pynqrypt_round_keys_address0 = zext_ln266_2_fu_506_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        pynqrypt_round_keys_address0 = zext_ln266_fu_486_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        pynqrypt_round_keys_address0 = zext_ln207_3_fu_375_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        pynqrypt_round_keys_address0 = zext_ln207_1_fu_351_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pynqrypt_round_keys_address0 = zext_ln199_4_fu_321_p1;
    end else if (((icmp_ln198_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        pynqrypt_round_keys_address0 = zext_ln199_2_fu_280_p1;
    end else begin
        pynqrypt_round_keys_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        pynqrypt_round_keys_address1 = zext_ln266_1_fu_496_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        pynqrypt_round_keys_address1 = zext_ln199_fu_477_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        pynqrypt_round_keys_address1 = zext_ln207_2_fu_365_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        pynqrypt_round_keys_address1 = zext_ln207_fu_341_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pynqrypt_round_keys_address1 = zext_ln199_3_fu_311_p1;
    end else if (((icmp_ln198_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        pynqrypt_round_keys_address1 = zext_ln199_1_fu_269_p1;
    end else begin
        pynqrypt_round_keys_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((ap_start_int == 1'b1) & (icmp_ln198_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        pynqrypt_round_keys_ce0 = 1'b1;
    end else begin
        pynqrypt_round_keys_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((ap_start_int == 1'b1) & (icmp_ln198_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        pynqrypt_round_keys_ce1 = 1'b1;
    end else begin
        pynqrypt_round_keys_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        pynqrypt_round_keys_d0 = xor_ln266_3_reg_693;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        pynqrypt_round_keys_d0 = xor_ln266_1_reg_683;
    end else begin
        pynqrypt_round_keys_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        pynqrypt_round_keys_d1 = xor_ln266_2_reg_688;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        pynqrypt_round_keys_d1 = xor_ln266_reg_678;
    end else begin
        pynqrypt_round_keys_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        pynqrypt_round_keys_we0 = 1'b1;
    end else begin
        pynqrypt_round_keys_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        pynqrypt_round_keys_we1 = 1'b1;
    end else begin
        pynqrypt_round_keys_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (icmp_ln198_fu_249_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln199_1_fu_274_p2 = ($signed(atoms_result_fu_255_p3) + $signed(8'd253));

assign add_ln199_2_fu_306_p2 = ($signed(atoms_result_reg_537) + $signed(8'd254));

assign add_ln199_3_fu_316_p2 = ($signed(atoms_result_reg_537) + $signed(8'd255));

assign add_ln199_fu_263_p2 = ($signed(atoms_result_fu_255_p3) + $signed(8'd252));

assign add_ln204_fu_295_p2 = ($signed(trunc_ln_fu_285_p4) + $signed(4'd15));

assign add_ln207_1_fu_346_p2 = ($signed(atoms_result_reg_537) + $signed(8'd241));

assign add_ln207_2_fu_360_p2 = ($signed(atoms_result_reg_537) + $signed(8'd242));

assign add_ln207_3_fu_370_p2 = ($signed(atoms_result_reg_537) + $signed(8'd243));

assign add_ln207_fu_336_p2 = ($signed(atoms_result_reg_537) + $signed(8'd240));

assign add_ln209_fu_511_p2 = (i_8_reg_528 + 6'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign atoms_result_fu_255_p3 = {{ap_sig_allocacmp_i_8}, {2'd0}};

assign crypto_aes_rcon_address0 = zext_ln256_fu_301_p1;

assign empty_66_fu_392_p1 = i_8_reg_528[1:0];

assign icmp_ln198_fu_249_p2 = ((ap_sig_allocacmp_i_8 == 6'd44) ? 1'b1 : 1'b0);

assign icmp_ln201_fu_395_p2 = ((empty_66_fu_392_p1 == 2'd0) ? 1'b1 : 1'b0);

assign or_ln266_1_fu_491_p2 = (atoms_result_reg_537 | 8'd2);

assign or_ln266_2_fu_501_p2 = (atoms_result_reg_537 | 8'd3);

assign or_ln266_fu_481_p2 = (atoms_result_reg_537 | 8'd1);

assign temp_2_fu_405_p5 = {{{{aes_sbox3_q0}, {aes_sbox3_load_2_reg_658}}, {aes_sbox3_load_1_reg_628}}, {xor_ln256_fu_401_p2}};

assign temp_3_fu_415_p3 = ((icmp_ln201_fu_395_p2[0:0] == 1'b1) ? temp_2_fu_405_p5 : temp_fu_384_p5);

assign temp_fu_384_p5 = {{{{pynqrypt_round_keys_load_3_reg_602}, {pynqrypt_round_keys_load_2_reg_597}}, {pynqrypt_round_keys_load_1_reg_572}}, {temp_1_reg_566}};

assign trunc_ln266_1_fu_432_p4 = {{temp_3_fu_415_p3[15:8]}};

assign trunc_ln266_3_fu_447_p4 = {{temp_3_fu_415_p3[23:16]}};

assign trunc_ln266_5_fu_462_p4 = {{temp_3_fu_415_p3[31:24]}};

assign trunc_ln266_fu_423_p1 = temp_3_fu_415_p3[7:0];

assign trunc_ln_fu_285_p4 = {{ap_sig_allocacmp_i_8[5:2]}};

assign xor_ln256_fu_401_p2 = (crypto_aes_rcon_load_reg_592 ^ aes_sbox3_load_reg_608);

assign xor_ln266_1_fu_442_p2 = (trunc_ln266_1_fu_432_p4 ^ pynqrypt_round_keys_load_4_reg_643);

assign xor_ln266_2_fu_457_p2 = (trunc_ln266_3_fu_447_p4 ^ pynqrypt_round_keys_load_5_reg_668);

assign xor_ln266_3_fu_472_p2 = (trunc_ln266_5_fu_462_p4 ^ pynqrypt_round_keys_load_6_reg_673);

assign xor_ln266_fu_427_p2 = (trunc_ln266_fu_423_p1 ^ pynqrypt_round_keys_load_reg_638);

assign zext_ln199_1_fu_269_p1 = add_ln199_fu_263_p2;

assign zext_ln199_2_fu_280_p1 = add_ln199_1_fu_274_p2;

assign zext_ln199_3_fu_311_p1 = add_ln199_2_fu_306_p2;

assign zext_ln199_4_fu_321_p1 = add_ln199_3_fu_316_p2;

assign zext_ln199_fu_477_p1 = atoms_result_reg_537;

assign zext_ln207_1_fu_351_p1 = add_ln207_1_fu_346_p2;

assign zext_ln207_2_fu_365_p1 = add_ln207_2_fu_360_p2;

assign zext_ln207_3_fu_375_p1 = add_ln207_3_fu_370_p2;

assign zext_ln207_fu_341_p1 = add_ln207_fu_336_p2;

assign zext_ln249_1_fu_331_p1 = pynqrypt_round_keys_q1;

assign zext_ln249_2_fu_356_p1 = pynqrypt_round_keys_load_3_reg_602;

assign zext_ln249_3_fu_380_p1 = temp_1_reg_566;

assign zext_ln249_fu_326_p1 = pynqrypt_round_keys_q0;

assign zext_ln256_fu_301_p1 = add_ln204_fu_295_p2;

assign zext_ln266_1_fu_496_p1 = or_ln266_1_fu_491_p2;

assign zext_ln266_2_fu_506_p1 = or_ln266_2_fu_501_p2;

assign zext_ln266_fu_486_p1 = or_ln266_fu_481_p2;

always @ (posedge ap_clk) begin
    atoms_result_reg_537[1:0] <= 2'b00;
end

endmodule //pynqrypt_encrypt_Loop_3_proc_Pipeline_VITIS_LOOP_198_1
