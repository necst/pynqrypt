-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pynqrypt_encrypt_aes_encrypt_block is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    this_round_keys_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    this_round_keys_ce0 : OUT STD_LOGIC;
    this_round_keys_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    p_read : IN STD_LOGIC_VECTOR (127 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of pynqrypt_encrypt_aes_encrypt_block is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2048_lc_1 : STD_LOGIC_VECTOR (2047 downto
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_125 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal xor_ln859_fu_129_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln859_reg_698 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_ap_start : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_ap_done : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_ap_idle : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_ap_ready : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_this_round_keys_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_this_round_keys_ce0 : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_state_promoted_i_out : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_state_promoted_i_out_ap_vld : STD_LOGIC;
    signal grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal tmp_fu_139_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_149_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln56_fu_157_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln56_fu_161_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal tmp_s_fu_171_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln3_fu_181_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln57_fu_189_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln57_fu_193_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal tmp_16_fu_203_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln4_fu_213_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln58_fu_221_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln58_fu_225_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal trunc_ln59_fu_235_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln5_fu_239_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln59_fu_247_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln59_fu_251_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal tmp_17_fu_261_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln6_fu_271_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln61_fu_279_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln61_fu_283_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal tmp_18_fu_293_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln7_fu_303_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln62_fu_311_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln62_fu_315_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal tmp_19_fu_325_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln8_fu_335_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln63_fu_343_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln63_fu_347_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal tmp_20_fu_357_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln9_fu_367_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln64_fu_375_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln64_fu_379_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal tmp_21_fu_389_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln10_fu_399_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln66_fu_407_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln66_fu_411_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal tmp_22_fu_421_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln11_fu_431_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln67_fu_439_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln67_fu_443_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal tmp_23_fu_453_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln12_fu_463_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln68_fu_471_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln68_fu_475_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal tmp_24_fu_485_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln13_fu_495_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln69_fu_503_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln69_fu_507_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal tmp_25_fu_517_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln14_fu_527_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln71_fu_535_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln71_fu_539_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal tmp_26_fu_549_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln15_fu_559_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln72_fu_567_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln72_fu_571_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal tmp_27_fu_581_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln16_fu_591_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln73_fu_599_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln73_fu_603_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal tmp_28_fu_613_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln17_fu_623_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln74_fu_631_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln74_fu_635_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal trunc_ln56_fu_167_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln57_fu_199_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_fu_231_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln59_1_fu_257_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln61_fu_289_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln62_fu_321_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln63_fu_353_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln64_fu_385_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln66_fu_417_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln67_fu_449_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln68_fu_481_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln69_fu_513_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln71_fu_545_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln72_fu_577_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln73_fu_609_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln74_fu_641_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_645_p17 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pynqrypt_encrypt_aes_encrypt_block_Pipeline_loop_aes_encrypt_block IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        xor_ln859 : IN STD_LOGIC_VECTOR (127 downto 0);
        this_round_keys_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        this_round_keys_ce0 : OUT STD_LOGIC;
        this_round_keys_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
        state_promoted_i_out : OUT STD_LOGIC_VECTOR (127 downto 0);
        state_promoted_i_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117 : component pynqrypt_encrypt_aes_encrypt_block_Pipeline_loop_aes_encrypt_block
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_ap_start,
        ap_done => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_ap_done,
        ap_idle => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_ap_idle,
        ap_ready => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_ap_ready,
        xor_ln859 => xor_ln859_reg_698,
        this_round_keys_address0 => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_this_round_keys_address0,
        this_round_keys_ce0 => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_this_round_keys_ce0,
        this_round_keys_q0 => this_round_keys_q0,
        state_promoted_i_out => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_state_promoted_i_out,
        state_promoted_i_out_ap_vld => grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_state_promoted_i_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_ap_ready = ap_const_logic_1)) then 
                    grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_125 <= this_round_keys_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                xor_ln859_reg_698 <= xor_ln859_fu_129_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_ap_done)
    begin
        if ((grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= (reg_125 xor p_Result_s_fu_645_p17);
    grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_ap_start <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_ap_start_reg;
    lshr_ln56_fu_161_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv2048_lc_1),to_integer(unsigned('0' & zext_ln56_fu_157_p1(31-1 downto 0)))));
    lshr_ln57_fu_193_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv2048_lc_1),to_integer(unsigned('0' & zext_ln57_fu_189_p1(31-1 downto 0)))));
    lshr_ln58_fu_225_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv2048_lc_1),to_integer(unsigned('0' & zext_ln58_fu_221_p1(31-1 downto 0)))));
    lshr_ln59_fu_251_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv2048_lc_1),to_integer(unsigned('0' & zext_ln59_fu_247_p1(31-1 downto 0)))));
    lshr_ln61_fu_283_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv2048_lc_1),to_integer(unsigned('0' & zext_ln61_fu_279_p1(31-1 downto 0)))));
    lshr_ln62_fu_315_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv2048_lc_1),to_integer(unsigned('0' & zext_ln62_fu_311_p1(31-1 downto 0)))));
    lshr_ln63_fu_347_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv2048_lc_1),to_integer(unsigned('0' & zext_ln63_fu_343_p1(31-1 downto 0)))));
    lshr_ln64_fu_379_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv2048_lc_1),to_integer(unsigned('0' & zext_ln64_fu_375_p1(31-1 downto 0)))));
    lshr_ln66_fu_411_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv2048_lc_1),to_integer(unsigned('0' & zext_ln66_fu_407_p1(31-1 downto 0)))));
    lshr_ln67_fu_443_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv2048_lc_1),to_integer(unsigned('0' & zext_ln67_fu_439_p1(31-1 downto 0)))));
    lshr_ln68_fu_475_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv2048_lc_1),to_integer(unsigned('0' & zext_ln68_fu_471_p1(31-1 downto 0)))));
    lshr_ln69_fu_507_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv2048_lc_1),to_integer(unsigned('0' & zext_ln69_fu_503_p1(31-1 downto 0)))));
    lshr_ln71_fu_539_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv2048_lc_1),to_integer(unsigned('0' & zext_ln71_fu_535_p1(31-1 downto 0)))));
    lshr_ln72_fu_571_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv2048_lc_1),to_integer(unsigned('0' & zext_ln72_fu_567_p1(31-1 downto 0)))));
    lshr_ln73_fu_603_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv2048_lc_1),to_integer(unsigned('0' & zext_ln73_fu_599_p1(31-1 downto 0)))));
    lshr_ln74_fu_635_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv2048_lc_1),to_integer(unsigned('0' & zext_ln74_fu_631_p1(31-1 downto 0)))));
    p_Result_s_fu_645_p17 <= (((((((((((((((trunc_ln56_fu_167_p1 & trunc_ln57_fu_199_p1) & trunc_ln58_fu_231_p1) & trunc_ln59_1_fu_257_p1) & trunc_ln61_fu_289_p1) & trunc_ln62_fu_321_p1) & trunc_ln63_fu_353_p1) & trunc_ln64_fu_385_p1) & trunc_ln66_fu_417_p1) & trunc_ln67_fu_449_p1) & trunc_ln68_fu_481_p1) & trunc_ln69_fu_513_p1) & trunc_ln71_fu_545_p1) & trunc_ln72_fu_577_p1) & trunc_ln73_fu_609_p1) & trunc_ln74_fu_641_p1);
    shl_ln10_fu_399_p3 <= (tmp_21_fu_389_p4 & ap_const_lv3_0);
    shl_ln11_fu_431_p3 <= (tmp_22_fu_421_p4 & ap_const_lv3_0);
    shl_ln12_fu_463_p3 <= (tmp_23_fu_453_p4 & ap_const_lv3_0);
    shl_ln13_fu_495_p3 <= (tmp_24_fu_485_p4 & ap_const_lv3_0);
    shl_ln14_fu_527_p3 <= (tmp_25_fu_517_p4 & ap_const_lv3_0);
    shl_ln15_fu_559_p3 <= (tmp_26_fu_549_p4 & ap_const_lv3_0);
    shl_ln16_fu_591_p3 <= (tmp_27_fu_581_p4 & ap_const_lv3_0);
    shl_ln17_fu_623_p3 <= (tmp_28_fu_613_p4 & ap_const_lv3_0);
    shl_ln3_fu_181_p3 <= (tmp_s_fu_171_p4 & ap_const_lv3_0);
    shl_ln4_fu_213_p3 <= (tmp_16_fu_203_p4 & ap_const_lv3_0);
    shl_ln5_fu_239_p3 <= (trunc_ln59_fu_235_p1 & ap_const_lv3_0);
    shl_ln6_fu_271_p3 <= (tmp_17_fu_261_p4 & ap_const_lv3_0);
    shl_ln7_fu_303_p3 <= (tmp_18_fu_293_p4 & ap_const_lv3_0);
    shl_ln8_fu_335_p3 <= (tmp_19_fu_325_p4 & ap_const_lv3_0);
    shl_ln9_fu_367_p3 <= (tmp_20_fu_357_p4 & ap_const_lv3_0);
    shl_ln_fu_149_p3 <= (tmp_fu_139_p4 & ap_const_lv3_0);

    this_round_keys_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_this_round_keys_address0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            this_round_keys_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            this_round_keys_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            this_round_keys_address0 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_this_round_keys_address0;
        else 
            this_round_keys_address0 <= "XXXX";
        end if; 
    end process;


    this_round_keys_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state5, grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_this_round_keys_ce0, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            this_round_keys_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            this_round_keys_ce0 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_this_round_keys_ce0;
        else 
            this_round_keys_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_16_fu_203_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_state_promoted_i_out(47 downto 40);
    tmp_17_fu_261_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_state_promoted_i_out(95 downto 88);
    tmp_18_fu_293_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_state_promoted_i_out(55 downto 48);
    tmp_19_fu_325_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_state_promoted_i_out(15 downto 8);
    tmp_20_fu_357_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_state_promoted_i_out(103 downto 96);
    tmp_21_fu_389_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_state_promoted_i_out(63 downto 56);
    tmp_22_fu_421_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_state_promoted_i_out(23 downto 16);
    tmp_23_fu_453_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_state_promoted_i_out(111 downto 104);
    tmp_24_fu_485_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_state_promoted_i_out(71 downto 64);
    tmp_25_fu_517_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_state_promoted_i_out(31 downto 24);
    tmp_26_fu_549_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_state_promoted_i_out(119 downto 112);
    tmp_27_fu_581_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_state_promoted_i_out(79 downto 72);
    tmp_28_fu_613_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_state_promoted_i_out(39 downto 32);
    tmp_fu_139_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_state_promoted_i_out(127 downto 120);
    tmp_s_fu_171_p4 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_state_promoted_i_out(87 downto 80);
    trunc_ln56_fu_167_p1 <= lshr_ln56_fu_161_p2(8 - 1 downto 0);
    trunc_ln57_fu_199_p1 <= lshr_ln57_fu_193_p2(8 - 1 downto 0);
    trunc_ln58_fu_231_p1 <= lshr_ln58_fu_225_p2(8 - 1 downto 0);
    trunc_ln59_1_fu_257_p1 <= lshr_ln59_fu_251_p2(8 - 1 downto 0);
    trunc_ln59_fu_235_p1 <= grp_aes_encrypt_block_Pipeline_loop_aes_encrypt_block_fu_117_state_promoted_i_out(8 - 1 downto 0);
    trunc_ln61_fu_289_p1 <= lshr_ln61_fu_283_p2(8 - 1 downto 0);
    trunc_ln62_fu_321_p1 <= lshr_ln62_fu_315_p2(8 - 1 downto 0);
    trunc_ln63_fu_353_p1 <= lshr_ln63_fu_347_p2(8 - 1 downto 0);
    trunc_ln64_fu_385_p1 <= lshr_ln64_fu_379_p2(8 - 1 downto 0);
    trunc_ln66_fu_417_p1 <= lshr_ln66_fu_411_p2(8 - 1 downto 0);
    trunc_ln67_fu_449_p1 <= lshr_ln67_fu_443_p2(8 - 1 downto 0);
    trunc_ln68_fu_481_p1 <= lshr_ln68_fu_475_p2(8 - 1 downto 0);
    trunc_ln69_fu_513_p1 <= lshr_ln69_fu_507_p2(8 - 1 downto 0);
    trunc_ln71_fu_545_p1 <= lshr_ln71_fu_539_p2(8 - 1 downto 0);
    trunc_ln72_fu_577_p1 <= lshr_ln72_fu_571_p2(8 - 1 downto 0);
    trunc_ln73_fu_609_p1 <= lshr_ln73_fu_603_p2(8 - 1 downto 0);
    trunc_ln74_fu_641_p1 <= lshr_ln74_fu_635_p2(8 - 1 downto 0);
    xor_ln859_fu_129_p2 <= (reg_125 xor p_read);
    zext_ln56_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_149_p3),2048));
    zext_ln57_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_181_p3),2048));
    zext_ln58_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln4_fu_213_p3),2048));
    zext_ln59_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln5_fu_239_p3),2048));
    zext_ln61_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln6_fu_271_p3),2048));
    zext_ln62_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln7_fu_303_p3),2048));
    zext_ln63_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln8_fu_335_p3),2048));
    zext_ln64_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln9_fu_367_p3),2048));
    zext_ln66_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln10_fu_399_p3),2048));
    zext_ln67_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln11_fu_431_p3),2048));
    zext_ln68_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln12_fu_463_p3),2048));
    zext_ln69_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln13_fu_495_p3),2048));
    zext_ln71_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln14_fu_527_p3),2048));
    zext_ln72_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln15_fu_559_p3),2048));
    zext_ln73_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln16_fu_591_p3),2048));
    zext_ln74_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln17_fu_623_p3),2048));
end behav;
