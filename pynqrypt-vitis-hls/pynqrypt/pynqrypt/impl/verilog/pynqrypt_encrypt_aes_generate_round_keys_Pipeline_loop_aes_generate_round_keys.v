// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pynqrypt_encrypt_aes_generate_round_keys_Pipeline_loop_aes_generate_round_keys (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_round_key_V,
        p_round_key_V_1_out,
        p_round_key_V_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 8'd1;
parameter    ap_ST_fsm_pp0_stage1 = 8'd2;
parameter    ap_ST_fsm_pp0_stage2 = 8'd4;
parameter    ap_ST_fsm_pp0_stage3 = 8'd8;
parameter    ap_ST_fsm_pp0_stage4 = 8'd16;
parameter    ap_ST_fsm_pp0_stage5 = 8'd32;
parameter    ap_ST_fsm_pp0_stage6 = 8'd64;
parameter    ap_ST_fsm_pp0_stage7 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1407:0] p_round_key_V;
output  [1407:0] p_round_key_V_1_out;
output   p_round_key_V_1_out_ap_vld;

reg ap_idle;
reg p_round_key_V_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln166_fu_131_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_subdone;
wire   [3:0] crypto_aes_rcon_address0;
reg    crypto_aes_rcon_ce0;
wire   [7:0] crypto_aes_rcon_q0;
reg   [5:0] i_2_reg_586;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln166_reg_591;
wire   [10:0] shl_ln_fu_137_p3;
reg   [10:0] shl_ln_reg_595;
wire   [10:0] add_ln167_fu_145_p2;
reg   [10:0] add_ln167_reg_605;
reg   [1407:0] p_round_key_V_1_load_reg_615;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [1407:0] lshr_ln167_fu_178_p2;
reg   [1407:0] lshr_ln167_reg_621;
reg   [7:0] crypto_aes_rcon_load_reg_630;
wire   [10:0] add_ln173_fu_184_p2;
reg   [10:0] add_ln173_reg_635;
wire   [31:0] ret_V_19_fu_336_p2;
reg   [31:0] ret_V_19_reg_640;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [1407:0] or_ln173_fu_371_p2;
reg   [1407:0] or_ln173_reg_646;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [10:0] add_ln174_fu_377_p2;
reg   [10:0] add_ln174_reg_652;
wire   [31:0] ret_V_20_fu_394_p2;
reg   [31:0] ret_V_20_reg_657;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire   [10:0] or_ln174_fu_399_p2;
reg   [10:0] or_ln174_reg_663;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire   [1407:0] or_ln174_1_fu_434_p2;
reg   [1407:0] or_ln174_1_reg_668;
wire   [10:0] add_ln175_fu_440_p2;
reg   [10:0] add_ln175_reg_674;
wire   [31:0] ret_V_21_fu_457_p2;
reg   [31:0] ret_V_21_reg_679;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire   [1407:0] zext_ln176_fu_508_p1;
reg   [1407:0] zext_ln176_reg_685;
wire    ap_block_pp0_stage7_11001;
wire   [1407:0] and_ln176_fu_524_p2;
reg   [1407:0] and_ln176_reg_690;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln200_fu_167_p1;
wire    ap_block_pp0_stage0;
reg   [5:0] i_fu_84;
wire   [5:0] add_ln166_fu_530_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i_2;
reg   [1407:0] p_round_key_V_1_fu_88;
wire   [1407:0] p_round_key_V_2_fu_557_p2;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage0_01001;
wire   [3:0] trunc_ln_fu_151_p4;
wire   [3:0] add_ln171_fu_161_p2;
wire   [1407:0] zext_ln167_fu_175_p1;
wire    ap_block_pp0_stage2;
wire   [7:0] r_p_fu_189_p4;
wire   [10:0] shl_ln4_fu_198_p3;
wire   [2047:0] zext_ln195_fu_206_p1;
wire   [2047:0] lshr_ln195_fu_210_p2;
wire   [7:0] trunc_ln195_1_fu_220_p1;
wire   [10:0] shl_ln195_1_fu_223_p3;
wire   [2047:0] zext_ln195_1_fu_231_p1;
wire   [2047:0] lshr_ln195_1_fu_235_p2;
wire   [7:0] tmp_s_fu_245_p4;
wire   [10:0] shl_ln195_2_fu_254_p3;
wire   [2047:0] zext_ln195_2_fu_262_p1;
wire   [2047:0] lshr_ln195_2_fu_266_p2;
wire   [7:0] tmp_29_fu_276_p4;
wire   [10:0] shl_ln195_3_fu_285_p3;
wire   [2047:0] zext_ln195_3_fu_293_p1;
wire   [2047:0] lshr_ln195_3_fu_297_p2;
wire   [7:0] trunc_ln195_4_fu_303_p1;
wire   [7:0] xor_ln1499_fu_307_p2;
wire   [7:0] trunc_ln195_3_fu_272_p1;
wire   [7:0] trunc_ln195_2_fu_241_p1;
wire   [7:0] trunc_ln195_fu_216_p1;
wire   [1407:0] zext_ln1499_fu_324_p1;
wire   [1407:0] lshr_ln1499_fu_327_p2;
wire   [31:0] lhs_V_fu_332_p1;
wire   [31:0] p_Result_s_fu_312_p5;
wire    ap_block_pp0_stage3;
wire   [1407:0] zext_ln173_fu_342_p1;
wire   [1407:0] shl_ln173_fu_345_p2;
wire   [1407:0] xor_ln173_fu_351_p2;
wire   [1407:0] zext_ln173_1_fu_362_p1;
wire   [1407:0] and_ln173_fu_357_p2;
wire   [1407:0] shl_ln173_1_fu_365_p2;
wire    ap_block_pp0_stage4;
wire   [1407:0] zext_ln1499_1_fu_382_p1;
wire   [1407:0] lshr_ln1499_1_fu_385_p2;
wire   [31:0] lhs_V_8_fu_390_p1;
wire    ap_block_pp0_stage5;
wire   [1407:0] zext_ln174_fu_404_p1;
wire   [1407:0] shl_ln174_fu_408_p2;
wire   [1407:0] xor_ln174_fu_414_p2;
wire   [1407:0] zext_ln174_1_fu_425_p1;
wire   [1407:0] and_ln174_fu_420_p2;
wire   [1407:0] shl_ln174_1_fu_428_p2;
wire    ap_block_pp0_stage6;
wire   [1407:0] zext_ln1499_2_fu_445_p1;
wire   [1407:0] lshr_ln1499_2_fu_448_p2;
wire   [31:0] lhs_V_9_fu_453_p1;
wire    ap_block_pp0_stage7;
wire   [10:0] add_ln175_1_fu_462_p2;
wire   [1407:0] zext_ln175_fu_467_p1;
wire   [1407:0] shl_ln175_fu_471_p2;
wire   [1407:0] xor_ln175_fu_477_p2;
wire   [1407:0] zext_ln175_1_fu_488_p1;
wire   [1407:0] and_ln175_fu_483_p2;
wire   [1407:0] shl_ln175_1_fu_491_p2;
wire   [10:0] or_ln176_fu_503_p2;
wire   [1407:0] shl_ln176_fu_512_p2;
wire   [1407:0] or_ln175_fu_497_p2;
wire   [1407:0] xor_ln176_fu_518_p2;
wire   [31:0] temp_V_fu_540_p1;
wire   [31:0] ret_V_fu_543_p2;
wire   [1407:0] zext_ln176_1_fu_548_p1;
wire   [1407:0] shl_ln176_1_fu_552_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

pynqrypt_encrypt_aes_generate_round_keys_Pipeline_loop_aes_generate_round_keys_crypto_aes_rconbkb #(
    .DataWidth( 8 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
crypto_aes_rcon_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(crypto_aes_rcon_address0),
    .ce0(crypto_aes_rcon_ce0),
    .q0(crypto_aes_rcon_q0)
);

pynqrypt_encrypt_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_84 <= 6'd4;
    end else if (((icmp_ln166_reg_591 == 1'd1) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        i_fu_84 <= add_ln166_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            p_round_key_V_1_fu_88 <= p_round_key_V;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            p_round_key_V_1_fu_88 <= p_round_key_V_2_fu_557_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln166_fu_131_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln167_reg_605[10 : 5] <= add_ln167_fu_145_p2[10 : 5];
        shl_ln_reg_595[10 : 5] <= shl_ln_fu_137_p3[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln166_reg_591 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln173_reg_635[10 : 5] <= add_ln173_fu_184_p2[10 : 5];
        crypto_aes_rcon_load_reg_630 <= crypto_aes_rcon_q0;
        lshr_ln167_reg_621 <= lshr_ln167_fu_178_p2;
        p_round_key_V_1_load_reg_615 <= p_round_key_V_1_fu_88;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln166_reg_591 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln174_reg_652[10 : 5] <= add_ln174_fu_377_p2[10 : 5];
        or_ln173_reg_646 <= or_ln173_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln166_reg_591 == 1'd1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_ln175_reg_674[10 : 5] <= add_ln175_fu_440_p2[10 : 5];
        or_ln174_1_reg_668 <= or_ln174_1_fu_434_p2;
        or_ln174_reg_663[10 : 6] <= or_ln174_fu_399_p2[10 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln166_reg_591 == 1'd1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        and_ln176_reg_690 <= and_ln176_fu_524_p2;
        zext_ln176_reg_685[10 : 7] <= zext_ln176_fu_508_p1[10 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_2_reg_586 <= ap_sig_allocacmp_i_2;
        icmp_ln166_reg_591 <= icmp_ln166_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln166_reg_591 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ret_V_19_reg_640 <= ret_V_19_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln166_reg_591 == 1'd1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ret_V_20_reg_657 <= ret_V_20_fu_394_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln166_reg_591 == 1'd1) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        ret_V_21_reg_679 <= ret_V_21_fu_457_p2;
    end
end

always @ (*) begin
    if (((icmp_ln166_fu_131_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage7_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_2 = 6'd4;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        crypto_aes_rcon_ce0 = 1'b1;
    end else begin
        crypto_aes_rcon_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln166_fu_131_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_round_key_V_1_out_ap_vld = 1'b1;
    end else begin
        p_round_key_V_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln166_fu_530_p2 = (i_2_reg_586 + 6'd4);

assign add_ln167_fu_145_p2 = ($signed(shl_ln_fu_137_p3) + $signed(11'd2016));

assign add_ln171_fu_161_p2 = ($signed(trunc_ln_fu_151_p4) + $signed(4'd15));

assign add_ln173_fu_184_p2 = ($signed(shl_ln_reg_595) + $signed(11'd1920));

assign add_ln174_fu_377_p2 = ($signed(shl_ln_reg_595) + $signed(11'd1952));

assign add_ln175_1_fu_462_p2 = (or_ln174_reg_663 + 11'd32);

assign add_ln175_fu_440_p2 = ($signed(shl_ln_reg_595) + $signed(11'd1984));

assign and_ln173_fu_357_p2 = (xor_ln173_fu_351_p2 & p_round_key_V_1_load_reg_615);

assign and_ln174_fu_420_p2 = (xor_ln174_fu_414_p2 & or_ln173_reg_646);

assign and_ln175_fu_483_p2 = (xor_ln175_fu_477_p2 & or_ln174_1_reg_668);

assign and_ln176_fu_524_p2 = (xor_ln176_fu_518_p2 & or_ln175_fu_497_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign crypto_aes_rcon_address0 = zext_ln200_fu_167_p1;

assign icmp_ln166_fu_131_p2 = ((ap_sig_allocacmp_i_2 < 6'd44) ? 1'b1 : 1'b0);

assign lhs_V_8_fu_390_p1 = lshr_ln1499_1_fu_385_p2[31:0];

assign lhs_V_9_fu_453_p1 = lshr_ln1499_2_fu_448_p2[31:0];

assign lhs_V_fu_332_p1 = lshr_ln1499_fu_327_p2[31:0];

assign lshr_ln1499_1_fu_385_p2 = or_ln173_reg_646 >> zext_ln1499_1_fu_382_p1;

assign lshr_ln1499_2_fu_448_p2 = or_ln174_1_reg_668 >> zext_ln1499_2_fu_445_p1;

assign lshr_ln1499_fu_327_p2 = p_round_key_V_1_load_reg_615 >> zext_ln1499_fu_324_p1;

assign lshr_ln167_fu_178_p2 = p_round_key_V_1_fu_88 >> zext_ln167_fu_175_p1;

assign lshr_ln195_1_fu_235_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln195_1_fu_231_p1;

assign lshr_ln195_2_fu_266_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln195_2_fu_262_p1;

assign lshr_ln195_3_fu_297_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln195_3_fu_293_p1;

assign lshr_ln195_fu_210_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln195_fu_206_p1;

assign or_ln173_fu_371_p2 = (shl_ln173_1_fu_365_p2 | and_ln173_fu_357_p2);

assign or_ln174_1_fu_434_p2 = (shl_ln174_1_fu_428_p2 | and_ln174_fu_420_p2);

assign or_ln174_fu_399_p2 = (shl_ln_reg_595 | 11'd32);

assign or_ln175_fu_497_p2 = (shl_ln175_1_fu_491_p2 | and_ln175_fu_483_p2);

assign or_ln176_fu_503_p2 = (shl_ln_reg_595 | 11'd96);

assign p_Result_s_fu_312_p5 = {{{{xor_ln1499_fu_307_p2}, {trunc_ln195_3_fu_272_p1}}, {trunc_ln195_2_fu_241_p1}}, {trunc_ln195_fu_216_p1}};

assign p_round_key_V_1_out = p_round_key_V_1_fu_88;

assign p_round_key_V_2_fu_557_p2 = (shl_ln176_1_fu_552_p2 | and_ln176_reg_690);

assign r_p_fu_189_p4 = {{lshr_ln167_reg_621[31:24]}};

assign ret_V_19_fu_336_p2 = (p_Result_s_fu_312_p5 ^ lhs_V_fu_332_p1);

assign ret_V_20_fu_394_p2 = (ret_V_19_reg_640 ^ lhs_V_8_fu_390_p1);

assign ret_V_21_fu_457_p2 = (ret_V_20_reg_657 ^ lhs_V_9_fu_453_p1);

assign ret_V_fu_543_p2 = (temp_V_fu_540_p1 ^ ret_V_21_reg_679);

assign shl_ln173_1_fu_365_p2 = zext_ln173_1_fu_362_p1 << zext_ln173_fu_342_p1;

assign shl_ln173_fu_345_p2 = 1408'd4294967295 << zext_ln173_fu_342_p1;

assign shl_ln174_1_fu_428_p2 = zext_ln174_1_fu_425_p1 << zext_ln174_fu_404_p1;

assign shl_ln174_fu_408_p2 = 1408'd4294967295 << zext_ln174_fu_404_p1;

assign shl_ln175_1_fu_491_p2 = zext_ln175_1_fu_488_p1 << zext_ln175_fu_467_p1;

assign shl_ln175_fu_471_p2 = 1408'd4294967295 << zext_ln175_fu_467_p1;

assign shl_ln176_1_fu_552_p2 = zext_ln176_1_fu_548_p1 << zext_ln176_reg_685;

assign shl_ln176_fu_512_p2 = 1408'd4294967295 << zext_ln176_fu_508_p1;

assign shl_ln195_1_fu_223_p3 = {{trunc_ln195_1_fu_220_p1}, {3'd0}};

assign shl_ln195_2_fu_254_p3 = {{tmp_s_fu_245_p4}, {3'd0}};

assign shl_ln195_3_fu_285_p3 = {{tmp_29_fu_276_p4}, {3'd0}};

assign shl_ln4_fu_198_p3 = {{r_p_fu_189_p4}, {3'd0}};

assign shl_ln_fu_137_p3 = {{ap_sig_allocacmp_i_2}, {5'd0}};

assign temp_V_fu_540_p1 = lshr_ln167_reg_621[31:0];

assign tmp_29_fu_276_p4 = {{lshr_ln167_reg_621[23:16]}};

assign tmp_s_fu_245_p4 = {{lshr_ln167_reg_621[15:8]}};

assign trunc_ln195_1_fu_220_p1 = lshr_ln167_reg_621[7:0];

assign trunc_ln195_2_fu_241_p1 = lshr_ln195_1_fu_235_p2[7:0];

assign trunc_ln195_3_fu_272_p1 = lshr_ln195_2_fu_266_p2[7:0];

assign trunc_ln195_4_fu_303_p1 = lshr_ln195_3_fu_297_p2[7:0];

assign trunc_ln195_fu_216_p1 = lshr_ln195_fu_210_p2[7:0];

assign trunc_ln_fu_151_p4 = {{ap_sig_allocacmp_i_2[5:2]}};

assign xor_ln1499_fu_307_p2 = (trunc_ln195_4_fu_303_p1 ^ crypto_aes_rcon_load_reg_630);

assign xor_ln173_fu_351_p2 = (shl_ln173_fu_345_p2 ^ 1408'd7083271603906078757501937199839970337237042072752024044272935252133021449487672037753077279976540494138725768234495819230178699615482523444525217326451885295083794903354995236859949814158861106339793498427520403285563504697437506153794873484561573759163876734171825622767620957924878367969185009358384129424236514293956457858505582263102570156257796764049361854053114869322098725721757629614488965634874516982012228724064255);

assign xor_ln174_fu_414_p2 = (shl_ln174_fu_408_p2 ^ 1408'd7083271603906078757501937199839970337237042072752024044272935252133021449487672037753077279976540494138725768234495819230178699615482523444525217326451885295083794903354995236859949814158861106339793498427520403285563504697437506153794873484561573759163876734171825622767620957924878367969185009358384129424236514293956457858505582263102570156257796764049361854053114869322098725721757629614488965634874516982012228724064255);

assign xor_ln175_fu_477_p2 = (shl_ln175_fu_471_p2 ^ 1408'd7083271603906078757501937199839970337237042072752024044272935252133021449487672037753077279976540494138725768234495819230178699615482523444525217326451885295083794903354995236859949814158861106339793498427520403285563504697437506153794873484561573759163876734171825622767620957924878367969185009358384129424236514293956457858505582263102570156257796764049361854053114869322098725721757629614488965634874516982012228724064255);

assign xor_ln176_fu_518_p2 = (shl_ln176_fu_512_p2 ^ 1408'd7083271603906078757501937199839970337237042072752024044272935252133021449487672037753077279976540494138725768234495819230178699615482523444525217326451885295083794903354995236859949814158861106339793498427520403285563504697437506153794873484561573759163876734171825622767620957924878367969185009358384129424236514293956457858505582263102570156257796764049361854053114869322098725721757629614488965634874516982012228724064255);

assign zext_ln1499_1_fu_382_p1 = add_ln174_reg_652;

assign zext_ln1499_2_fu_445_p1 = add_ln175_reg_674;

assign zext_ln1499_fu_324_p1 = add_ln173_reg_635;

assign zext_ln167_fu_175_p1 = add_ln167_reg_605;

assign zext_ln173_1_fu_362_p1 = ret_V_19_reg_640;

assign zext_ln173_fu_342_p1 = shl_ln_reg_595;

assign zext_ln174_1_fu_425_p1 = ret_V_20_reg_657;

assign zext_ln174_fu_404_p1 = or_ln174_fu_399_p2;

assign zext_ln175_1_fu_488_p1 = ret_V_21_reg_679;

assign zext_ln175_fu_467_p1 = add_ln175_1_fu_462_p2;

assign zext_ln176_1_fu_548_p1 = ret_V_fu_543_p2;

assign zext_ln176_fu_508_p1 = or_ln176_fu_503_p2;

assign zext_ln195_1_fu_231_p1 = shl_ln195_1_fu_223_p3;

assign zext_ln195_2_fu_262_p1 = shl_ln195_2_fu_254_p3;

assign zext_ln195_3_fu_293_p1 = shl_ln195_3_fu_285_p3;

assign zext_ln195_fu_206_p1 = shl_ln4_fu_198_p3;

assign zext_ln200_fu_167_p1 = add_ln171_fu_161_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_595[4:0] <= 5'b00000;
    add_ln167_reg_605[4:0] <= 5'b00000;
    add_ln173_reg_635[4:0] <= 5'b00000;
    add_ln174_reg_652[4:0] <= 5'b00000;
    or_ln174_reg_663[5:0] <= 6'b100000;
    add_ln175_reg_674[4:0] <= 5'b00000;
    zext_ln176_reg_685[6:0] <= 7'b1100000;
    zext_ln176_reg_685[1407:11] <= 1397'b
end

endmodule //pynqrypt_encrypt_aes_generate_round_keys_Pipeline_loop_aes_generate_round_keys
