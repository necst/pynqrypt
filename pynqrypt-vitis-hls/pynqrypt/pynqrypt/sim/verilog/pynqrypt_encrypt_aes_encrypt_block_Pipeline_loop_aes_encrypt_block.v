// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pynqrypt_encrypt_aes_encrypt_block_Pipeline_loop_aes_encrypt_block (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xor_ln859,
        this_round_keys_address0,
        this_round_keys_ce0,
        this_round_keys_q0,
        t_out,
        t_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] xor_ln859;
output  [3:0] this_round_keys_address0;
output   this_round_keys_ce0;
input  [127:0] this_round_keys_q0;
output  [127:0] t_out;
output   t_out_ap_vld;

reg ap_idle;
reg this_round_keys_ce0;
reg t_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln48_fu_160_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
reg   [3:0] i_3_reg_740;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln48_reg_745;
wire   [7:0] trunc_ln86_1_fu_196_p1;
reg   [7:0] trunc_ln86_1_reg_749;
wire   [7:0] trunc_ln86_2_fu_228_p1;
reg   [7:0] trunc_ln86_2_reg_754;
wire   [7:0] trunc_ln86_3_fu_260_p1;
reg   [7:0] trunc_ln86_3_reg_759;
wire   [7:0] trunc_ln86_4_fu_292_p1;
reg   [7:0] trunc_ln86_4_reg_764;
wire   [7:0] trunc_ln86_5_fu_324_p1;
reg   [7:0] trunc_ln86_5_reg_769;
wire   [7:0] trunc_ln86_6_fu_356_p1;
reg   [7:0] trunc_ln86_6_reg_774;
wire   [7:0] trunc_ln86_7_fu_388_p1;
reg   [7:0] trunc_ln86_7_reg_779;
wire   [7:0] trunc_ln86_8_fu_420_p1;
reg   [7:0] trunc_ln86_8_reg_784;
wire   [7:0] trunc_ln86_9_fu_452_p1;
reg   [7:0] trunc_ln86_9_reg_789;
wire   [7:0] trunc_ln86_10_fu_484_p1;
reg   [7:0] trunc_ln86_10_reg_794;
wire   [7:0] trunc_ln86_11_fu_516_p1;
reg   [7:0] trunc_ln86_11_reg_799;
wire   [7:0] trunc_ln86_12_fu_548_p1;
reg   [7:0] trunc_ln86_12_reg_804;
wire   [7:0] trunc_ln86_13_fu_580_p1;
reg   [7:0] trunc_ln86_13_reg_809;
wire   [7:0] trunc_ln86_14_fu_612_p1;
reg   [7:0] trunc_ln86_14_reg_814;
wire   [7:0] trunc_ln86_15_fu_644_p1;
reg   [7:0] trunc_ln86_15_reg_819;
wire   [7:0] trunc_ln86_16_fu_676_p1;
reg   [7:0] trunc_ln86_16_reg_824;
wire   [127:0] xor_ln859_1_fu_701_p2;
reg   [127:0] xor_ln859_1_reg_834;
wire    ap_block_pp0_stage1_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire    call_ret_aes_mix_columns_fu_142_ap_ready;
wire   [127:0] call_ret_aes_mix_columns_fu_142_block_read;
wire   [127:0] call_ret_aes_mix_columns_fu_142_ap_return;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln48_fu_169_p1;
wire    ap_block_pp0_stage0;
reg   [127:0] p_Val2_s_fu_108;
reg   [127:0] ap_sig_allocacmp_p_Val2_load_1;
wire    ap_loop_init;
reg   [3:0] i_fu_112;
wire   [3:0] add_ln48_fu_707_p2;
reg   [3:0] ap_sig_allocacmp_i_3;
wire    ap_block_pp0_stage0_01001;
wire   [7:0] trunc_ln86_fu_174_p1;
wire   [10:0] shl_ln_fu_178_p3;
wire   [2047:0] zext_ln86_fu_186_p1;
wire   [2047:0] lshr_ln86_fu_190_p2;
wire   [7:0] tmp_s_fu_200_p4;
wire   [10:0] shl_ln86_1_fu_210_p3;
wire   [2047:0] zext_ln86_1_fu_218_p1;
wire   [2047:0] lshr_ln86_1_fu_222_p2;
wire   [7:0] tmp_30_fu_232_p4;
wire   [10:0] shl_ln86_2_fu_242_p3;
wire   [2047:0] zext_ln86_2_fu_250_p1;
wire   [2047:0] lshr_ln86_2_fu_254_p2;
wire   [7:0] tmp_31_fu_264_p4;
wire   [10:0] shl_ln86_3_fu_274_p3;
wire   [2047:0] zext_ln86_3_fu_282_p1;
wire   [2047:0] lshr_ln86_3_fu_286_p2;
wire   [7:0] tmp_32_fu_296_p4;
wire   [10:0] shl_ln86_4_fu_306_p3;
wire   [2047:0] zext_ln86_4_fu_314_p1;
wire   [2047:0] lshr_ln86_4_fu_318_p2;
wire   [7:0] tmp_33_fu_328_p4;
wire   [10:0] shl_ln86_5_fu_338_p3;
wire   [2047:0] zext_ln86_5_fu_346_p1;
wire   [2047:0] lshr_ln86_5_fu_350_p2;
wire   [7:0] tmp_34_fu_360_p4;
wire   [10:0] shl_ln86_6_fu_370_p3;
wire   [2047:0] zext_ln86_6_fu_378_p1;
wire   [2047:0] lshr_ln86_6_fu_382_p2;
wire   [7:0] tmp_35_fu_392_p4;
wire   [10:0] shl_ln86_7_fu_402_p3;
wire   [2047:0] zext_ln86_7_fu_410_p1;
wire   [2047:0] lshr_ln86_7_fu_414_p2;
wire   [7:0] tmp_36_fu_424_p4;
wire   [10:0] shl_ln86_8_fu_434_p3;
wire   [2047:0] zext_ln86_8_fu_442_p1;
wire   [2047:0] lshr_ln86_8_fu_446_p2;
wire   [7:0] tmp_37_fu_456_p4;
wire   [10:0] shl_ln86_9_fu_466_p3;
wire   [2047:0] zext_ln86_9_fu_474_p1;
wire   [2047:0] lshr_ln86_9_fu_478_p2;
wire   [7:0] tmp_38_fu_488_p4;
wire   [10:0] shl_ln86_s_fu_498_p3;
wire   [2047:0] zext_ln86_10_fu_506_p1;
wire   [2047:0] lshr_ln86_10_fu_510_p2;
wire   [7:0] tmp_39_fu_520_p4;
wire   [10:0] shl_ln86_10_fu_530_p3;
wire   [2047:0] zext_ln86_11_fu_538_p1;
wire   [2047:0] lshr_ln86_11_fu_542_p2;
wire   [7:0] tmp_40_fu_552_p4;
wire   [10:0] shl_ln86_11_fu_562_p3;
wire   [2047:0] zext_ln86_12_fu_570_p1;
wire   [2047:0] lshr_ln86_12_fu_574_p2;
wire   [7:0] tmp_41_fu_584_p4;
wire   [10:0] shl_ln86_12_fu_594_p3;
wire   [2047:0] zext_ln86_13_fu_602_p1;
wire   [2047:0] lshr_ln86_13_fu_606_p2;
wire   [7:0] tmp_42_fu_616_p4;
wire   [10:0] shl_ln86_13_fu_626_p3;
wire   [2047:0] zext_ln86_14_fu_634_p1;
wire   [2047:0] lshr_ln86_14_fu_638_p2;
wire   [7:0] tmp_43_fu_648_p4;
wire   [10:0] shl_ln86_14_fu_658_p3;
wire   [2047:0] zext_ln86_15_fu_666_p1;
wire   [2047:0] lshr_ln86_15_fu_670_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

pynqrypt_encrypt_aes_mix_columns call_ret_aes_mix_columns_fu_142(
    .ap_ready(call_ret_aes_mix_columns_fu_142_ap_ready),
    .block_read(call_ret_aes_mix_columns_fu_142_block_read),
    .ap_return(call_ret_aes_mix_columns_fu_142_ap_return)
);

pynqrypt_encrypt_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        i_fu_112 <= 4'd1;
    end else if (((icmp_ln48_reg_745 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_112 <= add_ln48_fu_707_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            p_Val2_s_fu_108 <= xor_ln859;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            p_Val2_s_fu_108 <= xor_ln859_1_reg_834;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_3_reg_740 <= ap_sig_allocacmp_i_3;
        icmp_ln48_reg_745 <= icmp_ln48_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_160_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln86_10_reg_794 <= trunc_ln86_10_fu_484_p1;
        trunc_ln86_11_reg_799 <= trunc_ln86_11_fu_516_p1;
        trunc_ln86_12_reg_804 <= trunc_ln86_12_fu_548_p1;
        trunc_ln86_13_reg_809 <= trunc_ln86_13_fu_580_p1;
        trunc_ln86_14_reg_814 <= trunc_ln86_14_fu_612_p1;
        trunc_ln86_15_reg_819 <= trunc_ln86_15_fu_644_p1;
        trunc_ln86_16_reg_824 <= trunc_ln86_16_fu_676_p1;
        trunc_ln86_1_reg_749 <= trunc_ln86_1_fu_196_p1;
        trunc_ln86_2_reg_754 <= trunc_ln86_2_fu_228_p1;
        trunc_ln86_3_reg_759 <= trunc_ln86_3_fu_260_p1;
        trunc_ln86_4_reg_764 <= trunc_ln86_4_fu_292_p1;
        trunc_ln86_5_reg_769 <= trunc_ln86_5_fu_324_p1;
        trunc_ln86_6_reg_774 <= trunc_ln86_6_fu_356_p1;
        trunc_ln86_7_reg_779 <= trunc_ln86_7_fu_388_p1;
        trunc_ln86_8_reg_784 <= trunc_ln86_8_fu_420_p1;
        trunc_ln86_9_reg_789 <= trunc_ln86_9_fu_452_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_reg_745 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        xor_ln859_1_reg_834 <= xor_ln859_1_fu_701_p2;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_160_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_3 = 4'd1;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_112;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_sig_allocacmp_p_Val2_load_1 = xor_ln859;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ap_sig_allocacmp_p_Val2_load_1 = xor_ln859_1_reg_834;
        end else begin
            ap_sig_allocacmp_p_Val2_load_1 = p_Val2_s_fu_108;
        end
    end else begin
        ap_sig_allocacmp_p_Val2_load_1 = p_Val2_s_fu_108;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_160_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_out_ap_vld = 1'b1;
    end else begin
        t_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_round_keys_ce0 = 1'b1;
    end else begin
        this_round_keys_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln48_fu_707_p2 = (i_3_reg_740 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign call_ret_aes_mix_columns_fu_142_block_read = {{{{{{{{{{{{{{{{trunc_ln86_16_reg_824}, {trunc_ln86_11_reg_799}}, {trunc_ln86_6_reg_774}}, {trunc_ln86_1_reg_749}}, {trunc_ln86_12_reg_804}}, {trunc_ln86_7_reg_779}}, {trunc_ln86_2_reg_754}}, {trunc_ln86_13_reg_809}}, {trunc_ln86_8_reg_784}}, {trunc_ln86_3_reg_759}}, {trunc_ln86_14_reg_814}}, {trunc_ln86_9_reg_789}}, {trunc_ln86_4_reg_764}}, {trunc_ln86_15_reg_819}}, {trunc_ln86_10_reg_794}}, {trunc_ln86_5_reg_769}};

assign icmp_ln48_fu_160_p2 = ((ap_sig_allocacmp_i_3 == 4'd10) ? 1'b1 : 1'b0);

assign lshr_ln86_10_fu_510_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln86_10_fu_506_p1;

assign lshr_ln86_11_fu_542_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln86_11_fu_538_p1;

assign lshr_ln86_12_fu_574_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln86_12_fu_570_p1;

assign lshr_ln86_13_fu_606_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln86_13_fu_602_p1;

assign lshr_ln86_14_fu_638_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln86_14_fu_634_p1;

assign lshr_ln86_15_fu_670_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln86_15_fu_666_p1;

assign lshr_ln86_1_fu_222_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln86_1_fu_218_p1;

assign lshr_ln86_2_fu_254_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln86_2_fu_250_p1;

assign lshr_ln86_3_fu_286_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln86_3_fu_282_p1;

assign lshr_ln86_4_fu_318_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln86_4_fu_314_p1;

assign lshr_ln86_5_fu_350_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln86_5_fu_346_p1;

assign lshr_ln86_6_fu_382_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln86_6_fu_378_p1;

assign lshr_ln86_7_fu_414_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln86_7_fu_410_p1;

assign lshr_ln86_8_fu_446_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln86_8_fu_442_p1;

assign lshr_ln86_9_fu_478_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln86_9_fu_474_p1;

assign lshr_ln86_fu_190_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln86_fu_186_p1;

assign shl_ln86_10_fu_530_p3 = {{tmp_39_fu_520_p4}, {3'd0}};

assign shl_ln86_11_fu_562_p3 = {{tmp_40_fu_552_p4}, {3'd0}};

assign shl_ln86_12_fu_594_p3 = {{tmp_41_fu_584_p4}, {3'd0}};

assign shl_ln86_13_fu_626_p3 = {{tmp_42_fu_616_p4}, {3'd0}};

assign shl_ln86_14_fu_658_p3 = {{tmp_43_fu_648_p4}, {3'd0}};

assign shl_ln86_1_fu_210_p3 = {{tmp_s_fu_200_p4}, {3'd0}};

assign shl_ln86_2_fu_242_p3 = {{tmp_30_fu_232_p4}, {3'd0}};

assign shl_ln86_3_fu_274_p3 = {{tmp_31_fu_264_p4}, {3'd0}};

assign shl_ln86_4_fu_306_p3 = {{tmp_32_fu_296_p4}, {3'd0}};

assign shl_ln86_5_fu_338_p3 = {{tmp_33_fu_328_p4}, {3'd0}};

assign shl_ln86_6_fu_370_p3 = {{tmp_34_fu_360_p4}, {3'd0}};

assign shl_ln86_7_fu_402_p3 = {{tmp_35_fu_392_p4}, {3'd0}};

assign shl_ln86_8_fu_434_p3 = {{tmp_36_fu_424_p4}, {3'd0}};

assign shl_ln86_9_fu_466_p3 = {{tmp_37_fu_456_p4}, {3'd0}};

assign shl_ln86_s_fu_498_p3 = {{tmp_38_fu_488_p4}, {3'd0}};

assign shl_ln_fu_178_p3 = {{trunc_ln86_fu_174_p1}, {3'd0}};

assign t_out = p_Val2_s_fu_108;

assign this_round_keys_address0 = zext_ln48_fu_169_p1;

assign tmp_30_fu_232_p4 = {{ap_sig_allocacmp_p_Val2_load_1[23:16]}};

assign tmp_31_fu_264_p4 = {{ap_sig_allocacmp_p_Val2_load_1[31:24]}};

assign tmp_32_fu_296_p4 = {{ap_sig_allocacmp_p_Val2_load_1[39:32]}};

assign tmp_33_fu_328_p4 = {{ap_sig_allocacmp_p_Val2_load_1[47:40]}};

assign tmp_34_fu_360_p4 = {{ap_sig_allocacmp_p_Val2_load_1[55:48]}};

assign tmp_35_fu_392_p4 = {{ap_sig_allocacmp_p_Val2_load_1[63:56]}};

assign tmp_36_fu_424_p4 = {{ap_sig_allocacmp_p_Val2_load_1[71:64]}};

assign tmp_37_fu_456_p4 = {{ap_sig_allocacmp_p_Val2_load_1[79:72]}};

assign tmp_38_fu_488_p4 = {{ap_sig_allocacmp_p_Val2_load_1[87:80]}};

assign tmp_39_fu_520_p4 = {{ap_sig_allocacmp_p_Val2_load_1[95:88]}};

assign tmp_40_fu_552_p4 = {{ap_sig_allocacmp_p_Val2_load_1[103:96]}};

assign tmp_41_fu_584_p4 = {{ap_sig_allocacmp_p_Val2_load_1[111:104]}};

assign tmp_42_fu_616_p4 = {{ap_sig_allocacmp_p_Val2_load_1[119:112]}};

assign tmp_43_fu_648_p4 = {{ap_sig_allocacmp_p_Val2_load_1[127:120]}};

assign tmp_s_fu_200_p4 = {{ap_sig_allocacmp_p_Val2_load_1[15:8]}};

assign trunc_ln86_10_fu_484_p1 = lshr_ln86_9_fu_478_p2[7:0];

assign trunc_ln86_11_fu_516_p1 = lshr_ln86_10_fu_510_p2[7:0];

assign trunc_ln86_12_fu_548_p1 = lshr_ln86_11_fu_542_p2[7:0];

assign trunc_ln86_13_fu_580_p1 = lshr_ln86_12_fu_574_p2[7:0];

assign trunc_ln86_14_fu_612_p1 = lshr_ln86_13_fu_606_p2[7:0];

assign trunc_ln86_15_fu_644_p1 = lshr_ln86_14_fu_638_p2[7:0];

assign trunc_ln86_16_fu_676_p1 = lshr_ln86_15_fu_670_p2[7:0];

assign trunc_ln86_1_fu_196_p1 = lshr_ln86_fu_190_p2[7:0];

assign trunc_ln86_2_fu_228_p1 = lshr_ln86_1_fu_222_p2[7:0];

assign trunc_ln86_3_fu_260_p1 = lshr_ln86_2_fu_254_p2[7:0];

assign trunc_ln86_4_fu_292_p1 = lshr_ln86_3_fu_286_p2[7:0];

assign trunc_ln86_5_fu_324_p1 = lshr_ln86_4_fu_318_p2[7:0];

assign trunc_ln86_6_fu_356_p1 = lshr_ln86_5_fu_350_p2[7:0];

assign trunc_ln86_7_fu_388_p1 = lshr_ln86_6_fu_382_p2[7:0];

assign trunc_ln86_8_fu_420_p1 = lshr_ln86_7_fu_414_p2[7:0];

assign trunc_ln86_9_fu_452_p1 = lshr_ln86_8_fu_446_p2[7:0];

assign trunc_ln86_fu_174_p1 = ap_sig_allocacmp_p_Val2_load_1[7:0];

assign xor_ln859_1_fu_701_p2 = (this_round_keys_q0 ^ call_ret_aes_mix_columns_fu_142_ap_return);

assign zext_ln48_fu_169_p1 = ap_sig_allocacmp_i_3;

assign zext_ln86_10_fu_506_p1 = shl_ln86_s_fu_498_p3;

assign zext_ln86_11_fu_538_p1 = shl_ln86_10_fu_530_p3;

assign zext_ln86_12_fu_570_p1 = shl_ln86_11_fu_562_p3;

assign zext_ln86_13_fu_602_p1 = shl_ln86_12_fu_594_p3;

assign zext_ln86_14_fu_634_p1 = shl_ln86_13_fu_626_p3;

assign zext_ln86_15_fu_666_p1 = shl_ln86_14_fu_658_p3;

assign zext_ln86_1_fu_218_p1 = shl_ln86_1_fu_210_p3;

assign zext_ln86_2_fu_250_p1 = shl_ln86_2_fu_242_p3;

assign zext_ln86_3_fu_282_p1 = shl_ln86_3_fu_274_p3;

assign zext_ln86_4_fu_314_p1 = shl_ln86_4_fu_306_p3;

assign zext_ln86_5_fu_346_p1 = shl_ln86_5_fu_338_p3;

assign zext_ln86_6_fu_378_p1 = shl_ln86_6_fu_370_p3;

assign zext_ln86_7_fu_410_p1 = shl_ln86_7_fu_402_p3;

assign zext_ln86_8_fu_442_p1 = shl_ln86_8_fu_434_p3;

assign zext_ln86_9_fu_474_p1 = shl_ln86_9_fu_466_p3;

assign zext_ln86_fu_186_p1 = shl_ln_fu_178_p3;

endmodule //pynqrypt_encrypt_aes_encrypt_block_Pipeline_loop_aes_encrypt_block
