// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pynqrypt_encrypt_aes_generate_round_keys_Pipeline_loop_aes_generate_round_keys (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_round_key_V_address0,
        p_round_key_V_ce0,
        p_round_key_V_we0,
        p_round_key_V_d0,
        p_round_key_V_q0,
        p_round_key_V_address1,
        p_round_key_V_ce1,
        p_round_key_V_we1,
        p_round_key_V_d1,
        p_round_key_V_q1
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] p_round_key_V_address0;
output   p_round_key_V_ce0;
output   p_round_key_V_we0;
output  [31:0] p_round_key_V_d0;
input  [31:0] p_round_key_V_q0;
output  [5:0] p_round_key_V_address1;
output   p_round_key_V_ce1;
output   p_round_key_V_we1;
output  [31:0] p_round_key_V_d1;
input  [31:0] p_round_key_V_q1;

reg ap_idle;
reg[5:0] p_round_key_V_address0;
reg p_round_key_V_ce0;
reg p_round_key_V_we0;
reg[31:0] p_round_key_V_d0;
reg[5:0] p_round_key_V_address1;
reg p_round_key_V_ce1;
reg p_round_key_V_we1;
reg[31:0] p_round_key_V_d1;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln171_fu_175_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state5;
wire    ap_block_state5_pp0_stage4_iter0;
wire   [3:0] crypto_aes_rcon_V_address0;
reg    crypto_aes_rcon_V_ce0;
wire   [7:0] crypto_aes_rcon_V_q0;
reg   [31:0] reg_162;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
reg   [5:0] i_2_reg_452;
reg   [31:0] temp_V_reg_481;
reg   [7:0] crypto_aes_rcon_V_load_reg_490;
wire   [31:0] ret_V_4_fu_379_p2;
reg   [31:0] ret_V_4_reg_505;
reg   [31:0] lhs_V_2_reg_511;
wire   [31:0] ret_V_6_fu_405_p2;
reg   [31:0] ret_V_6_reg_516;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
wire   [63:0] zext_ln172_fu_187_p1;
wire   [63:0] zext_ln186_4_fu_208_p1;
wire   [63:0] zext_ln178_fu_219_p1;
wire   [63:0] zext_ln179_fu_229_p1;
wire   [63:0] zext_ln180_fu_239_p1;
wire   [63:0] i_cast3_fu_385_p1;
wire   [63:0] zext_ln179_1_fu_400_p1;
wire   [63:0] zext_ln180_1_fu_415_p1;
wire   [63:0] zext_ln181_fu_430_p1;
reg   [5:0] i_fu_72;
wire   [5:0] add_ln171_fu_435_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i_2;
wire   [31:0] ret_V_5_fu_389_p2;
wire   [31:0] ret_V_fu_420_p2;
wire   [5:0] add_ln172_fu_181_p2;
wire   [3:0] trunc_ln_fu_192_p4;
wire   [3:0] add_ln176_fu_202_p2;
wire   [5:0] add_ln178_fu_213_p2;
wire   [5:0] add_ln179_fu_224_p2;
wire   [5:0] add_ln180_fu_234_p2;
wire   [7:0] r_p_fu_244_p4;
wire   [10:0] shl_ln_fu_253_p3;
wire   [2047:0] zext_ln186_fu_261_p1;
wire   [2047:0] lshr_ln186_fu_265_p2;
wire   [7:0] trunc_ln186_1_fu_275_p1;
wire   [10:0] shl_ln186_1_fu_278_p3;
wire   [2047:0] zext_ln186_1_fu_286_p1;
wire   [2047:0] lshr_ln186_1_fu_290_p2;
wire   [7:0] tmp_5_fu_300_p4;
wire   [10:0] shl_ln186_2_fu_309_p3;
wire   [2047:0] zext_ln186_2_fu_317_p1;
wire   [2047:0] lshr_ln186_2_fu_321_p2;
wire   [7:0] tmp_6_fu_331_p4;
wire   [10:0] shl_ln186_3_fu_340_p3;
wire   [2047:0] zext_ln186_3_fu_348_p1;
wire   [2047:0] lshr_ln186_3_fu_352_p2;
wire   [7:0] trunc_ln186_4_fu_358_p1;
wire   [7:0] xor_ln1499_fu_362_p2;
wire   [7:0] trunc_ln186_3_fu_327_p1;
wire   [7:0] trunc_ln186_2_fu_296_p1;
wire   [7:0] trunc_ln186_fu_271_p1;
wire   [31:0] p_Result_s_fu_367_p5;
wire   [5:0] or_ln179_fu_395_p2;
wire   [5:0] or_ln180_fu_410_p2;
wire   [5:0] or_ln181_fu_425_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_done_reg = 1'b0;
end

pynqrypt_encrypt_aes_generate_round_keys_Pipeline_loop_aes_generate_round_keys_crypto_aes_rconbkb #(
    .DataWidth( 8 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
crypto_aes_rcon_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(crypto_aes_rcon_V_address0),
    .ce0(crypto_aes_rcon_V_ce0),
    .q0(crypto_aes_rcon_V_q0)
);

pynqrypt_encrypt_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        i_fu_72 <= 6'd4;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_fu_72 <= add_ln171_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        reg_162 <= p_round_key_V_q1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        reg_162 <= p_round_key_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        crypto_aes_rcon_V_load_reg_490 <= crypto_aes_rcon_V_q0;
        temp_V_reg_481 <= p_round_key_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_2_reg_452 <= ap_sig_allocacmp_i_2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        lhs_V_2_reg_511 <= p_round_key_V_q0;
        ret_V_4_reg_505 <= ret_V_4_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ret_V_6_reg_516 <= ret_V_6_fu_405_p2;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln171_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 6'd4;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_72;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        crypto_aes_rcon_V_ce0 = 1'b1;
    end else begin
        crypto_aes_rcon_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_round_key_V_address0 = zext_ln181_fu_430_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_round_key_V_address0 = zext_ln179_1_fu_400_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_round_key_V_address0 = zext_ln180_fu_239_p1;
    end else if (((icmp_ln171_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_round_key_V_address0 = zext_ln178_fu_219_p1;
    end else begin
        p_round_key_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_round_key_V_address1 = zext_ln180_1_fu_415_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_round_key_V_address1 = i_cast3_fu_385_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_round_key_V_address1 = zext_ln179_fu_229_p1;
    end else if (((icmp_ln171_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_round_key_V_address1 = zext_ln172_fu_187_p1;
    end else begin
        p_round_key_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | ((ap_start_int == 1'b1) & (icmp_ln171_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        p_round_key_V_ce0 = 1'b1;
    end else begin
        p_round_key_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | ((ap_start_int == 1'b1) & (icmp_ln171_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        p_round_key_V_ce1 = 1'b1;
    end else begin
        p_round_key_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_round_key_V_d0 = ret_V_fu_420_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_round_key_V_d0 = ret_V_5_fu_389_p2;
    end else begin
        p_round_key_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_round_key_V_d1 = ret_V_6_reg_516;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_round_key_V_d1 = ret_V_4_reg_505;
    end else begin
        p_round_key_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        p_round_key_V_we0 = 1'b1;
    end else begin
        p_round_key_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        p_round_key_V_we1 = 1'b1;
    end else begin
        p_round_key_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (icmp_ln171_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln171_fu_435_p2 = (i_2_reg_452 + 6'd4);

assign add_ln172_fu_181_p2 = ($signed(ap_sig_allocacmp_i_2) + $signed(6'd63));

assign add_ln176_fu_202_p2 = ($signed(trunc_ln_fu_192_p4) + $signed(4'd15));

assign add_ln178_fu_213_p2 = ($signed(ap_sig_allocacmp_i_2) + $signed(6'd60));

assign add_ln179_fu_224_p2 = ($signed(i_2_reg_452) + $signed(6'd61));

assign add_ln180_fu_234_p2 = ($signed(i_2_reg_452) + $signed(6'd62));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign crypto_aes_rcon_V_address0 = zext_ln186_4_fu_208_p1;

assign i_cast3_fu_385_p1 = i_2_reg_452;

assign icmp_ln171_fu_175_p2 = ((ap_sig_allocacmp_i_2 < 6'd44) ? 1'b1 : 1'b0);

assign lshr_ln186_1_fu_290_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln186_1_fu_286_p1;

assign lshr_ln186_2_fu_321_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln186_2_fu_317_p1;

assign lshr_ln186_3_fu_352_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln186_3_fu_348_p1;

assign lshr_ln186_fu_265_p2 = 2048'd2869618975290639062594974519597816386035077209210385677284518162336985023502962151465775969507961862820568736543004676439868535775640188584098917533413284844376797297285941524888791401501466624530423689326528054213168201056672989590893583853414110162539122864583953358348775951166211353578440977400428507475679327181038682772945817200201960445064847785221508011893952350688324234443749897213621340677040612747745615276448919507935121141307752692835344166708617454322778699219895865633266409040561742768581056182730443599545881830075941537620590442514083341749674612746994879540562701631131184186066652929592955206755 >> zext_ln186_fu_261_p1;

assign or_ln179_fu_395_p2 = (i_2_reg_452 | 6'd1);

assign or_ln180_fu_410_p2 = (i_2_reg_452 | 6'd2);

assign or_ln181_fu_425_p2 = (i_2_reg_452 | 6'd3);

assign p_Result_s_fu_367_p5 = {{{{xor_ln1499_fu_362_p2}, {trunc_ln186_3_fu_327_p1}}, {trunc_ln186_2_fu_296_p1}}, {trunc_ln186_fu_271_p1}};

assign r_p_fu_244_p4 = {{temp_V_reg_481[31:24]}};

assign ret_V_4_fu_379_p2 = (reg_162 ^ p_Result_s_fu_367_p5);

assign ret_V_5_fu_389_p2 = (ret_V_4_reg_505 ^ reg_162);

assign ret_V_6_fu_405_p2 = (ret_V_5_fu_389_p2 ^ lhs_V_2_reg_511);

assign ret_V_fu_420_p2 = (temp_V_reg_481 ^ ret_V_6_reg_516);

assign shl_ln186_1_fu_278_p3 = {{trunc_ln186_1_fu_275_p1}, {3'd0}};

assign shl_ln186_2_fu_309_p3 = {{tmp_5_fu_300_p4}, {3'd0}};

assign shl_ln186_3_fu_340_p3 = {{tmp_6_fu_331_p4}, {3'd0}};

assign shl_ln_fu_253_p3 = {{r_p_fu_244_p4}, {3'd0}};

assign tmp_5_fu_300_p4 = {{temp_V_reg_481[15:8]}};

assign tmp_6_fu_331_p4 = {{temp_V_reg_481[23:16]}};

assign trunc_ln186_1_fu_275_p1 = temp_V_reg_481[7:0];

assign trunc_ln186_2_fu_296_p1 = lshr_ln186_1_fu_290_p2[7:0];

assign trunc_ln186_3_fu_327_p1 = lshr_ln186_2_fu_321_p2[7:0];

assign trunc_ln186_4_fu_358_p1 = lshr_ln186_3_fu_352_p2[7:0];

assign trunc_ln186_fu_271_p1 = lshr_ln186_fu_265_p2[7:0];

assign trunc_ln_fu_192_p4 = {{ap_sig_allocacmp_i_2[5:2]}};

assign xor_ln1499_fu_362_p2 = (trunc_ln186_4_fu_358_p1 ^ crypto_aes_rcon_V_load_reg_490);

assign zext_ln172_fu_187_p1 = add_ln172_fu_181_p2;

assign zext_ln178_fu_219_p1 = add_ln178_fu_213_p2;

assign zext_ln179_1_fu_400_p1 = or_ln179_fu_395_p2;

assign zext_ln179_fu_229_p1 = add_ln179_fu_224_p2;

assign zext_ln180_1_fu_415_p1 = or_ln180_fu_410_p2;

assign zext_ln180_fu_239_p1 = add_ln180_fu_234_p2;

assign zext_ln181_fu_430_p1 = or_ln181_fu_425_p2;

assign zext_ln186_1_fu_286_p1 = shl_ln186_1_fu_278_p3;

assign zext_ln186_2_fu_317_p1 = shl_ln186_2_fu_309_p3;

assign zext_ln186_3_fu_348_p1 = shl_ln186_3_fu_340_p3;

assign zext_ln186_4_fu_208_p1 = add_ln176_fu_202_p2;

assign zext_ln186_fu_261_p1 = shl_ln_fu_253_p3;

endmodule //pynqrypt_encrypt_aes_generate_round_keys_Pipeline_loop_aes_generate_round_keys
